<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interactives on Michael Lee</title>
    <link>/categories/interactives/index.xml</link>
    <description>Recent content in Interactives on Michael Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mdlee12@gmail.com (Michael Lee)</managingEditor>
    <webMaster>mdlee12@gmail.com (Michael Lee)</webMaster>
    <atom:link href="/categories/interactives/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Genre Interactive - Visualizing Video Games Throughout History</title>
      <link>/interactives/2015-06-10-genre-interactive/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/interactives/2015-06-10-genre-interactive/</guid>
      <description>&lt;style&gt;
      svg *::selection {
         background : transparent;
         width: 700px;
         height: 500px;
         margin-left: 30px;
         font-size: 13px; 
      }
     
      svg *::-moz-selection {
         background:transparent;
      } 
     
      svg *::-webkit-selection {
         background:transparent;
      }
      rect.selection {
        stroke          : #333;
        stroke-dasharray: 4px;
        stroke-opacity  : 0.5;
        fill            : transparent;
      }

      rect.cell-border {
        stroke: #eee;
        stroke-width:0.3px;   
      }

      rect.cell-selected {
        stroke: rgb(51,102,153);
        stroke-width:0.5px;   
      }

      rect.cell-hover {
        stroke: #F00;
        stroke-width:0.3px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Andale Mono, Andale Mono;
        fill: #4a4a4a;
      }

      text.text-selected {
        fill: #000;
      }

      text.text-highlight {
        fill: #c00;
      }
      text.text-hover {
        fill: #00C;
      }
      #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }

      #tooltip.hidden {
        display: none;
      }

      #tooltip p {
        margin: 0;
        font-family: Andale Mono;
        font-size: 12px;
        line-height: 20px;
      }
&lt;/style&gt;

&lt;div id=&#34;tooltip&#34; class=&#34;hidden&#34;&gt;
  &lt;p&gt;&lt;span id=&#34;value&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script src=&#34;http://d3js.org/d3.v3.min.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;chart2&#34; class=&#34;text-center&#34;&gt;&lt;/div&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
var margin = { top: 175, right: 10, bottom: 50, left: 175 },
  cellSize=12;
  cl_number=43;
  rw_number=8;
  widthy = cellSize*cl_number, // - margin.left - margin.right,
  heighty = cellSize*rw_number , // - margin.top - margin.bottom,
  //gridSize = Math.floor(widthy / 24),
  legendElementWidth = cellSize*2.5,
  colorBuckets = 11,
  colors = [&#39;#FFFFFF&#39;,&#39;#F1EEF6&#39;,&#39;#E6D3E1&#39;,&#39;#DBB9CD&#39;,&#39;#D19EB9&#39;,&#39;#C684A4&#39;,&#39;#BB6990&#39;,&#39;#B14F7C&#39;,&#39;#A63467&#39;,&#39;#9B1A53&#39;,&#39;#91003F&#39;];
  hcrw = [1,2,3,4,5,6,7,8],
  hccl = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  rwLabel = [&#39;Action&#39;,&#39;Adventure&#39;,&#39;Educational&#39;,&#39;RPG&#39;,&#39;Racing&#39;,&#39;Simulation&#39;,&#39;Sports&#39;,&#39;Strategy&#39;],
  clLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;];

d3.csv(&#34;/data/data_heatmap2.csv&#34;,
function(d) {
  return {
    rw:   +d.rw_id,
    cl:   +d.cl_id,
    value: +d.vgfre
  };
},
function(error, data) {
  var colorScale = d3.scale.linear()
      .domain([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .range(colors);
  
  var chartb = d3.select(&#34;div#chart2&#34;).append(&#34;svg&#34;)
      .attr(&#34;width&#34;, widthy + margin.left + margin.right)
      .attr(&#34;height&#34;, heighty + margin.top + margin.bottom)
      .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      ;

  var rwSortOrder=false;
  var rwLabels = chartb.append(&#34;g&#34;)
      .selectAll(&#34;.rwLabelg&#34;)
      .data(rwLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hcrw.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;end&#34;)
      .attr(&#34;transform&#34;, &#34;translate(-6,&#34; + cellSize / 1.5 + &#34;)&#34;)
      .attr(&#34;class&#34;, function (d,i) { return &#34;rwLabel mono rr&#34;+i;} ) 
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {rwSortOrder=!rwSortOrder; sortbylabel(&#34;rr&#34;,i,rwSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var clSortOrder=false;
  var clLabels = chartb.append(&#34;g&#34;)
      .selectAll(&#34;.clLabelg&#34;)
      .data(clLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hccl.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;left&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34;+cellSize/2 + &#34;,-6) rotate (-90)&#34;)
      .attr(&#34;class&#34;,  function (d,i) { return &#34;clLabel mono cc&#34;+i;} )
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {clSortOrder=!clSortOrder;  sortbylabel(&#34;cc&#34;,i,clSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var heat = chartb.append(&#34;g&#34;).attr(&#34;class&#34;,&#34;g3&#34;)
        .selectAll(&#34;.cellg&#34;)
        .data(data,function(d){return d.rw+&#34;:&#34;+d.cl;})
        .enter()
        .append(&#34;rect&#34;)
        .attr(&#34;x&#34;, function(d) { return hccl.indexOf(d.cl) * cellSize; })
        .attr(&#34;y&#34;, function(d) { return hcrw.indexOf(d.rw) * cellSize; })
        .attr(&#34;class&#34;, function(d){return &#34;cell cell-border ccrr&#34;+(d.rw-1)+&#34; cccc&#34;+(d.cl-1);})
        .attr(&#34;width&#34;, cellSize)
        .attr(&#34;height&#34;, cellSize)
        .style(&#34;fill&#34;, function(d) { return colorScale(d.value); })
        /* .on(&#34;click&#34;, function(d) {
               var rwtext=d3.select(&#34;.rr&#34;+(d.rw-1));
               if(rwtext.classed(&#34;text-selected&#34;)==false){
                   rwtext.classed(&#34;text-selected&#34;,true);
               }else{
                   rwtext.classed(&#34;text-selected&#34;,false);
               }
        })*/
        .on(&#34;mouseover&#34;, function(d){
               //highlight text
               d3.select(this).classed(&#34;cell-hover&#34;,true);
               d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-highlight&#34;,function(r,ri){ return ri==(d.rw-1);});
               d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-highlight&#34;,function(c,ci){ return ci==(d.cl-1);});
        
               //Update the tooltip position and value
               d3.select(&#34;#tooltip&#34;)
                 .style(&#34;left&#34;, (d3.event.pageX+10) + &#34;px&#34;)
                 .style(&#34;top&#34;, (d3.event.pageY-10) + &#34;px&#34;)
                 .select(&#34;#value&#34;)
                 .text(d.value+&#34;% of &#34;+rwLabel[d.rw-1]+&#34; games have a &#34;+clLabel[d.cl-1]+&#34; theme&#34;);  
               //Show the tooltip
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
        })
        .on(&#34;mouseout&#34;, function(){
               d3.select(this).classed(&#34;cell-hover&#34;,false);
               d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
        })
        ;

  var legend = chartb.selectAll(&#34;.legend&#34;)
      .data([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .enter().append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;legend&#34;);
 
  legend.append(&#34;rect&#34;)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, heighty+(cellSize*2))
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;height&#34;, cellSize)
    .style(&#34;fill&#34;, function(d, i) { return colors[i]; });
 
  legend.append(&#34;text&#34;)
    .attr(&#34;class&#34;, &#34;mono&#34;)
    .text(function(d) { return d; })
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, heighty + (cellSize*4));

// Change ordering of cells

  function sortbylabel(rrORcc,i,sortOrder){
       var t = chartb.transition().duration(1500);
       var vgfre=[];
       var sorted; // sorted is zero-based index
       d3.selectAll(&#34;.cc&#34;+rrORcc+i) 
         .filter(function(ce){
            vgfre.push(ce.value);
          })
       ;
       if(rrORcc==&#34;rr&#34;){ // sort vgfre of a gene
         sorted=d3.range(cl_number).sort(function(a,b){ if(sortOrder){ return vgfre[b]-vgfre[a];}else{ return vgfre[a]-vgfre[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;x&#34;, function(d) { return sorted.indexOf(d.cl-1) * cellSize; })
           ;
         t.selectAll(&#34;.clLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }else{ // sort vgfreq of a contrast
         sorted=d3.range(rw_number).sort(function(a,b){if(sortOrder){ return vgfre[b]-vgfre[a];}else{ return vgfre[a]-vgfre[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;y&#34;, function(d) { return sorted.indexOf(d.rw-1) * cellSize; })
           ;
         t.selectAll(&#34;.rwLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }
  }

  d3.select(&#34;#order&#34;).on(&#34;change&#34;,function(){
    order(this.value);
  });
  

  var sa=d3.select(&#34;.g3&#34;)
      .on(&#34;mousedown&#34;, function() {
          if( !d3.event.altKey) {
             d3.selectAll(&#34;.cell-selected&#34;).classed(&#34;cell-selected&#34;,false);
             d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-selected&#34;,false);
          }
         var p = d3.mouse(this);
         sa.append(&#34;rect&#34;)
         .attr({
             rx      : 0,
             ry      : 0,
             class   : &#34;selection&#34;,
             x       : p[0],
             y       : p[1],
             widthy   : 1,
             heighty  : 1
         })
      })
      .on(&#34;mousemove&#34;, function() {
         var s = sa.select(&#34;rect.selection&#34;);
      
         if(!s.empty()) {
             var p = d3.mouse(this),
                 d = {
                     x       : parseInt(s.attr(&#34;x&#34;), 10),
                     y       : parseInt(s.attr(&#34;y&#34;), 10),
                     widthy   : parseInt(s.attr(&#34;width&#34;), 10),
                     heighty  : parseInt(s.attr(&#34;height&#34;), 10)
                 },
                 move = {
                     x : p[0] - d.x,
                     y : p[1] - d.y
                 }
             ;
      
             if(move.x &lt; 1 || (move.x*2&lt;d.widthy)) {
                 d.x = p[0];
                 d.widthy -= move.x;
             } else {
                 d.widthy = move.x;       
             }
      
             if(move.y &lt; 1 || (move.y*2&lt;d.heighty)) {
                 d.y = p[1];
                 d.heighty -= move.y;
             } else {
                 d.heighty = move.y;       
             }
             s.attr(d);
      
                 // deselect all temporary selected state objects
             d3.selectAll(&#39;.cell-selection.cell-selected&#39;).classed(&#34;cell-selected&#34;, false);
             d3.selectAll(&#34;.text-selection.text-selected&#34;).classed(&#34;text-selected&#34;,false);

             d3.selectAll(&#39;.cell&#39;).filter(function(cell_d, i) {
                 if(
                     !d3.select(this).classed(&#34;cell-selected&#34;) &amp;&amp; 
                         // inner circle inside selection frame
                     (this.x.baseVal.value)+cellSize &gt;= d.x &amp;&amp; (this.x.baseVal.value)&lt;=d.x+d.widthy &amp;&amp; 
                     (this.y.baseVal.value)+cellSize &gt;= d.y &amp;&amp; (this.y.baseVal.value)&lt;=d.y+d.heighty
                 ) {
      
                     d3.select(this)
                     .classed(&#34;cell-selection&#34;, true)
                     .classed(&#34;cell-selected&#34;, true);

                     d3.select(&#34;.rr&#34;+(cell_d.rw-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);

                     d3.select(&#34;.cc&#34;+(cell_d.cl-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);
                 }
             });
         }
      })
      .on(&#34;mouseup&#34;, function() {
            // remove selection frame
         sa.selectAll(&#34;rect.selection&#34;).remove();
      
             // remove temporary selection marker class
         d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
         d3.selectAll(&#34;.text-selection&#34;).classed(&#34;text-selection&#34;,false);
      })
      .on(&#34;mouseout&#34;, function() {
         if(d3.event.relatedTarget.tagName==&#39;html&#39;) {
                 // remove selection frame
             sa.selectAll(&#34;rect.selection&#34;).remove();
                 // remove temporary selection marker class
             d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
             d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-selected&#34;,false);
         }
      })
      ;
});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Theme Interactive - Visualizing Video Games Throughout History</title>
      <link>/interactives/2015-06-10-theme-interactive/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/interactives/2015-06-10-theme-interactive/</guid>
      <description>&lt;style&gt;
      svg *::selection {
         background : transparent;
         width: 700px;
         height: 500px;
         margin-left: 30px;
         font-size: 13px; 
      }
     
      svg *::-moz-selection {
         background:transparent;
      } 
     
      svg *::-webkit-selection {
         background:transparent;
      }
      rect.selection {
        stroke          : #333;
        stroke-dasharray: 4px;
        stroke-opacity  : 0.5;
        fill            : transparent;
      }

      rect.cell-border {
        stroke: #eee;
        stroke-width:0.3px;   
      }

      rect.cell-selected {
        stroke: rgb(51,102,153);
        stroke-width:0.5px;   
      }

      rect.cell-hover {
        stroke: #F00;
        stroke-width:0.3px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Andale Mono, Andale Mono;
        fill: #4a4a4a;
      }

      text.text-selected {
        fill: #000;
      }

      text.text-highlight {
        fill: #c00;
      }
      text.text-hover {
        fill: #00C;
      }
      #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }

      #tooltip.hidden {
        display: none;
      }

      #tooltip p {
        margin: 0;
        font-family: Andale Mono;
        font-size: 12px;
        line-height: 20px;
      }
&lt;/style&gt;

&lt;div id=&#34;tooltip&#34; class=&#34;hidden&#34;&gt;
  &lt;p&gt;&lt;span id=&#34;value&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script src=&#34;http://d3js.org/d3.v3.min.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;chart1&#34; class=&#34;text-center&#34;&gt;&lt;/div&gt;

&lt;script&gt;
var margin = { top: 175, right: 10, bottom: 50, left: 175 },
  cellSize=12;
  col_number=43;
  row_number=43;
  width = cellSize*col_number, // - margin.left - margin.right,
  height = cellSize*row_number , // - margin.top - margin.bottom,
  //gridSize = Math.floor(width / 24),
  legendElementWidth = cellSize*2.5,
  colorBuckets = 11,
  colors = [&#39;#FFFFFF&#39;,&#39;#F1EEF6&#39;,&#39;#E6D3E1&#39;,&#39;#DBB9CD&#39;,&#39;#D19EB9&#39;,&#39;#C684A4&#39;,&#39;#BB6990&#39;,&#39;#B14F7C&#39;,&#39;#A63467&#39;,&#39;#9B1A53&#39;,&#39;#91003F&#39;];
  hcrow = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  hccol = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  rowLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;],
  colLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;];

d3.csv(&#34;/data/data_heatmap.csv&#34;,
function(d) {
  return {
    row:   +d.row_idx,
    col:   +d.col_idx,
    value: +d.vgfreq
  };
},
function(error, data) {
  var colorScale = d3.scale.linear()
      .domain([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .range(colors);
  
  var charta = d3.select(&#34;div#chart1&#34;).append(&#34;svg&#34;)
      .attr(&#34;width&#34;, width + margin.left + margin.right)
      .attr(&#34;height&#34;, height + margin.top + margin.bottom)
      .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      ;
  var rowSortOrder=false;
  var colSortOrder=false;
  var rowLabels = charta.append(&#34;g&#34;)
      .selectAll(&#34;.rowLabelg&#34;)
      .data(rowLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hcrow.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;end&#34;)
      .attr(&#34;transform&#34;, &#34;translate(-6,&#34; + cellSize / 1.5 + &#34;)&#34;)
      .attr(&#34;class&#34;, function (d,i) { return &#34;rowLabel mono r&#34;+i;} ) 
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {rowSortOrder=!rowSortOrder; sortbylabel(&#34;r&#34;,i,rowSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var colLabels = charta.append(&#34;g&#34;)
      .selectAll(&#34;.colLabelg&#34;)
      .data(colLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hccol.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;left&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34;+cellSize/2 + &#34;,-6) rotate (-90)&#34;)
      .attr(&#34;class&#34;,  function (d,i) { return &#34;colLabel mono c&#34;+i;} )
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {colSortOrder=!colSortOrder;  sortbylabel(&#34;c&#34;,i,colSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var heatMap = charta.append(&#34;g&#34;).attr(&#34;class&#34;,&#34;g3&#34;)
        .selectAll(&#34;.cellg&#34;)
        .data(data,function(d){return d.row+&#34;:&#34;+d.col;})
        .enter()
        .append(&#34;rect&#34;)
        .attr(&#34;x&#34;, function(d) { return hccol.indexOf(d.col) * cellSize; })
        .attr(&#34;y&#34;, function(d) { return hcrow.indexOf(d.row) * cellSize; })
        .attr(&#34;class&#34;, function(d){return &#34;cell cell-border cr&#34;+(d.row-1)+&#34; cc&#34;+(d.col-1);})
        .attr(&#34;width&#34;, cellSize)
        .attr(&#34;height&#34;, cellSize)
        .style(&#34;fill&#34;, function(d) { return colorScale(d.value); })
        /* .on(&#34;click&#34;, function(d) {
               var rowtext=d3.select(&#34;.r&#34;+(d.row-1));
               if(rowtext.classed(&#34;text-selected&#34;)==false){
                   rowtext.classed(&#34;text-selected&#34;,true);
               }else{
                   rowtext.classed(&#34;text-selected&#34;,false);
               }
        })*/
        .on(&#34;mouseover&#34;, function(d){
               //highlight text
               d3.select(this).classed(&#34;cell-hover&#34;,true);
               d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-highlight&#34;,function(r,ri){ return ri==(d.row-1);});
               d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-highlight&#34;,function(c,ci){ return ci==(d.col-1);});
        
               //Update the tooltip position and value
               d3.select(&#34;#tooltip&#34;)
                 .style(&#34;left&#34;, (d3.event.pageX+10) + &#34;px&#34;)
                 .style(&#34;top&#34;, (d3.event.pageY-10) + &#34;px&#34;)
                 .select(&#34;#value&#34;)
                 .text(d.value+&#34;% of &#34;+rowLabel[d.row-1]+&#34; games have a &#34;+colLabel[d.col-1]+&#34; theme&#34;);  
               //Show the tooltip
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
        })
        .on(&#34;mouseout&#34;, function(){
               d3.select(this).classed(&#34;cell-hover&#34;,false);
               d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
        })
        ;

  var legend = charta.selectAll(&#34;.legend&#34;)
      .data([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .enter().append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;legend&#34;);
 
  legend.append(&#34;rect&#34;)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, height+(cellSize*2))
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;height&#34;, cellSize)
    .style(&#34;fill&#34;, function(d, i) { return colors[i]; });
 
  legend.append(&#34;text&#34;)
    .attr(&#34;class&#34;, &#34;mono&#34;)
    .text(function(d) { return d; })
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, height + (cellSize*4));

// Change ordering of cells

  function sortbylabel(rORc,i,sortOrder){
       var t = charta.transition().duration(1500);
       var vgfreq=[];
       var sorted; // sorted is zero-based index
       d3.selectAll(&#34;.c&#34;+rORc+i) 
         .filter(function(ce){
            vgfreq.push(ce.value);
          })
       ;
       if(rORc==&#34;r&#34;){ // sort vgfreq of a gene
         sorted=d3.range(col_number).sort(function(a,b){ if(sortOrder){ return vgfreq[b]-vgfreq[a];}else{ return vgfreq[a]-vgfreq[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;x&#34;, function(d) { return sorted.indexOf(d.col-1) * cellSize; })
           ;
         t.selectAll(&#34;.colLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }else{ // sort vgfreq of a contrast
         sorted=d3.range(row_number).sort(function(a,b){if(sortOrder){ return vgfreq[b]-vgfreq[a];}else{ return vgfreq[a]-vgfreq[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;y&#34;, function(d) { return sorted.indexOf(d.row-1) * cellSize; })
           ;
         t.selectAll(&#34;.rowLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }
  }

  d3.select(&#34;#order&#34;).on(&#34;change&#34;,function(){
    order(this.value);
  });
  

  var sa=d3.select(&#34;.g3&#34;)
      .on(&#34;mousedown&#34;, function() {
          if( !d3.event.altKey) {
             d3.selectAll(&#34;.cell-selected&#34;).classed(&#34;cell-selected&#34;,false);
             d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-selected&#34;,false);
          }
         var p = d3.mouse(this);
         sa.append(&#34;rect&#34;)
         .attr({
             rx      : 0,
             ry      : 0,
             class   : &#34;selection&#34;,
             x       : p[0],
             y       : p[1],
             width   : 1,
             height  : 1
         })
      })
      .on(&#34;mousemove&#34;, function() {
         var s = sa.select(&#34;rect.selection&#34;);
      
         if(!s.empty()) {
             var p = d3.mouse(this),
                 d = {
                     x       : parseInt(s.attr(&#34;x&#34;), 10),
                     y       : parseInt(s.attr(&#34;y&#34;), 10),
                     width   : parseInt(s.attr(&#34;width&#34;), 10),
                     height  : parseInt(s.attr(&#34;height&#34;), 10)
                 },
                 move = {
                     x : p[0] - d.x,
                     y : p[1] - d.y
                 }
             ;
      
             if(move.x &lt; 1 || (move.x*2&lt;d.width)) {
                 d.x = p[0];
                 d.width -= move.x;
             } else {
                 d.width = move.x;       
             }
      
             if(move.y &lt; 1 || (move.y*2&lt;d.height)) {
                 d.y = p[1];
                 d.height -= move.y;
             } else {
                 d.height = move.y;       
             }
             s.attr(d);
      
                 // deselect all temporary selected state objects
             d3.selectAll(&#39;.cell-selection.cell-selected&#39;).classed(&#34;cell-selected&#34;, false);
             d3.selectAll(&#34;.text-selection.text-selected&#34;).classed(&#34;text-selected&#34;,false);

             d3.selectAll(&#39;.cell&#39;).filter(function(cell_d, i) {
                 if(
                     !d3.select(this).classed(&#34;cell-selected&#34;) &amp;&amp; 
                         // inner circle inside selection frame
                     (this.x.baseVal.value)+cellSize &gt;= d.x &amp;&amp; (this.x.baseVal.value)&lt;=d.x+d.width &amp;&amp; 
                     (this.y.baseVal.value)+cellSize &gt;= d.y &amp;&amp; (this.y.baseVal.value)&lt;=d.y+d.height
                 ) {
      
                     d3.select(this)
                     .classed(&#34;cell-selection&#34;, true)
                     .classed(&#34;cell-selected&#34;, true);

                     d3.select(&#34;.r&#34;+(cell_d.row-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);

                     d3.select(&#34;.c&#34;+(cell_d.col-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);
                 }
             });
         }
      })
      .on(&#34;mouseup&#34;, function() {
            // remove selection frame
         sa.selectAll(&#34;rect.selection&#34;).remove();
      
             // remove temporary selection marker class
         d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
         d3.selectAll(&#34;.text-selection&#34;).classed(&#34;text-selection&#34;,false);
      })
      .on(&#34;mouseout&#34;, function() {
         if(d3.event.relatedTarget.tagName==&#39;html&#39;) {
                 // remove selection frame
             sa.selectAll(&#34;rect.selection&#34;).remove();
                 // remove temporary selection marker class
             d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
             d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-selected&#34;,false);
         }
      })
      ;
});
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>