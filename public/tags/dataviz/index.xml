<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dataviz on Michael Lee</title>
    <link>/tags/dataviz/index.xml</link>
    <description>Recent content in Dataviz on Michael Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mdlee12@gmail.com (Michael Lee)</managingEditor>
    <webMaster>mdlee12@gmail.com (Michael Lee)</webMaster>
    <atom:link href="/tags/dataviz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Animated Line Chart from Condition of Education 2017 Data Release</title>
      <link>/animation/2017-06-28-animated-line-chart-coe-bullying/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/animation/2017-06-28-animated-line-chart-coe-bullying/</guid>
      <description>&lt;div id=&#34;animation-seen-here&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Animation seen here!&lt;/h2&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
New from &lt;a href=&#34;https://twitter.com/hashtag/COE2017?src=hash&#34;&gt;#COE2017&lt;/a&gt;: 21% of students reported being bullied at school in 2015, a ↓ from the 28% reported in 2005. &lt;a href=&#34;https://t.co/5BlyLdHS9W&#34;&gt;https://t.co/5BlyLdHS9W&lt;/a&gt; &lt;a href=&#34;https://t.co/Fr1pTt8xca&#34;&gt;pic.twitter.com/Fr1pTt8xca&lt;/a&gt;
&lt;/p&gt;
— NCES (&lt;span class=&#34;citation&#34;&gt;@EdNCES&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/EdNCES/status/859807520881344512&#34;&gt;May 3, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;full-image&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Full image:&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/line_graph_bullying.gif&#34; alt=&#34;COE 2017 Bullying Line Graph Animation&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;COE 2017 Bullying Line Graph Animation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Interested in learning more? Hire me to consult on your next project, follow me on &lt;a href=&#34;twitter.com/mikeleeco&#34;&gt;twitter&lt;/a&gt;, leave a comment, or contact me via &lt;a href=&#34;mailto:mdlee12@gmail.com&#34;&gt;email&lt;/a&gt;. All inquiries welcome!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reproducing the WSJ Measles Vaccination Chart Using R</title>
      <link>/animation/2017-06-28-wsj-measles-vaccination-chart/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/animation/2017-06-28-wsj-measles-vaccination-chart/</guid>
      <description>&lt;div id=&#34;mastering-animation-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mastering Animation in R&lt;/h2&gt;
&lt;p&gt;See the full write-up of the development here: &lt;a href=&#34;www.mikelee.co/posts/2017-06-28-wsj-measles-vaccination-chart/&#34; class=&#34;uri&#34;&gt;www.mikelee.co/posts/2017-06-28-wsj-measles-vaccination-chart/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wall-street-journal-measles-vaccination-chart&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wall Street Journal Measles Vaccination Chart&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/measles.png&#34; alt=&#34;Wall Street Journal&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Wall Street Journal&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reproduced-animation-using-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reproduced Animation Using R&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/measlesCompress.gif&#34; alt=&#34;Measles Animation using animation&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Measles Animation using animation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Interested in learning more? Hire me to consult on your next project, follow me on &lt;a href=&#34;twitter.com/mikeleeco&#34;&gt;twitter&lt;/a&gt;, leave a comment, or contact me via &lt;a href=&#34;mailto:mdlee12@gmail.com&#34;&gt;email&lt;/a&gt;. All inquiries welcome!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reproducing the WSJ Measles Vaccination Chart Using R</title>
      <link>/posts/2017-06-28-wsj-measles-vaccination-chart/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2017-06-28-wsj-measles-vaccination-chart/</guid>
      <description>&lt;div id=&#34;mastering-animation-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mastering Animation in R&lt;/h2&gt;
&lt;p&gt;Recently I’ve been working on creating gif animations for &lt;a href=&#34;https://twitter.com/EdNCES/status/859807520881344512&#34;&gt;social media&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
New from &lt;a href=&#34;https://twitter.com/hashtag/COE2017?src=hash&#34;&gt;#COE2017&lt;/a&gt;: 21% of students reported being bullied at school in 2015, a ↓ from the 28% reported in 2005. &lt;a href=&#34;https://t.co/5BlyLdHS9W&#34;&gt;https://t.co/5BlyLdHS9W&lt;/a&gt; &lt;a href=&#34;https://t.co/Fr1pTt8xca&#34;&gt;pic.twitter.com/Fr1pTt8xca&lt;/a&gt;
&lt;/p&gt;
— NCES (&lt;span class=&#34;citation&#34;&gt;@EdNCES&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/EdNCES/status/859807520881344512&#34;&gt;May 3, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;It’s pretty addicting! And not as complicated as it appears. Let’s walk through the creation of a gif using R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wall-street-journal-measles-vaccination-chart&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wall Street Journal Measles Vaccination Chart&lt;/h2&gt;
&lt;p&gt;One of the more compelling data visualizations produced in recent years is the following representation of measles incidence from 1928 to 2003 produced by the Wall Street Journal graphics team:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/measles.png&#34; alt=&#34;Wall Street Journal&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Wall Street Journal&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the two years after its release, many prominent data journalists, designers, and developers have analyzed/applauded the design decisions in the chart, which urge the reader to its take-home message: the introduction of the measles vaccine &lt;strong&gt;drastically&lt;/strong&gt; reduced the incidence of the virus.&lt;/p&gt;
&lt;p&gt;Recognizing it’s merit, let’s accentuate that take-home message by adding the element of animation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;download-dependent-packages-and-prep-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Download dependent packages and prep the data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reshape2)
library(dplyr)
library(extrafont)
library(ggplot2)
library(gganimate)
library(animation)
library(grid)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll use &lt;code&gt;reshape2&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; to manipulate the data, &lt;code&gt;ggplot2&lt;/code&gt; to plot it, &lt;code&gt;gganimate&lt;/code&gt; for a first animation exploration, and &lt;code&gt;animation&lt;/code&gt; and &lt;code&gt;grid&lt;/code&gt; for a customized finished product.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;download-and-prep-the-data-everything-is-a-remix&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Download and prep the data (&lt;a href=&#34;https://vimeo.com/139094998&#34;&gt;everything is a remix&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;The heavy data prep and plotting for this plot has been done already! Much of this code comes from [this site] (&lt;a href=&#34;https://benjaminlmoore.wordpress.com/2015/04/09/recreating-the-vaccination-heatmaps-in-r/&#34; class=&#34;uri&#34;&gt;https://benjaminlmoore.wordpress.com/2015/04/09/recreating-the-vaccination-heatmaps-in-r/&lt;/a&gt;), with small improvements and the inclusion of some omitted pieces. From that site, I’ve relinked the steps to download the data:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Register and login to “Project Tycho“&lt;/li&gt;
&lt;li&gt;Go to level 1 data, then Search and retrieve data&lt;/li&gt;
&lt;li&gt;Now change a couple of options: geographic level := state; disease outcome := incidence&lt;/li&gt;
&lt;li&gt;Add all states (highlight all at once with Ctrl+A (or Cmd+A on Macs)&lt;/li&gt;
&lt;li&gt;Hit submit and scroll down to Click here to download results to excel&lt;/li&gt;
&lt;li&gt;Open in excel and export to CSV&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we’ve got the data and you’ve set your working directory, lets read in the file and reshape it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;measles &amp;lt;- read.csv(&amp;quot;/home/michael/Documents/animation_samples/measles/measles.csv&amp;quot;, skip=2)
measles &amp;lt;- melt(measles, id.var=c(&amp;quot;YEAR&amp;quot;, &amp;quot;WEEK&amp;quot;))
colnames(measles) &amp;lt;- c(&amp;quot;year&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;cases&amp;quot;)
measles$cases &amp;lt;- ifelse(measles$cases==&amp;quot;\u002D&amp;quot;,NA,measles$cases)
measles$cases &amp;lt;- as.numeric(measles$cases)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One piece I wanted to replicate was the state abbreviations used in the figure. I used the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_U.S._state_abbreviations&#34;&gt;AP style guide&lt;/a&gt;, and you can access that csv through &lt;a href=&#34;www.mikelee.co/data/stateName.csv&#34;&gt;this link&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stateAP &amp;lt;- read.csv(&amp;quot;/home/michael/Documents/animation_samples/measles/stateName.csv&amp;quot;)
stateAP$stateName &amp;lt;- toupper(stateAP$stateName)
measles$state &amp;lt;- stateAP$stateAP[match(measles$state,stateAP$stateName)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll create our measles data frame by summarizing the incidence of measles occurring in each state by year, while also recoding instances in which state’s have no incidence/values for a given year as NAs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mdf &amp;lt;- measles %&amp;gt;% group_by(state, year) %&amp;gt;% 
  summarise(incidence=if(all(is.na(cases))) NA else
    sum(cases, na.rm=T))
mdf$state &amp;lt;- factor(mdf$state, levels=rev(levels(mdf$state)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-the-figure-using-ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create the figure using &lt;code&gt;ggplot2&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We’ll pull the colors directly from the &lt;a href=&#34;http://graphics.wsj.com/infectious-diseases-and-vaccines/js/script.min.js&#34;&gt;WSJ javascript source code&lt;/a&gt;. We’ll also load the &lt;em&gt;Open Sans&lt;/em&gt; family of fonts via &lt;code&gt;loadfonts()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cols&amp;lt;- c(&amp;quot;#e7f0fa&amp;quot;, #lighter than light blue
         &amp;quot;#c9e2f6&amp;quot;, #light blue
         &amp;quot;#95cbee&amp;quot;, #blue
         &amp;quot;#0099dc&amp;quot;, #darker blue
         &amp;quot;#4ab04a&amp;quot;, #green
         &amp;quot;#ffd73e&amp;quot;, #yellow
         &amp;quot;#eec73a&amp;quot;, #mustard
         &amp;quot;#e29421&amp;quot;, #dark khaki (?)
         &amp;quot;#f05336&amp;quot;, #orange red
         &amp;quot;#ce472e&amp;quot;) #red
extrafont::loadfonts()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nifty!&lt;/p&gt;
&lt;p&gt;Let’s shift to making the plot. The majority of the figure is generated via these three function calls:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg &amp;lt;- ggplot(mdf, aes(y=state, x=year, fill=incidence)) + 
  geom_tile(colour=&amp;quot;white&amp;quot;,
            width=.9, height=.9) + theme_minimal() +
  scale_fill_gradientn(colours=cols, limits=c(0, 4000),
                       values=c(0, 0.01, 0.02, 0.03, 0.09, 0.1, .15, .25, .4, .5, 1), 
                       na.value=rgb(246, 246, 246, max=255),
                       labels=c(&amp;quot;0k&amp;quot;, &amp;quot;1k&amp;quot;, &amp;quot;2k&amp;quot;, &amp;quot;3k&amp;quot;, &amp;quot;4k&amp;quot;),
                       guide=guide_colourbar(ticks=T, nbin=50,
                                             barheight=.5, label=T, 
                                             barwidth=10))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most contentious design decision made by the WSJ authors is undoubtedly the color scale. Aligning gradient color values (in our chart as &lt;code&gt;values=c(0, 0.01, 0.02, 0.03, 0.09, 0.1, .15, .25, .4, .5, 1)&lt;/code&gt;) so that one portion of the scale is weighted more prominently than the other accentuates the message of the chart; some might see this as ambiguous or misleading - it’s challenging to ascribe what value a given color stands for. Once we have the skeleton for our plot, we can add an appropriate x axis scale, vaccine introduction line, and figure labels:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg &amp;lt;- gg +
  scale_x_continuous(expand=c(0,0), 
                     breaks=seq(1930, 2010, by=10)) +
  geom_segment(x=1963, xend=1963, y=0, yend=51.5, size=.9) +
  labs(x=&amp;quot;&amp;quot;, y=&amp;quot;&amp;quot;, fill=&amp;quot;&amp;quot;) +
  ggtitle(&amp;quot;Measles&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll add in our theme.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg &amp;lt;- gg +
  theme(legend.position=c(.5, -.13),
        legend.direction=&amp;quot;horizontal&amp;quot;,
        legend.text=element_text(colour=&amp;quot;grey20&amp;quot;),
        plot.margin=grid::unit(c(.5,.5,1.5,.5), &amp;quot;cm&amp;quot;),
        axis.text.y=element_text(size=6, family=&amp;quot;Open Sans Regular&amp;quot;, 
                                 hjust=1),
        axis.text.x=element_text(size=8, family=&amp;quot;Open Sans Regular&amp;quot;),
        axis.ticks.y=element_blank(),
        panel.grid=element_blank(),
        title=element_text(hjust=-.07, vjust=1, 
                           family=&amp;quot;Open Sans Semibold&amp;quot;),
        text=element_text(family=&amp;quot;Open Sans&amp;quot;)) +
  annotate(&amp;quot;text&amp;quot;, label=&amp;quot;Vaccine introduced&amp;quot;, x=1963, y=53, 
           vjust=1, hjust=0, size=I(3), family=&amp;quot;Open Sans&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voila!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2017-06-28-wsj-measles-vaccination-chart_files/figure-html/gg-1.png&#34; width=&#34;1260&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;explore-the-ggplot2-object-with-gganimate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Explore the &lt;code&gt;ggplot2&lt;/code&gt; object with &lt;code&gt;gganimate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It’s dang easy to create an animation using &lt;code&gt;gganimate&lt;/code&gt;. Just add &lt;code&gt;frame&lt;/code&gt; to the initial ggplot2 call and you’re good to go! In our plot, we’ll want to iterate over the data years, so &lt;code&gt;.frame = year&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gganimate(gg, &amp;quot;/home/michael/Documents/mikeleeco.github.com/static/img/gganimate_measles.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/gganimate_measles.gif&#34; alt=&#34;Measles Animation using gganimate&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Measles Animation using gganimate&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That’s a great start! Though this could be further developed using &lt;code&gt;gganimate&lt;/code&gt; I prefer to use the &lt;code&gt;animation&lt;/code&gt; package’s &lt;code&gt;saveGIF&lt;/code&gt; function since I prefer the method in which multiple images can be called within one call.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;refine-our-gif-using-animation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Refine our gif using &lt;code&gt;animation&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The main idea behind creating our animation will be iteratively printing images of larger subsets of our data set. In the for-loop, &lt;code&gt;subset(mdf, year&amp;lt;=1928+i-1)&lt;/code&gt; takes the i-th value to subset the data year used in the figure. For example, for i==5, the data years 1928 through 1932 will appear in that image.&lt;/p&gt;
&lt;p&gt;Besides this change, and the addition of &lt;code&gt;frame=year&lt;/code&gt;, our ggplot2 call is nearly the same (I bumped up the font sizes to correspond with a larger image size). One supplement to the chart is the addition of pauses at critical points in the figure: in 1963 (when the measles vaccine was introduced) and in 2003 (the final data year of the figure). We’ll use if statements to determine whether pieces of the plot should be “drawn” given the circumstances of the subset. Here’s our final code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;saveGIF(
  for (i in 1:76) {
    
    gg &amp;lt;- ggplot(subset(mdf, year&amp;lt;=1928+i-1), aes(y=state, x=year, fill=incidence, frame=year)) + 
      geom_tile(colour=&amp;quot;white&amp;quot;, 
                width=.9, height=.9) + theme_minimal() +
      scale_fill_gradientn(colours=cols, limits=c(0, 4000),
                           values=c(0,0.01, 0.02, 0.03, 0.09, 0.1, .15, .25, .4, .5,1), 
                           na.value=rgb(246, 246, 246, max=255),
                           labels=c(&amp;quot;0k&amp;quot;, &amp;quot;1k&amp;quot;, &amp;quot;2k&amp;quot;, &amp;quot;3k&amp;quot;, &amp;quot;4k&amp;quot;),
                           guide=guide_colourbar(ticks=T, nbin=50,
                                                 barheight=2, label=T, 
                                                 barwidth=40)) +
      scale_x_continuous(expand=c(0,0), 
                         breaks=seq(1930, 2010, by=10), limits = c(1928,2003))
    
        # add in vertical line for data year &amp;gt;= 1963 (when the vaccine was introduced) 
      if(max(subset(mdf, year&amp;lt;=1928+i-1)$year) &amp;gt;= 1963) {
        
     gg &amp;lt;- gg + geom_segment(x=1963, xend=1963, y=0, yend=51.5, size=1.5) +
          annotate(&amp;quot;text&amp;quot;, label=&amp;quot;Vaccine introduced&amp;quot;, x=1963, y=53, 
                   vjust=1, hjust=0, size=I(10), family=&amp;quot;Open Sans&amp;quot;)
      } else {
        # doesn&amp;#39;t add vertical lineif before 1963! instead annotate with text &amp;quot;&amp;quot;
        gg &amp;lt;- gg +
          annotate(&amp;quot;text&amp;quot;, label=&amp;quot;&amp;quot;, x=1963, y=53, 
                   vjust=1, hjust=0, size=I(10), family=&amp;quot;Open Sans&amp;quot;)
      }
    gg &amp;lt;- gg + labs(x=&amp;quot;&amp;quot;, y=&amp;quot;&amp;quot;, fill=&amp;quot;&amp;quot;) +
      ggtitle(&amp;quot;Measles&amp;quot;) +
      theme(legend.position=c(.5, -.075),
            legend.direction=&amp;quot;horizontal&amp;quot;,
            legend.text=element_text(colour=&amp;quot;grey20&amp;quot;, size = 22, family=&amp;quot;Open Sans Regular&amp;quot;),
            plot.margin=grid::unit(c(.5,.5,2.5,.5), &amp;quot;cm&amp;quot;),
            axis.text.y=element_text(size=22, family=&amp;quot;Open Sans Regular&amp;quot;, 
                                     hjust=1),
            axis.text.x=element_text(size=22,family=&amp;quot;Open Sans Regular&amp;quot;,margin=margin(10,0,0,0,&amp;quot;pt&amp;quot;)),
            axis.ticks.y=element_blank(),
            axis.line.x=element_line(colour = &amp;quot;grey50&amp;quot;),
            axis.ticks.length=unit(.5, &amp;quot;cm&amp;quot;),
            axis.ticks.x=element_line(colour = &amp;quot;grey50&amp;quot;),
            panel.grid=element_blank(),
            title=element_text(hjust=-.07, vjust=1, size = 36,
                               family=&amp;quot;Open Sans Semibold&amp;quot;),
            text=element_text(family=&amp;quot;Open Sans&amp;quot;))

    # adding in pauses for data year == 1963 (when the vaccine was introduced) and 2003 (the last year in our data)
    # the replicate() function will take a ggplot2 object and print it n-times via grid.draw()
    if(max(subset(mdf, year&amp;lt;=1928+i-1)$year) == 1963) {
      replicate(30,grid.draw(gg))
    } else if (max(subset(mdf, year&amp;lt;=1928+i-1)$year) == 2003) {
        replicate(30,grid.draw(gg))
  } else {
  print(gg)
}
  }
  ,movie.name=&amp;quot;/home/michael/Documents/mikeleeco.github.com/static/img/measles.gif&amp;quot;,interval = .1, ani.width = 2050, ani.height = 1550)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/measles.gif&#34; alt=&#34;Measles Animation using animation&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Measles Animation using animation&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;addendum---gif-file-size-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Addendum - Gif File Size Management:&lt;/h3&gt;
&lt;p&gt;Customized gifs can get super large. The version above tops of at 73.4 MB! We’ll need to reduce that size for . One source for an #rstats solution is this site -&lt;a href=&#34;http://stla.github.io/stlapblog/posts/AnimatedGifs.html&#34; class=&#34;uri&#34;&gt;http://stla.github.io/stlapblog/posts/AnimatedGifs.html&lt;/a&gt; - which uses the open source tool &lt;a href=&#34;https://github.com/kohler/gifsicle&#34;&gt;gifsicle&lt;/a&gt; to reduce gif file sizes. Let’s port this author’s &lt;code&gt;gif_compress&lt;/code&gt; script to minimize our measles gif:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gif_compress &amp;lt;- function(ingif, outgif, show=TRUE, extra.opts=&amp;quot;&amp;quot;){
  command &amp;lt;-  sprintf(&amp;quot;gifsicle -O3 %s &amp;lt; %s &amp;gt; %s&amp;quot;, extra.opts, ingif, outgif)
  system.fun &amp;lt;- if (.Platform$OS.type == &amp;quot;windows&amp;quot;) shell else system
  if(show) message(&amp;quot;Executing: &amp;quot;, strwrap(command, exdent = 2, prefix = &amp;quot;\n&amp;quot;))
  system.fun(ifelse(.Platform$OS.type == &amp;quot;windows&amp;quot;, sprintf(&amp;quot;\&amp;quot;%s\&amp;quot;&amp;quot;, shQuote(command)), command))
}
gif_compress(&amp;quot;/home/michael/Documents/mikeleeco.github.com/static/img/measles.gif&amp;quot;,&amp;quot;/home/michael/Documents/mikeleeco.github.com/static/img/measlesCompressed.gif&amp;quot;,extra.opts=&amp;quot;--colors 256&amp;quot;)

file.size(&amp;quot;/home/michael/Documents/mikeleeco.github.com/static/img/measles.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 73367241&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file.size(&amp;quot;/home/michael/Documents/mikeleeco.github.com/static/img/measlesCompressed.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 24104452&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still large but more manageable.&lt;/p&gt;
&lt;p&gt;Interested in learning more? Hire me to consult on your next project, follow me on &lt;a href=&#34;twitter.com/mikeleeco&#34;&gt;twitter&lt;/a&gt;, leave a comment, or contact me via &lt;a href=&#34;mailto:mdlee12@gmail.com&#34;&gt;email&lt;/a&gt;. All inquiries welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping Wisconsin Presidential Election Results</title>
      <link>/posts/2016-12-26-wisconsin-presidential-election-results/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2016-12-26-wisconsin-presidential-election-results/</guid>
      <description>

&lt;h4 id=&#34;your-home-state-did-us-no-favors&#34;&gt;&lt;em&gt;&amp;ldquo;Your home state did us no favors&amp;hellip;&amp;rdquo;&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;As a Wisconsinite transplanted into the highest density of left-leaning voters in the country (District of Columbia) I&amp;rsquo;ve heard from several friends over the weeks in the aftermath of the US presidential election that voters in my home state should shoulder responsibility for contributing to Donald Trump winning an electoral majority.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;winner-take-all&amp;rdquo; basis in which electoral votes are allocated means the margin of victory in each state is null - extra votes don&amp;rsquo;t matter - which contributes to an outcome in which a winning candidate can have fewer total votes than another nominee.&lt;/p&gt;

&lt;h4 id=&#34;big-idea&#34;&gt;Big Idea&lt;/h4&gt;

&lt;p&gt;The urban/rural divide has been a popular explanation for Donald Trump&amp;rsquo;s electoral victory in the 2016 presidential election. Does this theory explain why Trump won Wisconsin and Clinton won Minnesota?&lt;/p&gt;

&lt;p&gt;This post seeks to explore this idea. First, a bit of background. These two Midwestern neighbors have striking &lt;a href=&#34;http://www.indexmundi.com/facts/united-states/quick-facts/compare/wisconsin.minnesota&#34;&gt;population, demographic, and social indicator similarities&lt;/a&gt;. Recent gubernatorial and congressional elections in both states have resulted in major party shifts. The policies of Wisconsin&amp;rsquo;s Republican governor Scott Walker and Minnesota&amp;rsquo;s Democratic governor Mark Dayton and their impact on state success has inspired &lt;a href=&#34;https://www.google.com/#q=wisconsin+and+minnesota+government&#34;&gt;several comparisons and juxtaposed analyses&lt;/a&gt;. While each state has elected Republican or Independent candidates as governors in the last few decades, the Democratic nominee has won each state in 7 straight presidential elections from 1988 to 2012.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try to unpack the voting results in each state in 2016.&lt;/p&gt;

&lt;h4 id=&#34;wisconsin-voting-results&#34;&gt;Wisconsin Voting Results&lt;/h4&gt;

&lt;p&gt;I started this analysis using Julia Silge&amp;rsquo;s &lt;a href=&#34;http://juliasilge.com/blog/Election-Mapping/&#34;&gt;Utah Election Mapping&lt;/a&gt; script, then supplemented these analyses with urban and rural county population numbers from the 2010 Census. First, I loaded the R package libraries. Next, I read in the county level 2016 presidential election results and 2010 census data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(gridExtra)
library(dplyr)
library(stringr)
library(tidyr)
library(extrafont)
extrafont::loadfonts(quiet = TRUE)

all_results &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/mkearney/presidential_election_county_results_2016/master/pres16results.csv&amp;quot;)

urban &amp;lt;- read.table(&amp;quot;http://www2.census.gov/geo/docs/reference/ua/PctUrbanRural_County.txt&amp;quot;,
                  header=TRUE,sep=&amp;quot;,&amp;quot;, colClasses = &amp;quot;character&amp;quot;)
urban$fips &amp;lt;- paste0(urban$STATE,urban$COUNTY)
urban &amp;lt;- urban %&amp;gt;% select(POP_COU, POPPCT_URBAN, fips)
urban[,1:2] &amp;lt;- sapply(urban[,1:2], as.numeric)
all_results &amp;lt;- left_join(all_results,urban)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the data is read and joined together through the &lt;code&gt;fips&lt;/code&gt; code in each data set, we can subset &lt;code&gt;all_results&lt;/code&gt; to determine the percent of votes allocated for the two major party candidates, as well as the two most popular candidates from alternative parties:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wisconsin &amp;lt;- all_results %&amp;gt;% 
  filter(str_detect(fips, &amp;quot;^55&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wisconsin_spread &amp;lt;- wisconsin %&amp;gt;% 
  filter(cand %in% c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;, &amp;quot;Jill Stein&amp;quot;)) %&amp;gt;%
  select(fips, cand, pct) %&amp;gt;% 
  mutate(pct = pct * 100,
         region = as.numeric(fips)) %&amp;gt;%
  spread(cand, pct) %&amp;gt;%
  select(-fips)

wisconsin_spread
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 72 × 5
##    region `Donald Trump` `Gary Johnson` `Hillary Clinton` `Jill Stein`
## *   &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
## 1   55001       59.19660       2.048085          37.39982    0.7915306
## 2   55003       43.25006       2.296240          52.18269    1.7663386
## 3   55005       60.38465       3.224660          35.00489    0.7506440
## 4   55007       43.46223       1.959751          52.18628    1.9492150
## 5   55009       52.70085       3.907543          41.85040    1.0753194
## 6   55011       58.50311       3.149834          36.56986    1.0692097
## 7   55013       62.07134       2.626448          33.81122    0.7684367
## 8   55015       58.06122       3.980476          36.45238    0.7718794
## 9   55017       56.91589       3.835277          37.73315    0.8388675
## 10  55019       63.81016       3.291999          31.18541    0.7897845
## # ... with 62 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that our data has been reshaped, we can further subset by candidate to create county-level voting maps, using Ari Lamstein&amp;rsquo;s &lt;a href=&#34;https://cran.r-project.org/web/packages/choroplethr/index.html&#34;&gt;choroplethr&lt;/a&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wisconsin_spread$value &amp;lt;- wisconsin_spread$`Donald Trump`
choro1 = CountyChoropleth$new(wisconsin_spread)
choro1$set_zoom(&amp;quot;wisconsin&amp;quot;)
choro1$title = &amp;quot;Donald Trump&amp;quot;
choro1$set_num_colors(1)
choro1$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro1$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Reds&amp;quot;))

wisconsin_spread$value &amp;lt;- wisconsin_spread$`Hillary Clinton`
choro2 = CountyChoropleth$new(wisconsin_spread)
choro2$set_zoom(&amp;quot;wisconsin&amp;quot;)
choro2$title = &amp;quot;Hillary Clinton&amp;quot;
choro2$set_num_colors(1)
choro2$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro2$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Blues&amp;quot;))

wisconsin_spread$value &amp;lt;- wisconsin_spread$`Gary Johnson`
choro3 = CountyChoropleth$new(wisconsin_spread)
choro3$set_zoom(&amp;quot;wisconsin&amp;quot;)
choro3$title = &amp;quot;Gary Johnson&amp;quot;
choro3$set_num_colors(1)
choro3$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro3$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Purples&amp;quot;))

wisconsin_spread$value &amp;lt;- wisconsin_spread$`Jill Stein`
choro4 = CountyChoropleth$new(wisconsin_spread)
choro4$set_zoom(&amp;quot;wisconsin&amp;quot;)
choro4$title = &amp;quot;Jill Stein&amp;quot;
choro4$set_num_colors(1)
choro4$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro4$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Greens&amp;quot;))

grid.arrange(choro1$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), 
             choro2$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), 
             choro3$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), 
             choro4$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), ncol = 2, nrow =2)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;&lt;img src=&#34;/img/figure/source/2016-12-26-wisconsin-presidential-election-results/Wisconsin Presidential Election Results by County-1.png&#34; title=&#34;plot of chunk Wisconsin Presidential Election Results by County&#34; alt=&#34;plot of chunk Wisconsin Presidential Election Results by County&#34;  style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/div&gt;

&lt;p&gt;A bar graph more accurately displays the results by candidate. Wisconsin&amp;rsquo;s 10 electoral votes were decided by only 27257 votes! That is a really small margin.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;votes &amp;lt;- wisconsin %&amp;gt;%
  filter(cand %in% c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;,&amp;quot;Jill Stein&amp;quot;)) %&amp;gt;%
  mutate(cand = factor(cand, levels = c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;,&amp;quot;Jill Stein&amp;quot;))) %&amp;gt;%
  group_by(cand) %&amp;gt;%
  summarise(sum = sum(votes))

ggplot(votes, aes(cand, sum, fill = cand)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, alpha = 0.8) +
  theme_tufte(base_family = &amp;quot;DejaVu Sans Mono&amp;quot;) +
  scale_fill_manual(values = c(&amp;quot;red3&amp;quot;, &amp;quot;navyblue&amp;quot;, &amp;quot;#6A51A3&amp;quot;,&amp;quot;darkgreen&amp;quot;)) +
  theme(legend.position=&amp;quot;none&amp;quot;) +
  labs(title = &amp;quot;Total Votes Cast in Wisconsin&amp;quot;, y = &amp;quot;Number of votes&amp;quot;, x = NULL)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;&lt;img src=&#34;/img/figure/source/2016-12-26-wisconsin-presidential-election-results/Wisconsin Presidential Election Results Bar Chart-1.png&#34; title=&#34;plot of chunk Wisconsin Presidential Election Results Bar Chart&#34; alt=&#34;plot of chunk Wisconsin Presidential Election Results Bar Chart&#34;  style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/div&gt;

&lt;h4 id=&#34;wisconsin-and-minnesota-voting-results&#34;&gt;Wisconsin and Minnesota Voting Results&lt;/h4&gt;

&lt;p&gt;To get a better sense of how the results compare, lets perform the same analyses using both Wisconsin and Minnesota data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minnesotawisconsin &amp;lt;- all_results %&amp;gt;% 
  filter(str_detect(fips, c(&amp;quot;^55&amp;quot;)) | str_detect(fips, c(&amp;quot;^27&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minnesotawisconsin_spread &amp;lt;- minnesotawisconsin %&amp;gt;% 
  filter(cand %in% c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;, &amp;quot;Jill Stein&amp;quot;)) %&amp;gt;%
  select(fips, cand, pct) %&amp;gt;% 
  mutate(pct = pct * 100,
         region = as.numeric(fips)) %&amp;gt;%
  spread(cand, pct) %&amp;gt;%
  select(-fips)

minnesotawisconsin_spread$value &amp;lt;- minnesotawisconsin_spread$`Donald Trump`
choro1 = CountyChoropleth$new(minnesotawisconsin_spread)
choro1$set_zoom(c(&amp;quot;minnesota&amp;quot;,&amp;quot;wisconsin&amp;quot;))
choro1$title = &amp;quot;Donald Trump&amp;quot;
choro1$set_num_colors(1)
choro1$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro1$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Reds&amp;quot;))

minnesotawisconsin_spread$value &amp;lt;- minnesotawisconsin_spread$`Hillary Clinton`
choro2 = CountyChoropleth$new(minnesotawisconsin_spread)
choro2$set_zoom(c(&amp;quot;minnesota&amp;quot;,&amp;quot;wisconsin&amp;quot;))
choro2$title = &amp;quot;Hillary Clinton&amp;quot;
choro2$set_num_colors(1)
choro2$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro2$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Blues&amp;quot;))

minnesotawisconsin_spread$value &amp;lt;- minnesotawisconsin_spread$`Gary Johnson`
choro3 = CountyChoropleth$new(minnesotawisconsin_spread)
choro3$set_zoom(c(&amp;quot;minnesota&amp;quot;,&amp;quot;wisconsin&amp;quot;))
choro3$title = &amp;quot;Gary Johnson&amp;quot;
choro3$set_num_colors(1)
choro3$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro3$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Purples&amp;quot;))

minnesotawisconsin_spread$value &amp;lt;- minnesotawisconsin_spread$`Jill Stein`
choro4 = CountyChoropleth$new(minnesotawisconsin_spread)
choro4$set_zoom(c(&amp;quot;minnesota&amp;quot;,&amp;quot;wisconsin&amp;quot;))
choro4$title = &amp;quot;Jill Stein&amp;quot;
choro4$set_num_colors(1)
choro4$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro4$ggplot_scale = scale_fill_gradientn(name = &amp;quot;Percent&amp;quot;, 
                                           colours = brewer.pal(8, &amp;quot;Greens&amp;quot;))

grid.arrange(choro1$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), 
             choro2$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), 
             choro3$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), 
             choro4$render() + theme(text=element_text(family=&amp;quot;DejaVu Sans Mono&amp;quot;)), ncol = 2, nrow =2)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;&lt;img src=&#34;/img/figure/source/2016-12-26-wisconsin-presidential-election-results/Wisconsin and Minnesota Presidential Election Results by County-1.png&#34; title=&#34;plot of chunk Wisconsin and Minnesota Presidential Election Results by County&#34; alt=&#34;plot of chunk Wisconsin and Minnesota Presidential Election Results by County&#34;  style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/div&gt;

&lt;p&gt;Mapping the allocation of votes by county shows Wisconsin and Minnesota have very similar county-level maps. Each has strong results favoring Clinton in major metropolitan areas, including Milwaukee, Madison, and Minneapolis/St Paul. Based solely on each state&amp;rsquo;s map, I&amp;rsquo;d posit that Minnesota seems the more likely Trump-majority. This perspective is deceiving though, as the distribution of votes by county is skewed. Each map displays the percent of votes for each candidate by county, neglecting the county&amp;rsquo;s total votes. More than 78 percent of Menominee County, WI voters selected Hilary Clinton, resulting in Northeastern Wisconsin&amp;rsquo;s dark blue polygon, but totaled only 1279 votes.&lt;/p&gt;

&lt;p&gt;Lets break this down further by exploring the allocation of votes by county.&lt;/p&gt;

&lt;h3 id=&#34;vote-distributions-by-county&#34;&gt;Vote Distributions by County&lt;/h3&gt;

&lt;p&gt;Focusing on the two major candidates, the two states also have similar vote distributions. Each of these figures displays the percentage of votes for Donald Trump (red) and Hilary Clinton (blue), with each bubble sized by percentage of total state vote, organized by the percentage of votes for Donald Trump.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minnesota &amp;lt;- subset(minnesotawisconsin, st==&amp;quot;MN&amp;quot;)
minnesota$votePct &amp;lt;- (minnesota$votes/sum(minnesota$votes)) * 100
minnesota &amp;lt;- minnesota %&amp;gt;% arrange(desc(votes))
vals = minnesota[ minnesota$cand == &#39;Donald Trump&#39;, ]
minnesota$county &amp;lt;- factor(minnesota$county, levels = rev(vals$county))
minnesotaSubset &amp;lt;- subset(minnesota, cand %in% c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;))
mnScatter &amp;lt;- ggplot(minnesotaSubset, aes(county, votePct,color = cand)) +
  geom_point(aes(size = votes)) +
  scale_y_continuous(limits=c(0,15)) +
  theme_tufte(base_family = &amp;quot;DejaVu Sans Mono&amp;quot;) +
  scale_color_manual(values = c(&amp;quot;red3&amp;quot;, &amp;quot;navyblue&amp;quot;)) +
  scale_size_continuous(guide = FALSE) +
  labs(title = &amp;quot;Percentage of Total Votes Cast for Clinton and Trump By County&amp;quot;,
       subtitle = &amp;quot;Minnesota&amp;quot;,
       y = &amp;quot;Total Vote Percentage&amp;quot;,
       x = NULL) +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.title = element_blank(),
        plot.title =  element_text(size = 16),
        plot.subtitle =  element_text(size = 13))

wisconsin$votePct &amp;lt;- (wisconsin$votes/sum(wisconsin$votes)) * 100
wisconsin &amp;lt;- wisconsin %&amp;gt;% arrange(desc(votes))
vals = wisconsin[ wisconsin$cand == &#39;Donald Trump&#39;, ]
wisconsin$county &amp;lt;- factor(wisconsin$county, levels = rev(vals$county))
wisconsinSubset &amp;lt;- subset(wisconsin, cand %in% c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;))
wiScatter &amp;lt;- ggplot(wisconsinSubset, aes(county, votePct,color = cand)) +
  geom_point(aes(size = votes)) +
  scale_y_continuous(limits=c(0,15)) +
  theme_tufte(base_family = &amp;quot;DejaVu Sans Mono&amp;quot;) +
  scale_color_manual(values = c(&amp;quot;red3&amp;quot;, &amp;quot;navyblue&amp;quot;)) +
  scale_size_continuous(guide = FALSE) +
  labs(subtitle = &amp;quot;Wisconsin&amp;quot;,
       y = &amp;quot;Total Vote Percentage&amp;quot;,
       x = &amp;quot;County (ordered by Total Vote Percentage\n for Donald Trump (smallest to largest))&amp;quot;) +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.title = element_blank(),
        plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 13))

grid.arrange(mnScatter,wiScatter,ncol=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;&lt;img src=&#34;/img/figure/source/2016-12-26-wisconsin-presidential-election-results/scatter plotting-1.png&#34; title=&#34;plot of chunk scatter plotting&#34; alt=&#34;plot of chunk scatter plotting&#34;  style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/div&gt;

&lt;p&gt;Two things of note from these figures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The county with Minnesota&amp;rsquo;s most votes significantly backed Clinton over Trump (14.7% and 6.6% of the total votes cast in the state respectively). Meanwhile, the top-voting Wisconsin&amp;rsquo;s county also garnered significant support for Clinton over Trump, but contributed only 9.8% and 4.3% of the total votes cast in the state respectively.&lt;/li&gt;
&lt;li&gt;Trump earned more votes than Clinton in 7 of Wisconsin&amp;rsquo;s 10 largest counties, including Waukesha - the third largest (4.9% and 2.7% of the total votes cast in the state respectively). Only 4 out of the top 10 most populous counties in Minnesota favored Trump.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above figure seems to imply that the counties with larger populations in each state had a significant impact on each state&amp;rsquo;s victor; while most Wisconsin counties favored Trump, most Minnesota counties favored Clinton. Perhaps different levels of urban density might result in a better explanation?&lt;/p&gt;

&lt;p&gt;The 2010 Census &lt;a href=&#34;https://www.whitehouse.gov/sites/default/files/omb/assets/fedreg_2010/06282010_metro_standards-Complete.pdf&#34;&gt;breaks up metropolitan areas&lt;/a&gt; into segments: small, medium, and large. An area must have a population of at least 50,000 to be considered an urbanized metropolitan area, and is further separated if it&amp;rsquo;s population is greater than 250,000. For this analysis, small metropolitan areas consist of those ranging in population from 50,000 to 250,000, while populations greater than 250,000 are combined into one category.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minnesotawisconsin &amp;lt;- all_results %&amp;gt;% 
  filter(str_detect(fips, c(&amp;quot;^55&amp;quot;)) | str_detect(fips, c(&amp;quot;^27&amp;quot;)))

minnesotawisconsin$urbanClass &amp;lt;- ifelse(minnesotawisconsin$POP_COU &amp;lt; 50000, &amp;quot;Not a Metropolitan Area&amp;quot;,
                                 ifelse(minnesotawisconsin$POP_COU &amp;gt; 50000 &amp;amp; minnesotawisconsin$POP_COU &amp;lt; 250000,
                                        &amp;quot;Small Metropolitan Area&amp;quot;,&amp;quot;Medium to Large Metropolitan Area&amp;quot;))
# Quick idiot check to make sure our ifelse statement didn&#39;t go awry
table(round(minnesotawisconsin$POP_COU,-5), minnesotawisconsin$urbanClass)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##          
##           Medium to Large Metropolitan Area Not a Metropolitan Area Small Metropolitan Area
##   0                                       0                     920                       0
##   1e+05                                   0                       0                     241
##   2e+05                                   0                       0                      69
##   3e+05                                   9                       0                       0
##   4e+05                                  16                       0                       0
##   5e+05                                  16                       0                       0
##   9e+05                                   7                       0                       0
##   1200000                                 9                       0                       0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a quick &lt;code&gt;table&lt;/code&gt; to ensure correct recoding of urban classification, I grouped the data by candidate, state, and urban classification to better isolate the voting distributions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minnesotawisconsin$urbanClass &amp;lt;- factor(minnesotawisconsin$urbanClass,
                                        levels = c(&amp;quot;Medium to Large Metropolitan Area&amp;quot;, &amp;quot;Small Metropolitan Area&amp;quot;, &amp;quot;Not a Metropolitan Area&amp;quot;))

mnwiUrban &amp;lt;- minnesotawisconsin %&amp;gt;%
  filter(cand %in% c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;, &amp;quot;Jill Stein&amp;quot;)) %&amp;gt;%
  mutate(cand = factor(cand, levels = c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;, &amp;quot;Jill Stein&amp;quot;),
                       labels = c(&amp;quot;Trump&amp;quot;, &amp;quot;Clinton&amp;quot;, &amp;quot;Johnson&amp;quot;, &amp;quot;Stein&amp;quot;))) %&amp;gt;%
  group_by(cand, st,urbanClass) %&amp;gt;%
  summarise(sumVotes = sum(votes), population = sum(POP_COU))

mnwiUrban &amp;lt;- mnwiUrban %&amp;gt;%
  group_by(st, urbanClass) %&amp;gt;%
  mutate(percent = sumVotes/sum(sumVotes))

mnwiUrban$st &amp;lt;- factor(mnwiUrban$st, levels = c(&amp;quot;MN&amp;quot;, &amp;quot;WI&amp;quot;), labels = c(&amp;quot;Minnesota&amp;quot;, &amp;quot;Wisconsin&amp;quot;))

p &amp;lt;- ggplot(mnwiUrban, aes(cand, sumVotes,fill = cand))  +
  geom_bar(stat = &amp;quot;identity&amp;quot;, alpha = 0.8) + 
  facet_grid(st ~ urbanClass) +
  theme_tufte(base_family = &amp;quot;DejaVu Sans Mono&amp;quot;) +
  scale_fill_manual(values = c(&amp;quot;red3&amp;quot;, &amp;quot;navyblue&amp;quot;, &amp;quot;#6A51A3&amp;quot;,&amp;quot;darkgreen&amp;quot;)) +
  theme(legend.position=&amp;quot;none&amp;quot;,
        strip.text.x = element_text(size = 12),
        strip.text.y = element_text(size = 14),
        plot.title =  element_text(size = 16)) +
  geom_text(aes(label=paste0(round(percent,3)*100,&amp;quot;%&amp;quot;)), nudge_y = 50000,family = &amp;quot;DejaVu Sans Mono&amp;quot;) +
  labs(title = &amp;quot;Distribution of Votes Cast in Minnesota and Wisconsin Counties By Urban Classification&amp;quot;, y = &amp;quot;Number of votes&amp;quot;, x = NULL) + 
  scale_y_continuous(limits=c(0,1000000))

## Add in some annotations - since we&#39;re facetting we need to make a dummy data.frame with the same factor levels and plot positions as those used in the figure
anns &amp;lt;- data.frame(cand = factor(&amp;quot;Gary Johnson&amp;quot;, levels = c(&amp;quot;Donald Trump&amp;quot;, &amp;quot;Hillary Clinton&amp;quot;, &amp;quot;Gary Johnson&amp;quot;, &amp;quot;Jill Stein&amp;quot;),
                                 labels = c(&amp;quot;Trump&amp;quot;, &amp;quot;Clinton&amp;quot;, &amp;quot;Johnson&amp;quot;, &amp;quot;Stein&amp;quot;)),
                   st = factor(&amp;quot;MN&amp;quot;, levels = c(&amp;quot;MN&amp;quot;, &amp;quot;WI&amp;quot;), labels = c(&amp;quot;Minnesota&amp;quot;, &amp;quot;Wisconsin&amp;quot;)),
                   sumVotes = 700000,
                   lab = &amp;quot;For each State and Urban Class:\nBar Height - Total Votes\n\n  Percent - Portion of votes&amp;quot;,
                   urbanClass = factor(&amp;quot;Not a Metropolitan Area&amp;quot;,levels = c(&amp;quot;Medium to Large Metropolitan Area&amp;quot;,
                                                                            &amp;quot;Small Metropolitan Area&amp;quot;, &amp;quot;Not a Metropolitan Area&amp;quot;)))

## Apply the annotations to the top right facet (i.e. Minnesota, Not a Metropolitan Area). Swoopy arrows are fun!
p + geom_text(data = anns,aes(label =lab), family = &amp;quot;DejaVu Sans Mono&amp;quot;, size = 3) +
  geom_curve(data=anns, aes(x=2.1, xend=1.5, y=690000, yend=100000), curvature=0.3, arrow=arrow(length=unit(0.03, &amp;quot;npc&amp;quot;))) +
  geom_curve(data=anns, aes(x=2.4, xend=3, y=580000, yend=110000), curvature=-0.3, arrow=arrow(length=unit(0.03, &amp;quot;npc&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;&lt;img src=&#34;/img/figure/source/2016-12-26-wisconsin-presidential-election-results/Presidential Election Results by Urban Area-1.png&#34; title=&#34;plot of chunk Presidential Election Results by Urban Area&#34; alt=&#34;plot of chunk Presidential Election Results by Urban Area&#34;  style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/div&gt;

&lt;p&gt;The data shows a sizable rural/urban divide in Minnesota &lt;strong&gt;and&lt;/strong&gt; Wisconsin. Both states voted for each candidate at nearly the exact same rate in medium/large and small metropolitan areas. The major difference is how the population in each state is distributed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mnwiUrban %&amp;gt;%
    select(st,urbanClass, sumVotes, population) %&amp;gt;%
    group_by(st,urbanClass) %&amp;gt;%
    summarise(total = sum(sumVotes), metroPopulationTotal = unique(population)) %&amp;gt;%
    mutate(stateVoteAllocationByMetro = total/sum(total),
           populationPctByMetro = metroPopulationTotal/sum(metroPopulationTotal),
           votingPctByMetro = total/metroPopulationTotal)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Source: local data frame [6 x 7]
## Groups: st [2]
## 
##          st                        urbanClass   total metroPopulationTotal stateVoteAllocationByMetro populationPctByMetro votingPctByMetro
##      &amp;lt;fctr&amp;gt;                            &amp;lt;fctr&amp;gt;   &amp;lt;int&amp;gt;                &amp;lt;dbl&amp;gt;                      &amp;lt;dbl&amp;gt;                &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1 Minnesota Medium to Large Metropolitan Area 1318717              2390461                  0.4644240            0.4506966        0.5516580
## 2 Minnesota           Small Metropolitan Area  854434              1579726                  0.3009134            0.2978409        0.5408748
## 3 Minnesota           Not a Metropolitan Area  666317              1333738                  0.2346626            0.2514625        0.4995861
## 4 Wisconsin Medium to Large Metropolitan Area  972116              1825699                  0.3318823            0.3210310        0.5324624
## 5 Wisconsin           Small Metropolitan Area 1411946              2766790                  0.4820411            0.4865125        0.5103192
## 6 Wisconsin           Not a Metropolitan Area  545037              1094497                  0.1860767            0.1924564        0.4979794
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the highest portion of votes in Minnesota came from counties defined as medium and large metropolitan areas (46.4%), those defined as small metropolitan areas contributed the most votes in Wisconsin (48.2%). These voting distributions match up nicely with the percentage of each state&amp;rsquo;s population by metropolitan area, as seen in the two variables &lt;code&gt;stateVoteAllocationByMetro&lt;/code&gt; and &lt;code&gt;populationPctByMetro&lt;/code&gt; - these distributions contributed to the outcome of each state&amp;rsquo;s election. The rate at which different types of urban areas supported a particular candidate is nearly identical between Minnesota and Wisconsin.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;While there are major differences in how rural and urban voters supported particular candidates, this division is not unique to states that cracked the &amp;ldquo;Midwestern Blue-State Firewall&amp;rdquo; in the 2016 presidential election. In Minnesota and Wisconsin, larger metropolitan areas voted strongly in favor of Clinton, while smaller and non-urban areas strongly favored Trump. Further exploration is necessary to make more granular conclusions, but in these two states the differing distributions of populations into small and medium/large metropolitan areas may help explain each candidate&amp;rsquo;s victory.&lt;/p&gt;

&lt;h4 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h4&gt;

&lt;p&gt;Data with eligible-voter populations and demographic information at the county level might further supplement this exploration by providing a more detailed picture of rural and urban voters beyond raw population and vote totals. Outlets such as &lt;a href=&#34;http://fivethirtyeight.com/features/why-fivethirtyeight-gave-trump-a-better-chance-than-almost-anyone-else/&#34;&gt;FiveThirtyEight&lt;/a&gt; have used this type of granular data to inform predictive forecasts of elections. Thoughts or questions about the post? Contact me on &lt;a href=&#34;https://twitter.com/mikeleeco&#34;&gt;twitter&lt;/a&gt; or leave a message in the comments section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NBA Draft Odds Plot</title>
      <link>/posts/2016-06-01-NBA-Draft-Odds-Plot/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2016-06-01-NBA-Draft-Odds-Plot/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Original Source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was scrolling twitter and noticed this tweet from David Sparks - Director of Basketball Analytics for the Boston Celtics:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; align=&#34;center&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;With thanks to &lt;a href=&#34;https://twitter.com/hadleywickham&#34;&gt;@hadleywickham&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hrbrmstr&#34;&gt;@hrbrmstr&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/ColorBrewer&#34;&gt;@ColorBrewer&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://t.co/hjX39Xhi4P&#34;&gt;https://t.co/hjX39Xhi4P&lt;/a&gt; &lt;a href=&#34;https://t.co/XD27alzwNI&#34;&gt;https://t.co/XD27alzwNI&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Sparks (@dsparks) &lt;a href=&#34;https://twitter.com/dsparks/status/723497233988096004&#34;&gt;April 22, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;With his obligatory shoutouts to Hadley Wickham and BoB Rudis, I felt compelled to reproduce the plot in RStudio and get some ggplot2 code out there open-sourcing his work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package Dependencies and Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The data was generated using simulations of the NBA Draft lottery, which resulted in some peculiar distributions compared to the &lt;a href=&#34;https://en.wikipedia.org/wiki/2016_NBA_draft&#34;&gt;raw lottery odds&lt;/a&gt;. I fudged some of the data based on how it looked in the plot - not much I can do about that since there wasn&amp;rsquo;t anything programmatically to work from there! &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#devtools::install_github(&amp;quot;hadley/ggplot2&amp;quot;)
#devtools::install_github(&amp;quot;hadley/tidyr&amp;quot;)
library(ggplot2)
library(tidyr)
library(RCurl)
library(RColorBrewer)
dataurl &amp;lt;- &#39;https://gist.githubusercontent.com/mikeleeco/268429d0b4019ec30c4e547c16d7f766/raw/afa955af265d14a2f72780e4e0b87ffe469c0109/odds.csv&#39;
data &amp;lt;- getURL(dataurl)                
odds &amp;lt;- read.csv(textConnection(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Data Cleanup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tidyr package allows us to reshape our data between long and wide formats, RColorBrewer helps generate a fluid color pallete for our plot, and RCurl assists in sourcing the data from &lt;a href=&#34;https://gist.github.com/mikeleeco/268429d0b4019ec30c4e547c16d7f766#file-odds-csv&#34;&gt;my gist&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;odds &amp;lt;- gather(odds, X)
odds[,2] &amp;lt;- substring(odds[,2], 2)
colnames(odds) &amp;lt;- c(&amp;quot;Team&amp;quot;,&amp;quot;Pick&amp;quot;,&amp;quot;Probability&amp;quot;)
odds$Pick &amp;lt;- as.numeric(odds$Pick)
odds$Team &amp;lt;- as.character(odds$Team)
odds$Team &amp;lt;- factor(odds$Team, levels = odds[1:14,1])
odds$Team &amp;lt;- factor(odds$Team, levels=rev(levels(odds$Team)))
odds$Pick &amp;lt;- factor(odds$Pick, levels = 1:14)
getPalette &amp;lt;- colorRampPalette(brewer.pal(11, &amp;quot;Spectral&amp;quot;))(14)
odds$Probability &amp;lt;- ifelse(is.na(odds$Probability),0,odds$Probability)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;colorRampPallete&lt;/code&gt; and &lt;code&gt;brewer.pal&lt;/code&gt; functions expands the &amp;ldquo;Spectral&amp;rdquo; color pallete from 11 to 14 colors, and we&amp;rsquo;ve organized our Team y-axis to be leveled in order of likelihood of winning the top pick - without factoring in the projections that were used in the @celtics figure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom Plot Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve prepared our data, we can get to customizing the plot!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- ggplot(odds, aes(Team))
g &amp;lt;- g + geom_bar(aes(x = Team, y = Probability, fill = Pick),alpha=0.9,stat=&amp;quot;identity&amp;quot;)  
g &amp;lt;- g + scale_y_continuous(breaks = seq(0, 1, by = 0.1),1,name=&amp;quot;Probability&amp;quot;, labels=scales::percent) +
    labs(x=NULL, y=NULL, title=&amp;quot;2016 NBA Draft Lottery Probabilities&amp;quot;,
         subtitle = &amp;quot;After tiebreakers and trades. Trades with protections are indicated by a black border, and the receiving team is named. Based on 100,000 simulations&amp;quot;,
         caption=&amp;quot;Reproduced by: @mikeleeco                  Original: @dsparks                  Source: http://www.nba.com/celtics/news/sidebar/2016-draft-lottery-qa&amp;quot;) +
    coord_flip() +
    scale_fill_manual(values = getPalette)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The development version of &lt;a href=&#34;https://github.com/hadley/ggplot2&#34;&gt;ggplot2 on github&lt;/a&gt; features numerous additions including ecpanded arguments for &lt;code&gt;labs&lt;/code&gt; such as subtitles and captions. Check out &lt;code&gt;?ggplot2::labs&lt;/code&gt; or &lt;a href=&#34;https://rud.is/b/2016/03/16/supreme-annotations/&#34;&gt;Bob Rudis&amp;rsquo; post&lt;/a&gt; on his contribution to ggplot2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- g  + theme(
  axis.text.x = element_text(size=14,margin=margin(b=5),color = &amp;quot;black&amp;quot;),
  axis.title.x = element_text(size=16),
  plot.subtitle = element_text(size=14),
  plot.caption = element_text(size=16,margin = margin(t=20),face = &amp;quot;italic&amp;quot;, hjust = .5),
  axis.text.y = element_text(size=18,margin = margin(r=-40),colour = &amp;quot;black&amp;quot;),
  axis.ticks.y=element_blank(),
  axis.ticks.x=element_blank(),
  plot.title = element_text(size=30,margin = margin(b=10)),
  panel.border=element_blank(),
  panel.grid.major.x=element_line(color=&amp;quot;#2b2b2b&amp;quot;, linetype=&amp;quot;dotted&amp;quot;, size=0.15),
  panel.grid.major.y=element_blank(),
  legend.text = element_text(size=14),
  legend.title = element_text(size=18),
  legend.key = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;,colour = &amp;quot;#DCDCDC&amp;quot;),
  legend.background = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;),
  panel.background = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;),
  plot.background = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As seen in the theme here, the developtmental version of ggplot2 also features elements to customize the new caption and subtitle arguments. Things are looking pretty sharp!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Annotations - Call for Help!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The lottery data has been transformed into a customized plot; the only missing pieces are the transparent rectangular grobs indicating picks with trade implications. I tried a few different methods to programmatically assign labels over the rows in our dataset, none of which gave the desired final output. Instead I used brute force to place transparent rectangles and texts over the appropriate data blocks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- g + annotate(&amp;quot;text&amp;quot;, x = (13.45+12.55)/2, y = .6, alpha = 1,color=&amp;quot;black&amp;quot;, label=&amp;quot;to PHI&amp;quot;, size= rel(7)) +
            annotate(&amp;quot;rect&amp;quot;, xmin = 12.55, xmax = 13.45, ymin = .555, ymax = 1, alpha = .3,color=&amp;quot;black&amp;quot;) +
            annotate(&amp;quot;text&amp;quot;, x = (2.45+1.55)/2, y = .1, alpha = 1,color=&amp;quot;black&amp;quot;, label=&amp;quot;to PHX&amp;quot;, size= rel(7)) +
            annotate(&amp;quot;rect&amp;quot;, xmin = 1.55, xmax = 2.45, ymin = .021, ymax = 1, alpha = .3,color=&amp;quot;black&amp;quot;) +
            annotate(&amp;quot;text&amp;quot;, x = (7.45+6.55)/2, y = .95, alpha = 1,color=&amp;quot;black&amp;quot;, label=&amp;quot;to CHI &amp;gt;&amp;quot;, size= rel(7)) +
            annotate(&amp;quot;rect&amp;quot;, xmin = 6.55, xmax = 7.45, ymin = .999, ymax = 1, alpha = .3,color=&amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There has to be a more efficient method to do this! If you know of a better way please &lt;a href=&#34;http://www.twitter.com/mikeleeco&#34;&gt;contact me on twitter&lt;/a&gt; or create a &lt;a href=&#34;https://github.com/mikeleeco/mikeleeco.github.com/blob/master/_source/2016-06-01-NBA-Draft-Odds-Plot.Rmd&#34;&gt;pull request on this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final product:&lt;/strong&gt;
&lt;div class=&#34;row&#34;&gt;&lt;img src=&#34;/img/draft_odds.png&#34; class=&#34;img-responsive center-block&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>