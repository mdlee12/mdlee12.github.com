<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on Michael Lee</title>
    <link>/tags/data/index.xml</link>
    <description>Recent content in Data on Michael Lee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mdlee12@gmail.com (Michael Lee)</managingEditor>
    <webMaster>mdlee12@gmail.com (Michael Lee)</webMaster>
    <atom:link href="/tags/data/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>EdSurvey - R package (CRAN)</title>
      <link>/projects/2017-06-03-EdSurvey-R-package/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/projects/2017-06-03-EdSurvey-R-package/</guid>
      <description>

&lt;h2 id=&#34;package-description&#34;&gt;Package Description&lt;/h2&gt;

&lt;p&gt;The EdSurvey package is a tool to read and analyze functions for education surveys and assessments data from the &lt;a href=&#34;https://nces.ed.gov/&#34;&gt;National Center for Education Statistics&lt;/a&gt;, including the &lt;a href=&#34;https://nces.ed.gov/nationsreportcard/&#34;&gt;National Assessment of Educational Progress (NAEP)&lt;/a&gt;. Due to the large file sizes and complex formatting of NCES data sets, the package offers user-friendly methods to format and conduct statisitical analyses with a small memory footprint.&lt;/p&gt;

&lt;h2 id=&#34;for-more-info&#34;&gt;For more info:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/EdSurvey/index.html&#34;&gt;https://cran.r-project.org/web/packages/EdSurvey/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.air.org/project/nces-data-r-project-edsurvey&#34;&gt;http://www.air.org/project/nces-data-r-project-edsurvey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>NAEPprimer - R package (CRAN)</title>
      <link>/projects/2017-06-03-NAEPprimer-R-package/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/projects/2017-06-03-NAEPprimer-R-package/</guid>
      <description>

&lt;h2 id=&#34;package-description&#34;&gt;Package Description&lt;/h2&gt;

&lt;p&gt;The NAEP Primer package contains a random mini-sample of real data from the 2005 grade 8 mathematics assessment that have been approved for public use. This includes two data files, as well as a system control file that corresponds to each data file to read in and format for further processing. The NAEP Primer is designed to simplify access to the NAEP database and make its technologies more user-friendly in NAEP data analysis.&lt;/p&gt;

&lt;h3 id=&#34;for-more-info&#34;&gt;For more info:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/NAEPprimer/index.html&#34;&gt;https://cran.r-project.org/web/packages/NAEPprimer/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nces.ed.gov/pubsearch/pubsinfo.asp?pubid=2011463&#34;&gt;https://nces.ed.gov/pubsearch/pubsinfo.asp?pubid=2011463&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>NBA Draft Odds Plot</title>
      <link>/posts/2016-06-01-NBA-Draft-Odds-Plot/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2016-06-01-NBA-Draft-Odds-Plot/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Original Source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was scrolling twitter and noticed this tweet from David Sparks - Director of Basketball Analytics for the Boston Celtics:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; align=&#34;center&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;With thanks to &lt;a href=&#34;https://twitter.com/hadleywickham&#34;&gt;@hadleywickham&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hrbrmstr&#34;&gt;@hrbrmstr&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/ColorBrewer&#34;&gt;@ColorBrewer&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://t.co/hjX39Xhi4P&#34;&gt;https://t.co/hjX39Xhi4P&lt;/a&gt; &lt;a href=&#34;https://t.co/XD27alzwNI&#34;&gt;https://t.co/XD27alzwNI&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Sparks (@dsparks) &lt;a href=&#34;https://twitter.com/dsparks/status/723497233988096004&#34;&gt;April 22, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;With his obligatory shoutouts to Hadley Wickham and BoB Rudis, I felt compelled to reproduce the plot in RStudio and get some ggplot2 code out there open-sourcing his work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package Dependencies and Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The data was generated using simulations of the NBA Draft lottery, which resulted in some peculiar distributions compared to the &lt;a href=&#34;https://en.wikipedia.org/wiki/2016_NBA_draft&#34;&gt;raw lottery odds&lt;/a&gt;. I fudged some of the data based on how it looked in the plot - not much I can do about that since there wasn&amp;rsquo;t anything programmatically to work from there! &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#devtools::install_github(&amp;quot;hadley/ggplot2&amp;quot;)
#devtools::install_github(&amp;quot;hadley/tidyr&amp;quot;)
library(ggplot2)
library(tidyr)
library(RCurl)
library(RColorBrewer)
dataurl &amp;lt;- &#39;https://gist.githubusercontent.com/mikeleeco/268429d0b4019ec30c4e547c16d7f766/raw/afa955af265d14a2f72780e4e0b87ffe469c0109/odds.csv&#39;
data &amp;lt;- getURL(dataurl)                
odds &amp;lt;- read.csv(textConnection(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Data Cleanup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tidyr package allows us to reshape our data between long and wide formats, RColorBrewer helps generate a fluid color pallete for our plot, and RCurl assists in sourcing the data from &lt;a href=&#34;https://gist.github.com/mikeleeco/268429d0b4019ec30c4e547c16d7f766#file-odds-csv&#34;&gt;my gist&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;odds &amp;lt;- gather(odds, X)
odds[,2] &amp;lt;- substring(odds[,2], 2)
colnames(odds) &amp;lt;- c(&amp;quot;Team&amp;quot;,&amp;quot;Pick&amp;quot;,&amp;quot;Probability&amp;quot;)
odds$Pick &amp;lt;- as.numeric(odds$Pick)
odds$Team &amp;lt;- as.character(odds$Team)
odds$Team &amp;lt;- factor(odds$Team, levels = odds[1:14,1])
odds$Team &amp;lt;- factor(odds$Team, levels=rev(levels(odds$Team)))
odds$Pick &amp;lt;- factor(odds$Pick, levels = 1:14)
getPalette &amp;lt;- colorRampPalette(brewer.pal(11, &amp;quot;Spectral&amp;quot;))(14)
odds$Probability &amp;lt;- ifelse(is.na(odds$Probability),0,odds$Probability)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;colorRampPallete&lt;/code&gt; and &lt;code&gt;brewer.pal&lt;/code&gt; functions expands the &amp;ldquo;Spectral&amp;rdquo; color pallete from 11 to 14 colors, and we&amp;rsquo;ve organized our Team y-axis to be leveled in order of likelihood of winning the top pick - without factoring in the projections that were used in the @celtics figure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom Plot Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve prepared our data, we can get to customizing the plot!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- ggplot(odds, aes(Team))
g &amp;lt;- g + geom_bar(aes(x = Team, y = Probability, fill = Pick),alpha=0.9,stat=&amp;quot;identity&amp;quot;)  
g &amp;lt;- g + scale_y_continuous(breaks = seq(0, 1, by = 0.1),1,name=&amp;quot;Probability&amp;quot;, labels=scales::percent) +
    labs(x=NULL, y=NULL, title=&amp;quot;2016 NBA Draft Lottery Probabilities&amp;quot;,
         subtitle = &amp;quot;After tiebreakers and trades. Trades with protections are indicated by a black border, and the receiving team is named. Based on 100,000 simulations&amp;quot;,
         caption=&amp;quot;Reproduced by: @mikeleeco                  Original: @dsparks                  Source: http://www.nba.com/celtics/news/sidebar/2016-draft-lottery-qa&amp;quot;) +
    coord_flip() +
    scale_fill_manual(values = getPalette)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The development version of &lt;a href=&#34;https://github.com/hadley/ggplot2&#34;&gt;ggplot2 on github&lt;/a&gt; features numerous additions including ecpanded arguments for &lt;code&gt;labs&lt;/code&gt; such as subtitles and captions. Check out &lt;code&gt;?ggplot2::labs&lt;/code&gt; or &lt;a href=&#34;https://rud.is/b/2016/03/16/supreme-annotations/&#34;&gt;Bob Rudis&amp;rsquo; post&lt;/a&gt; on his contribution to ggplot2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- g  + theme(
  axis.text.x = element_text(size=14,margin=margin(b=5),color = &amp;quot;black&amp;quot;),
  axis.title.x = element_text(size=16),
  plot.subtitle = element_text(size=14),
  plot.caption = element_text(size=16,margin = margin(t=20),face = &amp;quot;italic&amp;quot;, hjust = .5),
  axis.text.y = element_text(size=18,margin = margin(r=-40),colour = &amp;quot;black&amp;quot;),
  axis.ticks.y=element_blank(),
  axis.ticks.x=element_blank(),
  plot.title = element_text(size=30,margin = margin(b=10)),
  panel.border=element_blank(),
  panel.grid.major.x=element_line(color=&amp;quot;#2b2b2b&amp;quot;, linetype=&amp;quot;dotted&amp;quot;, size=0.15),
  panel.grid.major.y=element_blank(),
  legend.text = element_text(size=14),
  legend.title = element_text(size=18),
  legend.key = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;,colour = &amp;quot;#DCDCDC&amp;quot;),
  legend.background = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;),
  panel.background = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;),
  plot.background = element_rect(fill=&amp;quot;#DCDCDC&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As seen in the theme here, the developtmental version of ggplot2 also features elements to customize the new caption and subtitle arguments. Things are looking pretty sharp!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Annotations - Call for Help!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The lottery data has been transformed into a customized plot; the only missing pieces are the transparent rectangular grobs indicating picks with trade implications. I tried a few different methods to programmatically assign labels over the rows in our dataset, none of which gave the desired final output. Instead I used brute force to place transparent rectangles and texts over the appropriate data blocks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- g + annotate(&amp;quot;text&amp;quot;, x = (13.45+12.55)/2, y = .6, alpha = 1,color=&amp;quot;black&amp;quot;, label=&amp;quot;to PHI&amp;quot;, size= rel(7)) +
            annotate(&amp;quot;rect&amp;quot;, xmin = 12.55, xmax = 13.45, ymin = .555, ymax = 1, alpha = .3,color=&amp;quot;black&amp;quot;) +
            annotate(&amp;quot;text&amp;quot;, x = (2.45+1.55)/2, y = .1, alpha = 1,color=&amp;quot;black&amp;quot;, label=&amp;quot;to PHX&amp;quot;, size= rel(7)) +
            annotate(&amp;quot;rect&amp;quot;, xmin = 1.55, xmax = 2.45, ymin = .021, ymax = 1, alpha = .3,color=&amp;quot;black&amp;quot;) +
            annotate(&amp;quot;text&amp;quot;, x = (7.45+6.55)/2, y = .95, alpha = 1,color=&amp;quot;black&amp;quot;, label=&amp;quot;to CHI &amp;gt;&amp;quot;, size= rel(7)) +
            annotate(&amp;quot;rect&amp;quot;, xmin = 6.55, xmax = 7.45, ymin = .999, ymax = 1, alpha = .3,color=&amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There has to be a more efficient method to do this! If you know of a better way please &lt;a href=&#34;http://www.twitter.com/mikeleeco&#34;&gt;contact me on twitter&lt;/a&gt; or create a &lt;a href=&#34;https://github.com/mikeleeco/mikeleeco.github.com/blob/master/_source/2016-06-01-NBA-Draft-Odds-Plot.Rmd&#34;&gt;pull request on this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final product:&lt;/strong&gt;
&lt;div class=&#34;row&#34;&gt;&lt;img src=&#34;/img/draft_odds.png&#34; class=&#34;img-responsive center-block&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sabr - R package</title>
      <link>/posts/2016-05-28-sabr-R-package/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2016-05-28-sabr-R-package/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;https://github.com/mikeleeco/sabr/&#34;&gt;sabr package&lt;/a&gt; connects the Lahman SQL Database with functions used in calculating offensive performance in the MLB, namely wOBA. Created by Tom Tango and popularized in &lt;a href=&#34;http://www.insidethebook.com/woba.shtml&#34;&gt;The Book: Playing the Percentages in Baseball&lt;/a&gt;, wOBA uses yearly MLB performance to weigh offensive measures relative to league value. This package offers the following capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieves the most up-to-date wOBA measures from 1871-2015&lt;/li&gt;
&lt;li&gt;Queries yearly and career offensive performance from the Lahman SQL database&lt;/li&gt;
&lt;li&gt;Calculates a player&amp;rsquo;s seasonal wOBA performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation:&lt;/h2&gt;

&lt;p&gt;Download the latest development version from github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (packageVersion(&amp;quot;devtools&amp;quot;) &amp;lt; 1.6) {
  install.packages(&amp;quot;devtools&amp;quot;)
}
devtools::install_github(&amp;quot;mdlee12/sabr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation:&lt;/h2&gt;

&lt;p&gt;wOBA is one of the best catch-all offensive performance statistics, but it&amp;rsquo;s formula is a bit convoluted since it requires 1) ten distinct rate stats and 2) weighted values based on a season&amp;rsquo;s run environment.&lt;/p&gt;

&lt;p&gt;For example, the wOBA formula for the 2013 season was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wOBA = (0.690 * uBB + 0.722 * HBP + 0.888 * (H - DB - TR - HR) + 1.271 * DB + 1.616 * TR + 2.101 * HR) / (AB + BB - IBB + SF + HBP)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out &lt;a href=&#34;http://www.fangraphs.com/library/offense/woba/&#34;&gt;Fangraphs&lt;/a&gt;&amp;rsquo; library for additional details.&lt;/p&gt;

&lt;h2 id=&#34;new-functions-with-0-2&#34;&gt;New Functions with 0.2:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;wRAA_season : Returns a MLB player&amp;rsquo;s weighted Runs Above Average by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(sabr)
wRAA_season(&amp;quot;braunry02&amp;quot;,&amp;quot;2015&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 23.89798
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;wRC_season : Returns a MLB player&amp;rsquo;s weighted Runs Created by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wRC_season(&amp;quot;molitpa01&amp;quot;,&amp;quot;1991&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 127.0164
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;wRCp_season : Returns a MLB player&amp;rsquo;s weighted Runs Created Plus by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wRCp_season(&amp;quot;yountro01&amp;quot;,&amp;quot;1989&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 152.5421
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Full calculation details are in the &lt;a href=&#34;https://github.com/mdlee12/sabr/blob/master/vignettes/wOBA%20and%20wRC%2B%20calculation.Rmd&#34;&gt;wOBA and wRC+ calculation.Rmd file&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;wRCp_season makes a couple assumptions:&lt;/em&gt;
1. Park Factors are pulled from the Lahman Database - these are different from other sources
2. A player&amp;rsquo;s primary position is used to remove pitchers from the League Runs/Plate Appearance calculation&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;key-functions-from-0-1&#34;&gt;Key Functions from 0.1:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;battingseason : Offensive seasonal performance by playerID and yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;battingseason(&amp;quot;parrage01&amp;quot;,&amp;quot;2014&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID yearID stints  teamID  AB  R   H DB TR HR RBI SB CS BB  SO IBB SF SH GIDP HBP
## 1 parrage01   2014      2 ARI,MIL 529 64 138 22  4  9  40  9  7 32 100   5  2  6   10   5
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;battingcareer : Offensive career performance by playerID by organized by season&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;battingcareer(&amp;quot;fieldpr01&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##     playerID yearID stints teamID  AB   R   H DB TR HR RBI SB CS  BB  SO IBB SF SH GIDP HBP
## 1  fieldpr01   2005      1    MIL  59   2  17  4  0  2  10  0  0   2  17   0  1  0    0   0
## 2  fieldpr01   2006      1    MIL 569  82 154 35  1 28  81  7  2  59 125   5  8  0   17  12
## 3  fieldpr01   2007      1    MIL 573 109 165 35  2 50 119  2  2  90 121  21  4  0    9  14
## 4  fieldpr01   2008      1    MIL 588  86 162 30  2 34 102  3  2  84 134  19 10  0   12  12
## 5  fieldpr01   2009      1    MIL 591 103 177 35  3 46 141  2  3 110 138  21  9  0   14   9
## 6  fieldpr01   2010      1    MIL 578  94 151 25  0 32  83  1  0 114 138  17  1  0   12  21
## 7  fieldpr01   2011      1    MIL 569  95 170 36  1 38 120  1  1 107 106  32  6  0   17  10
## 8  fieldpr01   2012      1    DET 581  83 182 33  1 30 108  1  0  85  84  18  7  0   19  17
## 9  fieldpr01   2013      1    DET 624  82 174 36  0 25 106  1  1  75 117   5  4  0   20   9
## 10 fieldpr01   2014      1    TEX 150  19  37  8  0  3  16  0  0  25  24  11  1  0    5   2
## 11 fieldpr01   2015      1    TEX 613  78 187 28  0 23  98  0  0  64  88  14  5  0   21  11
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;woba_season : Returns a MLB player&amp;rsquo;s weighted On-Base Average by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;woba_season(&amp;quot;fieldpr01&amp;quot;,&amp;quot;2014&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0.3049516
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;lahman_search : Returns a player&amp;rsquo;s Lahman playerID using either:

&lt;ul&gt;
&lt;li&gt;nameFirst (Player First Name)&lt;/li&gt;
&lt;li&gt;nameLast (Player Last Name)&lt;/li&gt;
&lt;li&gt;nameGiven (Player Given Name)&lt;/li&gt;
&lt;li&gt;retroID (&lt;a href=&#34;http://www.retrosheet.org/retroID.htm&#34;&gt;Retrosheet&lt;/a&gt; ID)&lt;/li&gt;
&lt;li&gt;bbrefID (&lt;a href=&#34;http://www.baseball-reference.com/players/&#34;&gt;Baseball Reference&lt;/a&gt; ID)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(nameFirst = &amp;quot;Robin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast         nameGiven  retroID   bbrefID
## 1 jenniro01     Robin Jennings Robin Christopher jennr001 jenniro01
## 2 roberro01     Robin  Roberts        Robin Evan rober102 roberro01
## 3 venturo01     Robin  Ventura        Robin Mark ventr001 venturo01
## 4 yountro01     Robin    Yount          Robin R. younr001 yountro01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(nameLast = &amp;quot;Fielder&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast     nameGiven  retroID   bbrefID
## 1 fieldce01     Cecil  Fielder   Cecil Grant fielc001 fieldce01
## 2 fieldpr01    Prince  Fielder Prince Semien fielp001 fieldpr01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(nameGiven = &amp;quot;Russell Oles&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast    nameGiven  retroID   bbrefID
## 1 branyru01   Russell  Branyan Russell Oles branr001 branyru01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(retroID = &amp;quot;molip001&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast nameGiven  retroID   bbrefID
## 1 molitpa01      Paul  Molitor  Paul Leo molip001 molitpa01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(bbrefID = &amp;quot;yostne01&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   playerID nameFirst nameLast       nameGiven  retroID  bbrefID
## 1 yostne01       Ned     Yost Edgar Frederick yoste001 yostne01
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Have a question, issue or suggestion? Create a pull request, file an issue, or feel free to contact me on &lt;a href=&#34;https://twitter.com/mikeleeco&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sabr - R package (GitHub)</title>
      <link>/projects/2016-05-28-sabr-R-package/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/projects/2016-05-28-sabr-R-package/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;https://github.com/mikeleeco/sabr/&#34;&gt;sabr package&lt;/a&gt; connects the Lahman SQL Database with functions used in calculating offensive performance in the MLB, namely wOBA. Created by Tom Tango and popularized in &lt;a href=&#34;http://www.insidethebook.com/woba.shtml&#34;&gt;The Book: Playing the Percentages in Baseball&lt;/a&gt;, wOBA uses yearly MLB performance to weigh offensive measures relative to league value. This package offers the following capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieves the most up-to-date wOBA measures from 1871-2015&lt;/li&gt;
&lt;li&gt;Queries yearly and career offensive performance from the Lahman SQL database&lt;/li&gt;
&lt;li&gt;Calculates a player&amp;rsquo;s seasonal wOBA performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation:&lt;/h2&gt;

&lt;p&gt;Download the latest development version from github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (packageVersion(&amp;quot;devtools&amp;quot;) &amp;lt; 1.6) {
  install.packages(&amp;quot;devtools&amp;quot;)
}
devtools::install_github(&amp;quot;mdlee12/sabr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation:&lt;/h2&gt;

&lt;p&gt;wOBA is one of the best catch-all offensive performance statistics, but it&amp;rsquo;s formula is a bit convoluted since it requires 1) ten distinct rate stats and 2) weighted values based on a season&amp;rsquo;s run environment.&lt;/p&gt;

&lt;p&gt;For example, the wOBA formula for the 2013 season was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wOBA = (0.690 * uBB + 0.722 * HBP + 0.888 * (H - DB - TR - HR) + 1.271 * DB + 1.616 * TR + 2.101 * HR) / (AB + BB - IBB + SF + HBP)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out &lt;a href=&#34;http://www.fangraphs.com/library/offense/woba/&#34;&gt;Fangraphs&lt;/a&gt;&amp;rsquo; library for additional details.&lt;/p&gt;

&lt;h2 id=&#34;new-functions-with-0-2&#34;&gt;New Functions with 0.2:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;wRAA_season : Returns a MLB player&amp;rsquo;s weighted Runs Above Average by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(sabr)
wRAA_season(&amp;quot;braunry02&amp;quot;,&amp;quot;2015&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 23.89798
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;wRC_season : Returns a MLB player&amp;rsquo;s weighted Runs Created by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wRC_season(&amp;quot;molitpa01&amp;quot;,&amp;quot;1991&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 127.0164
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;wRCp_season : Returns a MLB player&amp;rsquo;s weighted Runs Created Plus by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wRCp_season(&amp;quot;yountro01&amp;quot;,&amp;quot;1989&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 152.5421
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Full calculation details are in the &lt;a href=&#34;https://github.com/mdlee12/sabr/blob/master/vignettes/wOBA%20and%20wRC%2B%20calculation.Rmd&#34;&gt;wOBA and wRC+ calculation.Rmd file&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;wRCp_season makes a couple assumptions:&lt;/em&gt;
1. Park Factors are pulled from the Lahman Database - these are different from other sources
2. A player&amp;rsquo;s primary position is used to remove pitchers from the League Runs/Plate Appearance calculation&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;key-functions-from-0-1&#34;&gt;Key Functions from 0.1:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;battingseason : Offensive seasonal performance by playerID and yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;battingseason(&amp;quot;parrage01&amp;quot;,&amp;quot;2014&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID yearID stints  teamID  AB  R   H DB TR HR RBI SB CS BB  SO IBB SF SH GIDP HBP
## 1 parrage01   2014      2 ARI,MIL 529 64 138 22  4  9  40  9  7 32 100   5  2  6   10   5
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;battingcareer : Offensive career performance by playerID by organized by season&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;battingcareer(&amp;quot;fieldpr01&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##     playerID yearID stints teamID  AB   R   H DB TR HR RBI SB CS  BB  SO IBB SF SH GIDP HBP
## 1  fieldpr01   2005      1    MIL  59   2  17  4  0  2  10  0  0   2  17   0  1  0    0   0
## 2  fieldpr01   2006      1    MIL 569  82 154 35  1 28  81  7  2  59 125   5  8  0   17  12
## 3  fieldpr01   2007      1    MIL 573 109 165 35  2 50 119  2  2  90 121  21  4  0    9  14
## 4  fieldpr01   2008      1    MIL 588  86 162 30  2 34 102  3  2  84 134  19 10  0   12  12
## 5  fieldpr01   2009      1    MIL 591 103 177 35  3 46 141  2  3 110 138  21  9  0   14   9
## 6  fieldpr01   2010      1    MIL 578  94 151 25  0 32  83  1  0 114 138  17  1  0   12  21
## 7  fieldpr01   2011      1    MIL 569  95 170 36  1 38 120  1  1 107 106  32  6  0   17  10
## 8  fieldpr01   2012      1    DET 581  83 182 33  1 30 108  1  0  85  84  18  7  0   19  17
## 9  fieldpr01   2013      1    DET 624  82 174 36  0 25 106  1  1  75 117   5  4  0   20   9
## 10 fieldpr01   2014      1    TEX 150  19  37  8  0  3  16  0  0  25  24  11  1  0    5   2
## 11 fieldpr01   2015      1    TEX 613  78 187 28  0 23  98  0  0  64  88  14  5  0   21  11
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;woba_season : Returns a MLB player&amp;rsquo;s weighted On-Base Average by yearID&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;woba_season(&amp;quot;fieldpr01&amp;quot;,&amp;quot;2014&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0.3049516
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;lahman_search : Returns a player&amp;rsquo;s Lahman playerID using either:

&lt;ul&gt;
&lt;li&gt;nameFirst (Player First Name)&lt;/li&gt;
&lt;li&gt;nameLast (Player Last Name)&lt;/li&gt;
&lt;li&gt;nameGiven (Player Given Name)&lt;/li&gt;
&lt;li&gt;retroID (&lt;a href=&#34;http://www.retrosheet.org/retroID.htm&#34;&gt;Retrosheet&lt;/a&gt; ID)&lt;/li&gt;
&lt;li&gt;bbrefID (&lt;a href=&#34;http://www.baseball-reference.com/players/&#34;&gt;Baseball Reference&lt;/a&gt; ID)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(nameFirst = &amp;quot;Robin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast         nameGiven  retroID   bbrefID
## 1 jenniro01     Robin Jennings Robin Christopher jennr001 jenniro01
## 2 roberro01     Robin  Roberts        Robin Evan rober102 roberro01
## 3 venturo01     Robin  Ventura        Robin Mark ventr001 venturo01
## 4 yountro01     Robin    Yount          Robin R. younr001 yountro01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(nameLast = &amp;quot;Fielder&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast     nameGiven  retroID   bbrefID
## 1 fieldce01     Cecil  Fielder   Cecil Grant fielc001 fieldce01
## 2 fieldpr01    Prince  Fielder Prince Semien fielp001 fieldpr01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(nameGiven = &amp;quot;Russell Oles&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast    nameGiven  retroID   bbrefID
## 1 branyru01   Russell  Branyan Russell Oles branr001 branyru01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(retroID = &amp;quot;molip001&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    playerID nameFirst nameLast nameGiven  retroID   bbrefID
## 1 molitpa01      Paul  Molitor  Paul Leo molip001 molitpa01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_search(bbrefID = &amp;quot;yostne01&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   playerID nameFirst nameLast       nameGiven  retroID  bbrefID
## 1 yostne01       Ned     Yost Edgar Frederick yoste001 yostne01
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Have a question, issue or suggestion? Create a pull request, file an issue, or feel free to contact me on &lt;a href=&#34;https://twitter.com/mikeleeco&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genre Interactive - Visualizing Video Games Throughout History</title>
      <link>/interactives/2015-06-10-genre-interactive/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/interactives/2015-06-10-genre-interactive/</guid>
      <description>&lt;style&gt;
      svg *::selection {
         background : transparent;
         width: 700px;
         height: 500px;
         margin-left: 30px;
         font-size: 13px; 
      }
     
      svg *::-moz-selection {
         background:transparent;
      } 
     
      svg *::-webkit-selection {
         background:transparent;
      }
      rect.selection {
        stroke          : #333;
        stroke-dasharray: 4px;
        stroke-opacity  : 0.5;
        fill            : transparent;
      }

      rect.cell-border {
        stroke: #eee;
        stroke-width:0.3px;   
      }

      rect.cell-selected {
        stroke: rgb(51,102,153);
        stroke-width:0.5px;   
      }

      rect.cell-hover {
        stroke: #F00;
        stroke-width:0.3px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Andale Mono, Andale Mono;
        fill: #4a4a4a;
      }

      text.text-selected {
        fill: #000;
      }

      text.text-highlight {
        fill: #c00;
      }
      text.text-hover {
        fill: #00C;
      }
      #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }

      #tooltip.hidden {
        display: none;
      }

      #tooltip p {
        margin: 0;
        font-family: Andale Mono;
        font-size: 12px;
        line-height: 20px;
      }
&lt;/style&gt;

&lt;div id=&#34;tooltip&#34; class=&#34;hidden&#34;&gt;
  &lt;p&gt;&lt;span id=&#34;value&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script src=&#34;http://d3js.org/d3.v3.min.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;chart2&#34; class=&#34;text-center&#34;&gt;&lt;/div&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
var margin = { top: 175, right: 10, bottom: 50, left: 175 },
  cellSize=12;
  cl_number=43;
  rw_number=8;
  widthy = cellSize*cl_number, // - margin.left - margin.right,
  heighty = cellSize*rw_number , // - margin.top - margin.bottom,
  //gridSize = Math.floor(widthy / 24),
  legendElementWidth = cellSize*2.5,
  colorBuckets = 11,
  colors = [&#39;#FFFFFF&#39;,&#39;#F1EEF6&#39;,&#39;#E6D3E1&#39;,&#39;#DBB9CD&#39;,&#39;#D19EB9&#39;,&#39;#C684A4&#39;,&#39;#BB6990&#39;,&#39;#B14F7C&#39;,&#39;#A63467&#39;,&#39;#9B1A53&#39;,&#39;#91003F&#39;];
  hcrw = [1,2,3,4,5,6,7,8],
  hccl = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  rwLabel = [&#39;Action&#39;,&#39;Adventure&#39;,&#39;Educational&#39;,&#39;RPG&#39;,&#39;Racing&#39;,&#39;Simulation&#39;,&#39;Sports&#39;,&#39;Strategy&#39;],
  clLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;];

d3.csv(&#34;/data/data_heatmap2.csv&#34;,
function(d) {
  return {
    rw:   +d.rw_id,
    cl:   +d.cl_id,
    value: +d.vgfre
  };
},
function(error, data) {
  var colorScale = d3.scale.linear()
      .domain([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .range(colors);
  
  var chartb = d3.select(&#34;div#chart2&#34;).append(&#34;svg&#34;)
      .attr(&#34;width&#34;, widthy + margin.left + margin.right)
      .attr(&#34;height&#34;, heighty + margin.top + margin.bottom)
      .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      ;

  var rwSortOrder=false;
  var rwLabels = chartb.append(&#34;g&#34;)
      .selectAll(&#34;.rwLabelg&#34;)
      .data(rwLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hcrw.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;end&#34;)
      .attr(&#34;transform&#34;, &#34;translate(-6,&#34; + cellSize / 1.5 + &#34;)&#34;)
      .attr(&#34;class&#34;, function (d,i) { return &#34;rwLabel mono rr&#34;+i;} ) 
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {rwSortOrder=!rwSortOrder; sortbylabel(&#34;rr&#34;,i,rwSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var clSortOrder=false;
  var clLabels = chartb.append(&#34;g&#34;)
      .selectAll(&#34;.clLabelg&#34;)
      .data(clLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hccl.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;left&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34;+cellSize/2 + &#34;,-6) rotate (-90)&#34;)
      .attr(&#34;class&#34;,  function (d,i) { return &#34;clLabel mono cc&#34;+i;} )
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {clSortOrder=!clSortOrder;  sortbylabel(&#34;cc&#34;,i,clSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var heat = chartb.append(&#34;g&#34;).attr(&#34;class&#34;,&#34;g3&#34;)
        .selectAll(&#34;.cellg&#34;)
        .data(data,function(d){return d.rw+&#34;:&#34;+d.cl;})
        .enter()
        .append(&#34;rect&#34;)
        .attr(&#34;x&#34;, function(d) { return hccl.indexOf(d.cl) * cellSize; })
        .attr(&#34;y&#34;, function(d) { return hcrw.indexOf(d.rw) * cellSize; })
        .attr(&#34;class&#34;, function(d){return &#34;cell cell-border ccrr&#34;+(d.rw-1)+&#34; cccc&#34;+(d.cl-1);})
        .attr(&#34;width&#34;, cellSize)
        .attr(&#34;height&#34;, cellSize)
        .style(&#34;fill&#34;, function(d) { return colorScale(d.value); })
        /* .on(&#34;click&#34;, function(d) {
               var rwtext=d3.select(&#34;.rr&#34;+(d.rw-1));
               if(rwtext.classed(&#34;text-selected&#34;)==false){
                   rwtext.classed(&#34;text-selected&#34;,true);
               }else{
                   rwtext.classed(&#34;text-selected&#34;,false);
               }
        })*/
        .on(&#34;mouseover&#34;, function(d){
               //highlight text
               d3.select(this).classed(&#34;cell-hover&#34;,true);
               d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-highlight&#34;,function(r,ri){ return ri==(d.rw-1);});
               d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-highlight&#34;,function(c,ci){ return ci==(d.cl-1);});
        
               //Update the tooltip position and value
               d3.select(&#34;#tooltip&#34;)
                 .style(&#34;left&#34;, (d3.event.pageX+10) + &#34;px&#34;)
                 .style(&#34;top&#34;, (d3.event.pageY-10) + &#34;px&#34;)
                 .select(&#34;#value&#34;)
                 .text(d.value+&#34;% of &#34;+rwLabel[d.rw-1]+&#34; games have a &#34;+clLabel[d.cl-1]+&#34; theme&#34;);  
               //Show the tooltip
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
        })
        .on(&#34;mouseout&#34;, function(){
               d3.select(this).classed(&#34;cell-hover&#34;,false);
               d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
        })
        ;

  var legend = chartb.selectAll(&#34;.legend&#34;)
      .data([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .enter().append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;legend&#34;);
 
  legend.append(&#34;rect&#34;)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, heighty+(cellSize*2))
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;height&#34;, cellSize)
    .style(&#34;fill&#34;, function(d, i) { return colors[i]; });
 
  legend.append(&#34;text&#34;)
    .attr(&#34;class&#34;, &#34;mono&#34;)
    .text(function(d) { return d; })
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, heighty + (cellSize*4));

// Change ordering of cells

  function sortbylabel(rrORcc,i,sortOrder){
       var t = chartb.transition().duration(1500);
       var vgfre=[];
       var sorted; // sorted is zero-based index
       d3.selectAll(&#34;.cc&#34;+rrORcc+i) 
         .filter(function(ce){
            vgfre.push(ce.value);
          })
       ;
       if(rrORcc==&#34;rr&#34;){ // sort vgfre of a gene
         sorted=d3.range(cl_number).sort(function(a,b){ if(sortOrder){ return vgfre[b]-vgfre[a];}else{ return vgfre[a]-vgfre[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;x&#34;, function(d) { return sorted.indexOf(d.cl-1) * cellSize; })
           ;
         t.selectAll(&#34;.clLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }else{ // sort vgfreq of a contrast
         sorted=d3.range(rw_number).sort(function(a,b){if(sortOrder){ return vgfre[b]-vgfre[a];}else{ return vgfre[a]-vgfre[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;y&#34;, function(d) { return sorted.indexOf(d.rw-1) * cellSize; })
           ;
         t.selectAll(&#34;.rwLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }
  }

  d3.select(&#34;#order&#34;).on(&#34;change&#34;,function(){
    order(this.value);
  });
  

  var sa=d3.select(&#34;.g3&#34;)
      .on(&#34;mousedown&#34;, function() {
          if( !d3.event.altKey) {
             d3.selectAll(&#34;.cell-selected&#34;).classed(&#34;cell-selected&#34;,false);
             d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-selected&#34;,false);
          }
         var p = d3.mouse(this);
         sa.append(&#34;rect&#34;)
         .attr({
             rx      : 0,
             ry      : 0,
             class   : &#34;selection&#34;,
             x       : p[0],
             y       : p[1],
             widthy   : 1,
             heighty  : 1
         })
      })
      .on(&#34;mousemove&#34;, function() {
         var s = sa.select(&#34;rect.selection&#34;);
      
         if(!s.empty()) {
             var p = d3.mouse(this),
                 d = {
                     x       : parseInt(s.attr(&#34;x&#34;), 10),
                     y       : parseInt(s.attr(&#34;y&#34;), 10),
                     widthy   : parseInt(s.attr(&#34;width&#34;), 10),
                     heighty  : parseInt(s.attr(&#34;height&#34;), 10)
                 },
                 move = {
                     x : p[0] - d.x,
                     y : p[1] - d.y
                 }
             ;
      
             if(move.x &lt; 1 || (move.x*2&lt;d.widthy)) {
                 d.x = p[0];
                 d.widthy -= move.x;
             } else {
                 d.widthy = move.x;       
             }
      
             if(move.y &lt; 1 || (move.y*2&lt;d.heighty)) {
                 d.y = p[1];
                 d.heighty -= move.y;
             } else {
                 d.heighty = move.y;       
             }
             s.attr(d);
      
                 // deselect all temporary selected state objects
             d3.selectAll(&#39;.cell-selection.cell-selected&#39;).classed(&#34;cell-selected&#34;, false);
             d3.selectAll(&#34;.text-selection.text-selected&#34;).classed(&#34;text-selected&#34;,false);

             d3.selectAll(&#39;.cell&#39;).filter(function(cell_d, i) {
                 if(
                     !d3.select(this).classed(&#34;cell-selected&#34;) &amp;&amp; 
                         // inner circle inside selection frame
                     (this.x.baseVal.value)+cellSize &gt;= d.x &amp;&amp; (this.x.baseVal.value)&lt;=d.x+d.widthy &amp;&amp; 
                     (this.y.baseVal.value)+cellSize &gt;= d.y &amp;&amp; (this.y.baseVal.value)&lt;=d.y+d.heighty
                 ) {
      
                     d3.select(this)
                     .classed(&#34;cell-selection&#34;, true)
                     .classed(&#34;cell-selected&#34;, true);

                     d3.select(&#34;.rr&#34;+(cell_d.rw-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);

                     d3.select(&#34;.cc&#34;+(cell_d.cl-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);
                 }
             });
         }
      })
      .on(&#34;mouseup&#34;, function() {
            // remove selection frame
         sa.selectAll(&#34;rect.selection&#34;).remove();
      
             // remove temporary selection marker class
         d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
         d3.selectAll(&#34;.text-selection&#34;).classed(&#34;text-selection&#34;,false);
      })
      .on(&#34;mouseout&#34;, function() {
         if(d3.event.relatedTarget.tagName==&#39;html&#39;) {
                 // remove selection frame
             sa.selectAll(&#34;rect.selection&#34;).remove();
                 // remove temporary selection marker class
             d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
             d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-selected&#34;,false);
         }
      })
      ;
});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Theme Interactive - Visualizing Video Games Throughout History</title>
      <link>/interactives/2015-06-10-theme-interactive/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/interactives/2015-06-10-theme-interactive/</guid>
      <description>&lt;style&gt;
      svg *::selection {
         background : transparent;
         width: 700px;
         height: 500px;
         margin-left: 30px;
         font-size: 13px; 
      }
     
      svg *::-moz-selection {
         background:transparent;
      } 
     
      svg *::-webkit-selection {
         background:transparent;
      }
      rect.selection {
        stroke          : #333;
        stroke-dasharray: 4px;
        stroke-opacity  : 0.5;
        fill            : transparent;
      }

      rect.cell-border {
        stroke: #eee;
        stroke-width:0.3px;   
      }

      rect.cell-selected {
        stroke: rgb(51,102,153);
        stroke-width:0.5px;   
      }

      rect.cell-hover {
        stroke: #F00;
        stroke-width:0.3px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Andale Mono, Andale Mono;
        fill: #4a4a4a;
      }

      text.text-selected {
        fill: #000;
      }

      text.text-highlight {
        fill: #c00;
      }
      text.text-hover {
        fill: #00C;
      }
      #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }

      #tooltip.hidden {
        display: none;
      }

      #tooltip p {
        margin: 0;
        font-family: Andale Mono;
        font-size: 12px;
        line-height: 20px;
      }
&lt;/style&gt;

&lt;div id=&#34;tooltip&#34; class=&#34;hidden&#34;&gt;
  &lt;p&gt;&lt;span id=&#34;value&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script src=&#34;http://d3js.org/d3.v3.min.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;chart1&#34; class=&#34;text-center&#34;&gt;&lt;/div&gt;

&lt;script&gt;
var margin = { top: 175, right: 10, bottom: 50, left: 175 },
  cellSize=12;
  col_number=43;
  row_number=43;
  width = cellSize*col_number, // - margin.left - margin.right,
  height = cellSize*row_number , // - margin.top - margin.bottom,
  //gridSize = Math.floor(width / 24),
  legendElementWidth = cellSize*2.5,
  colorBuckets = 11,
  colors = [&#39;#FFFFFF&#39;,&#39;#F1EEF6&#39;,&#39;#E6D3E1&#39;,&#39;#DBB9CD&#39;,&#39;#D19EB9&#39;,&#39;#C684A4&#39;,&#39;#BB6990&#39;,&#39;#B14F7C&#39;,&#39;#A63467&#39;,&#39;#9B1A53&#39;,&#39;#91003F&#39;];
  hcrow = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  hccol = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  rowLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;],
  colLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;];

d3.csv(&#34;/data/data_heatmap.csv&#34;,
function(d) {
  return {
    row:   +d.row_idx,
    col:   +d.col_idx,
    value: +d.vgfreq
  };
},
function(error, data) {
  var colorScale = d3.scale.linear()
      .domain([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .range(colors);
  
  var charta = d3.select(&#34;div#chart1&#34;).append(&#34;svg&#34;)
      .attr(&#34;width&#34;, width + margin.left + margin.right)
      .attr(&#34;height&#34;, height + margin.top + margin.bottom)
      .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      ;
  var rowSortOrder=false;
  var colSortOrder=false;
  var rowLabels = charta.append(&#34;g&#34;)
      .selectAll(&#34;.rowLabelg&#34;)
      .data(rowLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hcrow.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;end&#34;)
      .attr(&#34;transform&#34;, &#34;translate(-6,&#34; + cellSize / 1.5 + &#34;)&#34;)
      .attr(&#34;class&#34;, function (d,i) { return &#34;rowLabel mono r&#34;+i;} ) 
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {rowSortOrder=!rowSortOrder; sortbylabel(&#34;r&#34;,i,rowSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var colLabels = charta.append(&#34;g&#34;)
      .selectAll(&#34;.colLabelg&#34;)
      .data(colLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hccol.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;left&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34;+cellSize/2 + &#34;,-6) rotate (-90)&#34;)
      .attr(&#34;class&#34;,  function (d,i) { return &#34;colLabel mono c&#34;+i;} )
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {colSortOrder=!colSortOrder;  sortbylabel(&#34;c&#34;,i,colSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var heatMap = charta.append(&#34;g&#34;).attr(&#34;class&#34;,&#34;g3&#34;)
        .selectAll(&#34;.cellg&#34;)
        .data(data,function(d){return d.row+&#34;:&#34;+d.col;})
        .enter()
        .append(&#34;rect&#34;)
        .attr(&#34;x&#34;, function(d) { return hccol.indexOf(d.col) * cellSize; })
        .attr(&#34;y&#34;, function(d) { return hcrow.indexOf(d.row) * cellSize; })
        .attr(&#34;class&#34;, function(d){return &#34;cell cell-border cr&#34;+(d.row-1)+&#34; cc&#34;+(d.col-1);})
        .attr(&#34;width&#34;, cellSize)
        .attr(&#34;height&#34;, cellSize)
        .style(&#34;fill&#34;, function(d) { return colorScale(d.value); })
        /* .on(&#34;click&#34;, function(d) {
               var rowtext=d3.select(&#34;.r&#34;+(d.row-1));
               if(rowtext.classed(&#34;text-selected&#34;)==false){
                   rowtext.classed(&#34;text-selected&#34;,true);
               }else{
                   rowtext.classed(&#34;text-selected&#34;,false);
               }
        })*/
        .on(&#34;mouseover&#34;, function(d){
               //highlight text
               d3.select(this).classed(&#34;cell-hover&#34;,true);
               d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-highlight&#34;,function(r,ri){ return ri==(d.row-1);});
               d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-highlight&#34;,function(c,ci){ return ci==(d.col-1);});
        
               //Update the tooltip position and value
               d3.select(&#34;#tooltip&#34;)
                 .style(&#34;left&#34;, (d3.event.pageX+10) + &#34;px&#34;)
                 .style(&#34;top&#34;, (d3.event.pageY-10) + &#34;px&#34;)
                 .select(&#34;#value&#34;)
                 .text(d.value+&#34;% of &#34;+rowLabel[d.row-1]+&#34; games have a &#34;+colLabel[d.col-1]+&#34; theme&#34;);  
               //Show the tooltip
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
        })
        .on(&#34;mouseout&#34;, function(){
               d3.select(this).classed(&#34;cell-hover&#34;,false);
               d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
        })
        ;

  var legend = charta.selectAll(&#34;.legend&#34;)
      .data([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .enter().append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;legend&#34;);
 
  legend.append(&#34;rect&#34;)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, height+(cellSize*2))
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;height&#34;, cellSize)
    .style(&#34;fill&#34;, function(d, i) { return colors[i]; });
 
  legend.append(&#34;text&#34;)
    .attr(&#34;class&#34;, &#34;mono&#34;)
    .text(function(d) { return d; })
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, height + (cellSize*4));

// Change ordering of cells

  function sortbylabel(rORc,i,sortOrder){
       var t = charta.transition().duration(1500);
       var vgfreq=[];
       var sorted; // sorted is zero-based index
       d3.selectAll(&#34;.c&#34;+rORc+i) 
         .filter(function(ce){
            vgfreq.push(ce.value);
          })
       ;
       if(rORc==&#34;r&#34;){ // sort vgfreq of a gene
         sorted=d3.range(col_number).sort(function(a,b){ if(sortOrder){ return vgfreq[b]-vgfreq[a];}else{ return vgfreq[a]-vgfreq[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;x&#34;, function(d) { return sorted.indexOf(d.col-1) * cellSize; })
           ;
         t.selectAll(&#34;.colLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }else{ // sort vgfreq of a contrast
         sorted=d3.range(row_number).sort(function(a,b){if(sortOrder){ return vgfreq[b]-vgfreq[a];}else{ return vgfreq[a]-vgfreq[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;y&#34;, function(d) { return sorted.indexOf(d.row-1) * cellSize; })
           ;
         t.selectAll(&#34;.rowLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }
  }

  d3.select(&#34;#order&#34;).on(&#34;change&#34;,function(){
    order(this.value);
  });
  

  var sa=d3.select(&#34;.g3&#34;)
      .on(&#34;mousedown&#34;, function() {
          if( !d3.event.altKey) {
             d3.selectAll(&#34;.cell-selected&#34;).classed(&#34;cell-selected&#34;,false);
             d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-selected&#34;,false);
          }
         var p = d3.mouse(this);
         sa.append(&#34;rect&#34;)
         .attr({
             rx      : 0,
             ry      : 0,
             class   : &#34;selection&#34;,
             x       : p[0],
             y       : p[1],
             width   : 1,
             height  : 1
         })
      })
      .on(&#34;mousemove&#34;, function() {
         var s = sa.select(&#34;rect.selection&#34;);
      
         if(!s.empty()) {
             var p = d3.mouse(this),
                 d = {
                     x       : parseInt(s.attr(&#34;x&#34;), 10),
                     y       : parseInt(s.attr(&#34;y&#34;), 10),
                     width   : parseInt(s.attr(&#34;width&#34;), 10),
                     height  : parseInt(s.attr(&#34;height&#34;), 10)
                 },
                 move = {
                     x : p[0] - d.x,
                     y : p[1] - d.y
                 }
             ;
      
             if(move.x &lt; 1 || (move.x*2&lt;d.width)) {
                 d.x = p[0];
                 d.width -= move.x;
             } else {
                 d.width = move.x;       
             }
      
             if(move.y &lt; 1 || (move.y*2&lt;d.height)) {
                 d.y = p[1];
                 d.height -= move.y;
             } else {
                 d.height = move.y;       
             }
             s.attr(d);
      
                 // deselect all temporary selected state objects
             d3.selectAll(&#39;.cell-selection.cell-selected&#39;).classed(&#34;cell-selected&#34;, false);
             d3.selectAll(&#34;.text-selection.text-selected&#34;).classed(&#34;text-selected&#34;,false);

             d3.selectAll(&#39;.cell&#39;).filter(function(cell_d, i) {
                 if(
                     !d3.select(this).classed(&#34;cell-selected&#34;) &amp;&amp; 
                         // inner circle inside selection frame
                     (this.x.baseVal.value)+cellSize &gt;= d.x &amp;&amp; (this.x.baseVal.value)&lt;=d.x+d.width &amp;&amp; 
                     (this.y.baseVal.value)+cellSize &gt;= d.y &amp;&amp; (this.y.baseVal.value)&lt;=d.y+d.height
                 ) {
      
                     d3.select(this)
                     .classed(&#34;cell-selection&#34;, true)
                     .classed(&#34;cell-selected&#34;, true);

                     d3.select(&#34;.r&#34;+(cell_d.row-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);

                     d3.select(&#34;.c&#34;+(cell_d.col-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);
                 }
             });
         }
      })
      .on(&#34;mouseup&#34;, function() {
            // remove selection frame
         sa.selectAll(&#34;rect.selection&#34;).remove();
      
             // remove temporary selection marker class
         d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
         d3.selectAll(&#34;.text-selection&#34;).classed(&#34;text-selection&#34;,false);
      })
      .on(&#34;mouseout&#34;, function() {
         if(d3.event.relatedTarget.tagName==&#39;html&#39;) {
                 // remove selection frame
             sa.selectAll(&#34;rect.selection&#34;).remove();
                 // remove temporary selection marker class
             d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
             d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-selected&#34;,false);
         }
      })
      ;
});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Video Games Throughout History</title>
      <link>/posts/2015-06-10-video-games-interactive/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2015-06-10-video-games-interactive/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Call of Duty :: Frank Underwood // Frogger :: George Costanza // Shinobi :: Wu-Tang Clan // Super Nintendo &amp;amp; Sega Genesis :: &lt;a href=&#34;https://youtu.be/CHio4lLOhKc?t=2m32s&#34;&gt;???&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Video games have long infiltrated popular culture. This article will attempt to explain that reach. Inspired by FiveThirtyEight&#39;s great article &lt;a href=&#34;http://fivethirtyeight.com/features/designing-the-best-board-game-on-the-planet/&#34;&gt;&#34;Designing the Best Board Game on the Planet&#34;&lt;/a&gt;, I set out to extend this methodology to video games. The focus of 538&#39;s research related to a robust data set pulled from &lt;a href=&#34;http://boardgamegeek.com/&#34;&gt;BoardGameGeek&lt;/a&gt;, an exhaustive collection of board games contributed by it&#39;s passionate users. I set out to find a similar user-contributed dataset. and settled on the &lt;a href=&#34;https://www.mobygames.com/&#34;&gt;MobyGames&lt;/a&gt; video games database.

&lt;p&gt;
Created in 1999 by &lt;a href=&#34;https://www.mobygames.com/info/faq5&#34;&gt;Jim Leonard&lt;/a&gt; to catalogue titles and connect games to their developers and fans, the database has grown to nearly 50,000 games. Ratings, images, and other details are contributed by users. Though there has been management changes leading to some contributor vitriol in recent years, the site is on stable footing and recently surpassed 50,000 unique games.
&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Method&lt;/h3&gt;
&lt;p&gt;
Using the R package &amp;lsquo;rvest&amp;rsquo; I scraped the site&amp;rsquo;s complete game list &lt;a href=&#34;http://www.mobygames.com/browse/games/list-games/&#34;&gt;html table&lt;/a&gt;, then used each game&amp;rsquo;s URL to scrape additional game information from their profile pages. To avoid issues with replicate game titles the URL was used as a unique reference ID for each title - for example, &lt;b&gt;007: The World is Not Enough&lt;/b&gt; has &lt;a href=&#34;http://www.mobygames.com/game/007-the-world-is-not-enough&#34;&gt;three&lt;/a&gt; &lt;a href=&#34;http://www.mobygames.com/game/007-the-world-is-not-enough_&#34;&gt;unique&lt;/a&gt; &lt;a href=&#34;http://www.mobygames.com/game/007-the-world-is-not-enough__&#34;&gt;pages&lt;/a&gt; containing details for each system for which it was released. Each game&amp;rsquo;s profile follows a similar format which made it effective for scraping, but specific genres of games used atypical formatting, requiring a good deal of database cleansing. The guideline that 80% of the work with data involves cleaning is no expection here. We&amp;rsquo;re left with a database of 50,021 games. Check out the code I used to pull and clean the data on &lt;a href=&#34;https://github.com/mikeleeco/Mobygames-Scraper/blob/master/MobygamesScraper.R&#34;&gt;my Github page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Let&amp;rsquo;s dive into what the numbers tell us.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Ratings&lt;/h3&gt;
&lt;p&gt;
MobyGames aggregates two sources to formulate their video game ratings: users and critics. User ratings are determined on a 0 to 5 scale and are contributed by an individual&amp;rsquo;s subjective rating of a particular game. Critic ratings are reviews from magazines, entertainment websites, and other online video game forums. A weighted average of these individual critics formulate the site&amp;rsquo;s &amp;ldquo;MobyRank&amp;rdquo; score. For this article I gave equal importance to user and critic ratings to ascertain each game&amp;rsquo;s overall rating, simply averaging the two scores into one total rating. Of the 50,000+ games, a total of 9224 had either user or critics ratings, ranging in years from 1976-2015. In the scatterplot below you&amp;rsquo;ll see the combined Mobygames ratings by date of original publication.
&lt;/p&gt;
&lt;img src=&#34;/img/gamerank.png&#34; class=&#34;img-responsive center-block center-block&#34;&gt;&lt;/p&gt;

&lt;p&gt;

That looks pretty sharp, but in the spirit of video games, lets make it a bit more...8-bit.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;/img/mean_game_ranking_2d.png&#34; class=&#34;img-responsive center-block&#34;&gt;

&lt;/p&gt;

&lt;p&gt;
As you can see, very little has changed in a video game&#39;s reception by year of distribution. There is a mild increase in ratings by year since video games came into prominence. This displays an interesting contrast compared to 538&#39;s article on board games, which described the possibility that recent years might be considered &#34;the golden age of serious board gaming.&#34; I&#39;d hypothesize that this is effect is due to the platform these entertainment options are consumed. Board games are easily compared; Settlers of Catan and Monopoly are using equal technology, though one is deemed of a higher quality sinced it&#39;s final product is more innovative in using similar tools. Video games are influenced by the effects of advances in technology. Objectively, you can&#39;t compare &lt;a href=&#34;https://www.mobygames.com/game/pong____&#34;&gt;Pong!&lt;/a&gt; to &lt;a href=&#34;https://www.mobygames.com/game/mario-tennis&#34;&gt;Mario Tennis&lt;/a&gt;; you have to consider the technology of the day. Keeping that in mind, below you&#39;ll see the top 11 games by the average user/critics score:
&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;div class=&#34;table-responsive&#34;&gt;&lt;table class=&#34;table table-hover&#34;&gt;&lt;tr class=&#34;info&#34;&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Year&lt;/th&gt;&lt;th&gt;Publisher&lt;/th&gt;&lt;th&gt;Genre&lt;/th&gt;&lt;th&gt;Platform&lt;/th&gt;&lt;th&gt;Rating&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Bayonetta 2&lt;/td&gt;&lt;td&gt;2014&lt;/td&gt;&lt;td&gt;Nintendo of America Inc.&lt;/td&gt;&lt;td&gt;Action&lt;/td&gt;&lt;td&gt;Wii U&lt;/td&gt;&lt;td&gt;94.5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Metroid Prime Trilogy&lt;/td&gt;&lt;td&gt;2009&lt;/td&gt;&lt;td&gt;Nintendo of America Inc., Nintendo of Europe GmbH&lt;/td&gt;&lt;td&gt;Action&lt;/td&gt;&lt;td&gt;Wii, Wii U&lt;/td&gt;&lt;td&gt;94.5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Super Mario Galaxy 2&lt;/td&gt;&lt;td&gt;2010&lt;/td&gt;&lt;td&gt;Nintendo Co., Ltd., Nintendo of America Inc., Nintendo of Europe GmbH&lt;/td&gt;&lt;td&gt;Action&lt;/td&gt;&lt;td&gt;Wii, Wii U&lt;/td&gt;&lt;td&gt;94.5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;ESPN NFL 2K5&lt;/td&gt;&lt;td&gt;2004&lt;/td&gt;&lt;td&gt;Global Star Software Inc., SEGA Europe Ltd., SEGA of America, Inc.&lt;/td&gt;&lt;td&gt;Sports&lt;/td&gt;&lt;td&gt;PlayStation 2, Xbox&lt;/td&gt;&lt;td&gt;93.75&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;World Series Baseball 2K3&lt;/td&gt;&lt;td&gt;2003&lt;/td&gt;&lt;td&gt;SEGA of America, Inc.&lt;/td&gt;&lt;td&gt;Sports&lt;/td&gt;&lt;td&gt;PlayStation 2, Xbox&lt;/td&gt;&lt;td&gt;93.75&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Final Fantasy X | X-2 HD Remaster&lt;/td&gt;&lt;td&gt;2013&lt;/td&gt;&lt;td&gt;Square Enix Co., Ltd., Square Enix, Inc.&lt;/td&gt;&lt;td&gt;Role-Playing (RPG)&lt;/td&gt;&lt;td&gt;PlayStation 3, PS Vita&lt;/td&gt;&lt;td&gt;93.5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Grand Theft Auto V&lt;/td&gt;&lt;td&gt;2013&lt;/td&gt;&lt;td&gt;Rockstar Games, Inc.&lt;/td&gt;&lt;td&gt;Action, Racing / Driving&lt;/td&gt;&lt;td&gt;PlayStation 3, PlayStation 4, Windows, Xbox 360, Xbox One&lt;/td&gt;&lt;td&gt;93.5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Sins of a Solar Empire: Trinity&lt;/td&gt;&lt;td&gt;2010&lt;/td&gt;&lt;td&gt;1C-SoftClub, rondomedia Marketing &amp; Vertriebs GmbH, Snowball Studios, Stardock Entertainment, Inc.&lt;/td&gt;&lt;td&gt;Strategy&lt;/td&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;td&gt;93.5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Super Mario Bros.&lt;/td&gt;&lt;td&gt;1985&lt;/td&gt;&lt;td&gt;Nintendo Co., Ltd., Nintendo of America Inc., Nintendo of Europe GmbH&lt;/td&gt;&lt;td&gt;Action&lt;/td&gt;&lt;td&gt;Arcade, Game Boy Advance, NES, Nintendo 3DS, Wii, Wii U&lt;/td&gt;&lt;td&gt;93.33&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;RalliSport Challenge 2&lt;/td&gt;&lt;td&gt;2004&lt;/td&gt;&lt;td&gt;Microsoft Game Studios&lt;/td&gt;&lt;td&gt;Racing / Driving&lt;/td&gt;&lt;td&gt;Xbox&lt;/td&gt;&lt;td&gt;93&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Vampire Chronicle for Matching Service&lt;/td&gt;&lt;td&gt;2000&lt;/td&gt;&lt;td&gt;Capcom Co., Ltd.&lt;/td&gt;&lt;td&gt;Action&lt;/td&gt;&lt;td&gt;Dreamcast&lt;/td&gt;&lt;td&gt;93&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;
Though the earlier graph illustrated game ratings haven&#39;t changed much over the last 40 years, 10 out of the top 11 games have been released within the past 15 years. This may be indicative of a recency bias, a publisher&#39;s increased understanding of qualities that facilitate more highly regarded games, or some other factor. Many of these best game have a so-called &#34;replay value&#34;, such as RPGs, infinite universes, or sports franchises.
&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Themes&lt;/h3&gt;
&lt;p&gt;
Mobygames uses 43 themes to delineate aspects of games, which is detailed in their online &lt;a href=&#34;http://www.mobygames.com/glossary/genres&#34;&gt;glossary&lt;/a&gt;. While some games have multiple themes, others have no listed theme - it&amp;rsquo;s unclear whether this is due to user-contribution error or the unique qualities of some games. Super Mario 3, one of the highest-regarded games ever created, doesn&amp;rsquo;t list a theme; it doesn&amp;rsquo;t easily fall into any of the 43 listed genres either. Arcade? Puzzle-solving? Probably neither.
&lt;/p&gt;
&lt;p&gt;
Of the 38,615 games listing at least one theme, the image below shows the distribution of themes as a percentage decimal.
&lt;/p&gt;
&lt;img src=&#34;/img/games_by_theme.png&#34; class=&#34;img-responsive center-block&#34;&gt;&lt;/p&gt;

&lt;p&gt;

I was also curious which themes were most likely to occur simultaneously. Think of the following interactive as such: &#34;If I were to randomly select from the pool of Arcade games, what is the likelihood that it also has a _____ theme?&#34; &lt;i&gt;Click the Themes on the left side to reorganize the heatmap, and hover over the cells to gain further details&lt;/i&gt;.
&lt;/p&gt;
&lt;style&gt;
      svg *::selection {
         background : transparent;
         width: 700px;
         height: 500px;
         margin-left: 30px;
         font-size: 13px;   
      }
     
      svg *::-moz-selection {
         background:transparent;
      } 
     
      svg *::-webkit-selection {
         background:transparent;
      }
      rect.selection {
        stroke          : #333;
        stroke-dasharray: 4px;
        stroke-opacity  : 0.5;
        fill            : transparent;
      }

      rect.cell-border {
        stroke: #eee;
        stroke-width:0.3px;   
      }

      rect.cell-selected {
        stroke: rgb(51,102,153);
        stroke-width:0.5px;   
      }

      rect.cell-hover {
        stroke: #F00;
        stroke-width:0.3px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Andale Mono, Andale Mono;
        fill: #4a4a4a;
      }

      text.text-selected {
        fill: #000;
      }

      text.text-highlight {
        fill: #c00;
      }
      text.text-hover {
        fill: #00C;
      }
      #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }

      #tooltip.hidden {
        display: none;
      }

      #tooltip p {
        margin: 0;
        font-family: Andale Mono;
        font-size: 12px;
        line-height: 20px;
      }
&lt;/style&gt;


&lt;div id=&#34;tooltip&#34; class=&#34;hidden&#34;&gt;
    &lt;p&gt;&lt;span id=&#34;value&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script src=&#34;http://d3js.org/d3.v3.min.js&#34;&gt;&lt;/script&gt;



&lt;div id=&#34;chart1&#34; class=&#34;text-center&#34;&gt;&lt;/div&gt;

&lt;script&gt;
var margin = { top: 175, right: 10, bottom: 50, left: 175 },
  cellSize=12;
  col_number=43;
  row_number=43;
  width = cellSize*col_number, // - margin.left - margin.right,
  height = cellSize*row_number , // - margin.top - margin.bottom,
  //gridSize = Math.floor(width / 24),
  legendElementWidth = cellSize*2.5,
  colorBuckets = 11,
  colors = [&#39;#FFFFFF&#39;,&#39;#F1EEF6&#39;,&#39;#E6D3E1&#39;,&#39;#DBB9CD&#39;,&#39;#D19EB9&#39;,&#39;#C684A4&#39;,&#39;#BB6990&#39;,&#39;#B14F7C&#39;,&#39;#A63467&#39;,&#39;#9B1A53&#39;,&#39;#91003F&#39;];
  hcrow = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  hccol = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  rowLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;],
  colLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;];

d3.csv(&#34;/data/data_heatmap.csv&#34;,
function(d) {
  return {
    row:   +d.row_idx,
    col:   +d.col_idx,
    value: +d.vgfreq
  };
},
function(error, data) {
  var colorScale = d3.scale.linear()
      .domain([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .range(colors);
  
  var charta = d3.select(&#34;div#chart1&#34;).append(&#34;svg&#34;)
      .attr(&#34;width&#34;, width + margin.left + margin.right)
      .attr(&#34;height&#34;, height + margin.top + margin.bottom)
      .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      ;
  var rowSortOrder=false;
  var colSortOrder=false;
  var rowLabels = charta.append(&#34;g&#34;)
      .selectAll(&#34;.rowLabelg&#34;)
      .data(rowLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hcrow.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;end&#34;)
      .attr(&#34;transform&#34;, &#34;translate(-6,&#34; + cellSize / 1.5 + &#34;)&#34;)
      .attr(&#34;class&#34;, function (d,i) { return &#34;rowLabel mono r&#34;+i;} ) 
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {rowSortOrder=!rowSortOrder; sortbylabel(&#34;r&#34;,i,rowSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var colLabels = charta.append(&#34;g&#34;)
      .selectAll(&#34;.colLabelg&#34;)
      .data(colLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hccol.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;left&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34;+cellSize/2 + &#34;,-6) rotate (-90)&#34;)
      .attr(&#34;class&#34;,  function (d,i) { return &#34;colLabel mono c&#34;+i;} )
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {colSortOrder=!colSortOrder;  sortbylabel(&#34;c&#34;,i,colSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var heatMap = charta.append(&#34;g&#34;).attr(&#34;class&#34;,&#34;g3&#34;)
        .selectAll(&#34;.cellg&#34;)
        .data(data,function(d){return d.row+&#34;:&#34;+d.col;})
        .enter()
        .append(&#34;rect&#34;)
        .attr(&#34;x&#34;, function(d) { return hccol.indexOf(d.col) * cellSize; })
        .attr(&#34;y&#34;, function(d) { return hcrow.indexOf(d.row) * cellSize; })
        .attr(&#34;class&#34;, function(d){return &#34;cell cell-border cr&#34;+(d.row-1)+&#34; cc&#34;+(d.col-1);})
        .attr(&#34;width&#34;, cellSize)
        .attr(&#34;height&#34;, cellSize)
        .style(&#34;fill&#34;, function(d) { return colorScale(d.value); })
        /* .on(&#34;click&#34;, function(d) {
               var rowtext=d3.select(&#34;.r&#34;+(d.row-1));
               if(rowtext.classed(&#34;text-selected&#34;)==false){
                   rowtext.classed(&#34;text-selected&#34;,true);
               }else{
                   rowtext.classed(&#34;text-selected&#34;,false);
               }
        })*/
        .on(&#34;mouseover&#34;, function(d){
               //highlight text
               d3.select(this).classed(&#34;cell-hover&#34;,true);
               d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-highlight&#34;,function(r,ri){ return ri==(d.row-1);});
               d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-highlight&#34;,function(c,ci){ return ci==(d.col-1);});
        
               //Update the tooltip position and value
               d3.select(&#34;#tooltip&#34;)
                 .style(&#34;left&#34;, (d3.event.pageX+10) + &#34;px&#34;)
                 .style(&#34;top&#34;, (d3.event.pageY-10) + &#34;px&#34;)
                 .select(&#34;#value&#34;)
                 .text(d.value+&#34;% of &#34;+rowLabel[d.row-1]+&#34; games have a &#34;+colLabel[d.col-1]+&#34; theme&#34;);  
               //Show the tooltip
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
        })
        .on(&#34;mouseout&#34;, function(){
               d3.select(this).classed(&#34;cell-hover&#34;,false);
               d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
        })
        ;

  var legend = charta.selectAll(&#34;.legend&#34;)
      .data([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .enter().append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;legend&#34;);
 
  legend.append(&#34;rect&#34;)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, height+(cellSize*2))
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;height&#34;, cellSize)
    .style(&#34;fill&#34;, function(d, i) { return colors[i]; });
 
  legend.append(&#34;text&#34;)
    .attr(&#34;class&#34;, &#34;mono&#34;)
    .text(function(d) { return d; })
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, height + (cellSize*4));

// Change ordering of cells

  function sortbylabel(rORc,i,sortOrder){
       var t = charta.transition().duration(1500);
       var vgfreq=[];
       var sorted; // sorted is zero-based index
       d3.selectAll(&#34;.c&#34;+rORc+i) 
         .filter(function(ce){
            vgfreq.push(ce.value);
          })
       ;
       if(rORc==&#34;r&#34;){ // sort vgfreq of a gene
         sorted=d3.range(col_number).sort(function(a,b){ if(sortOrder){ return vgfreq[b]-vgfreq[a];}else{ return vgfreq[a]-vgfreq[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;x&#34;, function(d) { return sorted.indexOf(d.col-1) * cellSize; })
           ;
         t.selectAll(&#34;.colLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }else{ // sort vgfreq of a contrast
         sorted=d3.range(row_number).sort(function(a,b){if(sortOrder){ return vgfreq[b]-vgfreq[a];}else{ return vgfreq[a]-vgfreq[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;y&#34;, function(d) { return sorted.indexOf(d.row-1) * cellSize; })
           ;
         t.selectAll(&#34;.rowLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }
  }

  d3.select(&#34;#order&#34;).on(&#34;change&#34;,function(){
    order(this.value);
  });
  

  var sa=d3.select(&#34;.g3&#34;)
      .on(&#34;mousedown&#34;, function() {
          if( !d3.event.altKey) {
             d3.selectAll(&#34;.cell-selected&#34;).classed(&#34;cell-selected&#34;,false);
             d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-selected&#34;,false);
          }
         var p = d3.mouse(this);
         sa.append(&#34;rect&#34;)
         .attr({
             rx      : 0,
             ry      : 0,
             class   : &#34;selection&#34;,
             x       : p[0],
             y       : p[1],
             width   : 1,
             height  : 1
         })
      })
      .on(&#34;mousemove&#34;, function() {
         var s = sa.select(&#34;rect.selection&#34;);
      
         if(!s.empty()) {
             var p = d3.mouse(this),
                 d = {
                     x       : parseInt(s.attr(&#34;x&#34;), 10),
                     y       : parseInt(s.attr(&#34;y&#34;), 10),
                     width   : parseInt(s.attr(&#34;width&#34;), 10),
                     height  : parseInt(s.attr(&#34;height&#34;), 10)
                 },
                 move = {
                     x : p[0] - d.x,
                     y : p[1] - d.y
                 }
             ;
      
             if(move.x &lt; 1 || (move.x*2&lt;d.width)) {
                 d.x = p[0];
                 d.width -= move.x;
             } else {
                 d.width = move.x;       
             }
      
             if(move.y &lt; 1 || (move.y*2&lt;d.height)) {
                 d.y = p[1];
                 d.height -= move.y;
             } else {
                 d.height = move.y;       
             }
             s.attr(d);
      
                 // deselect all temporary selected state objects
             d3.selectAll(&#39;.cell-selection.cell-selected&#39;).classed(&#34;cell-selected&#34;, false);
             d3.selectAll(&#34;.text-selection.text-selected&#34;).classed(&#34;text-selected&#34;,false);

             d3.selectAll(&#39;.cell&#39;).filter(function(cell_d, i) {
                 if(
                     !d3.select(this).classed(&#34;cell-selected&#34;) &amp;&amp; 
                         // inner circle inside selection frame
                     (this.x.baseVal.value)+cellSize &gt;= d.x &amp;&amp; (this.x.baseVal.value)&lt;=d.x+d.width &amp;&amp; 
                     (this.y.baseVal.value)+cellSize &gt;= d.y &amp;&amp; (this.y.baseVal.value)&lt;=d.y+d.height
                 ) {
      
                     d3.select(this)
                     .classed(&#34;cell-selection&#34;, true)
                     .classed(&#34;cell-selected&#34;, true);

                     d3.select(&#34;.r&#34;+(cell_d.row-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);

                     d3.select(&#34;.c&#34;+(cell_d.col-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);
                 }
             });
         }
      })
      .on(&#34;mouseup&#34;, function() {
            // remove selection frame
         sa.selectAll(&#34;rect.selection&#34;).remove();
      
             // remove temporary selection marker class
         d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
         d3.selectAll(&#34;.text-selection&#34;).classed(&#34;text-selection&#34;,false);
      })
      .on(&#34;mouseout&#34;, function() {
         if(d3.event.relatedTarget.tagName==&#39;html&#39;) {
                 // remove selection frame
             sa.selectAll(&#34;rect.selection&#34;).remove();
                 // remove temporary selection marker class
             d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
             d3.selectAll(&#34;.rowLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.colLabel&#34;).classed(&#34;text-selected&#34;,false);
         }
      })
      ;
});
&lt;/script&gt;
&lt;p&gt;

These two graphics make it evident that Puzzle-Solving, Shooter, Sci-Fi, and Arcade themed games are at a higher rate than other games.
&lt;/p&gt;
&lt;p&gt;
Before moving on, here are a couple interesting observations, from most to least sensical:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;68% of Adult-themed games have an Anime/Manga theme, while only 20% of Anime/Manga-themed games are adult themed.&lt;/li&gt;&lt;li&gt;Only 46% of Helicopter games are Flight-themed - How could that be?!? What are you doing in these other 54% of Helicopter games?&lt;/li&gt;&lt;li&gt;3% of Rhythm/Music games are Shooter-themed. No word to report on the Samba de Amigo/Halo crossover though.&lt;/li&gt;&lt;li&gt;There is one Adult-themed Tank game. What could this possibly entail, you ask? Do yourself a favor and read the &lt;a href=&#34;http://www.mobygames.com/game/space-fuck&#34;&gt;game description&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h3&gt;Themes&lt;/h3&gt;
&lt;p&gt;

Mobygames uses 8 genres to categorize game types. The vast majority of games have at least one genre, many having multiple. Shovelware games, which are packages of dissimilar games (think &lt;b&gt;The 1000 Best Windows 95 Games Bundle&lt;/b&gt;) are responsible for many of the missing titles.
&lt;/p&gt;
&lt;img src=&#34;/img/games_by_genre.png&#34; class=&#34;img-responsive center-block&#34;&gt;

&lt;p&gt;

It&#39;s a bit unexpected that Action games have such a dominating share of the market. This is likely due to its emphasis on reflex-based gameplay, which is a component of most of the other genres - especially racing and sports games.
&lt;/p&gt;
&lt;p&gt;
Similar to the theme interactive, I was curious which themes were most likely to occur in a given genre of game. Think of the following interactive as such: &#34;If I were to randomly select from the pool of Educational games, what is the likelihood that it has a _____ theme?&#34; &lt;i&gt;Click the Genres on the left side to reorganize the heatmap, and hover over the cells to gain further details&lt;/i&gt;.
&lt;/p&gt;
&lt;div id=&#34;chart2&#34; class=&#34;text-center&#34;&gt;&lt;/div&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
var margin = { top: 175, right: 10, bottom: 50, left: 175 },
  cellSize=12;
  cl_number=43;
  rw_number=8;
  widthy = cellSize*cl_number, // - margin.left - margin.right,
  heighty = cellSize*rw_number , // - margin.top - margin.bottom,
  //gridSize = Math.floor(widthy / 24),
  legendElementWidth = cellSize*2.5,
  colorBuckets = 11,
  colors = [&#39;#FFFFFF&#39;,&#39;#F1EEF6&#39;,&#39;#E6D3E1&#39;,&#39;#DBB9CD&#39;,&#39;#D19EB9&#39;,&#39;#C684A4&#39;,&#39;#BB6990&#39;,&#39;#B14F7C&#39;,&#39;#A63467&#39;,&#39;#9B1A53&#39;,&#39;#91003F&#39;];
  hcrw = [1,2,3,4,5,6,7,8],
  hccl = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],
  rwLabel = [&#39;Action&#39;,&#39;Adventure&#39;,&#39;Educational&#39;,&#39;RPG&#39;,&#39;Racing&#39;,&#39;Simulation&#39;,&#39;Sports&#39;,&#39;Strategy&#39;],
  clLabel = [&#39;Adult&#39;,&#39;Anime/Manga&#39;,&#39;Arcade&#39;,&#39;BattleMech&#39;,&#39;Board/PartyGame&#39;,&#39;Cards/Tiles&#39;,&#39;Casino&#39;,&#39;Chess&#39;,&#39;Comics&#39;,&#39;Cyberpunk/DarkSci-Fi&#39;,&#39;Detective/Mystery&#39;,&#39;Fantasy&#39;,&#39;Fighting&#39;,&#39;Flight&#39;,&#39;GameShow&#39;,&#39;Helicopter&#39;,&#39;HistoricalBattle&#39;,&#39;Horror&#39;,&#39;InteractiveFiction (IF)&#39;,&#39;IF (w/Graphics)&#39;,&#39;InteractiveMovie&#39;,&#39;Managerial&#39;,&#39;MartialArts&#39;,&#39;Meditative/Zen&#39;,&#39;Mental Training&#39;,&#39;Naval&#39;,&#39;Paddle/Pong&#39;,&#39;PersistentUniverse&#39;,&#39;Pinball&#39;,&#39;Post-Apocalyptic&#39;,&#39;Puzzle-Solving&#39;,&#39;Real-Time&#39;,&#39;Rhythm/Music&#39;,&#39;Sci-Fi/Futuristic&#39;,&#39;Shooter&#39;,&#39;Spy/Espionage&#39;,&#39;Stealth&#39;,&#39;Survival&#39;,&#39;Tank&#39;,&#39;Train&#39;,&#39;Turn-based&#39;,&#39;VideoBackdrop&#39;,&#39;VisualNovel&#39;];

d3.csv(&#34;/data/data_heatmap2.csv&#34;,
function(d) {
  return {
    rw:   +d.rw_id,
    cl:   +d.cl_id,
    value: +d.vgfre
  };
},
function(error, data) {
  var colorScale = d3.scale.linear()
      .domain([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .range(colors);
  
  var chartb = d3.select(&#34;div#chart2&#34;).append(&#34;svg&#34;)
      .attr(&#34;width&#34;, widthy + margin.left + margin.right)
      .attr(&#34;height&#34;, heighty + margin.top + margin.bottom)
      .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      ;

  var rwSortOrder=false;
  var rwLabels = chartb.append(&#34;g&#34;)
      .selectAll(&#34;.rwLabelg&#34;)
      .data(rwLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hcrw.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;end&#34;)
      .attr(&#34;transform&#34;, &#34;translate(-6,&#34; + cellSize / 1.5 + &#34;)&#34;)
      .attr(&#34;class&#34;, function (d,i) { return &#34;rwLabel mono rr&#34;+i;} ) 
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {rwSortOrder=!rwSortOrder; sortbylabel(&#34;rr&#34;,i,rwSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var clSortOrder=false;
  var clLabels = chartb.append(&#34;g&#34;)
      .selectAll(&#34;.clLabelg&#34;)
      .data(clLabel)
      .enter()
      .append(&#34;text&#34;)
      .text(function (d) { return d; })
      .attr(&#34;x&#34;, 0)
      .attr(&#34;y&#34;, function (d, i) { return hccl.indexOf(i+1) * cellSize; })
      .style(&#34;text-anchor&#34;, &#34;left&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34;+cellSize/2 + &#34;,-6) rotate (-90)&#34;)
      .attr(&#34;class&#34;,  function (d,i) { return &#34;clLabel mono cc&#34;+i;} )
      .on(&#34;mouseover&#34;, function(d) {d3.select(this).classed(&#34;text-hover&#34;,true);})
      .on(&#34;mouseout&#34; , function(d) {d3.select(this).classed(&#34;text-hover&#34;,false);})
      .on(&#34;click&#34;, function(d,i) {clSortOrder=!clSortOrder;  sortbylabel(&#34;cc&#34;,i,clSortOrder);d3.select(&#34;#order&#34;).property(&#34;selectedIndex&#34;, 4).node().focus();;})
      ;

  var heat = chartb.append(&#34;g&#34;).attr(&#34;class&#34;,&#34;g3&#34;)
        .selectAll(&#34;.cellg&#34;)
        .data(data,function(d){return d.rw+&#34;:&#34;+d.cl;})
        .enter()
        .append(&#34;rect&#34;)
        .attr(&#34;x&#34;, function(d) { return hccl.indexOf(d.cl) * cellSize; })
        .attr(&#34;y&#34;, function(d) { return hcrw.indexOf(d.rw) * cellSize; })
        .attr(&#34;class&#34;, function(d){return &#34;cell cell-border ccrr&#34;+(d.rw-1)+&#34; cccc&#34;+(d.cl-1);})
        .attr(&#34;width&#34;, cellSize)
        .attr(&#34;height&#34;, cellSize)
        .style(&#34;fill&#34;, function(d) { return colorScale(d.value); })
        /* .on(&#34;click&#34;, function(d) {
               var rwtext=d3.select(&#34;.rr&#34;+(d.rw-1));
               if(rwtext.classed(&#34;text-selected&#34;)==false){
                   rwtext.classed(&#34;text-selected&#34;,true);
               }else{
                   rwtext.classed(&#34;text-selected&#34;,false);
               }
        })*/
        .on(&#34;mouseover&#34;, function(d){
               //highlight text
               d3.select(this).classed(&#34;cell-hover&#34;,true);
               d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-highlight&#34;,function(r,ri){ return ri==(d.rw-1);});
               d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-highlight&#34;,function(c,ci){ return ci==(d.cl-1);});
        
               //Update the tooltip position and value
               d3.select(&#34;#tooltip&#34;)
                 .style(&#34;left&#34;, (d3.event.pageX+10) + &#34;px&#34;)
                 .style(&#34;top&#34;, (d3.event.pageY-10) + &#34;px&#34;)
                 .select(&#34;#value&#34;)
                 .text(d.value+&#34;% of &#34;+rwLabel[d.rw-1]+&#34; games have a &#34;+clLabel[d.cl-1]+&#34; theme&#34;);  
               //Show the tooltip
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
        })
        .on(&#34;mouseout&#34;, function(){
               d3.select(this).classed(&#34;cell-hover&#34;,false);
               d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-highlight&#34;,false);
               d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
        })
        ;

  var legend = chartb.selectAll(&#34;.legend&#34;)
      .data([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
      .enter().append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;legend&#34;);
 
  legend.append(&#34;rect&#34;)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, heighty+(cellSize*2))
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;height&#34;, cellSize)
    .style(&#34;fill&#34;, function(d, i) { return colors[i]; });
 
  legend.append(&#34;text&#34;)
    .attr(&#34;class&#34;, &#34;mono&#34;)
    .text(function(d) { return d; })
    .attr(&#34;width&#34;, legendElementWidth)
    .attr(&#34;x&#34;, function(d, i) { return legendElementWidth * i; })
    .attr(&#34;y&#34;, heighty + (cellSize*4));

// Change ordering of cells

  function sortbylabel(rrORcc,i,sortOrder){
       var t = chartb.transition().duration(1500);
       var vgfre=[];
       var sorted; // sorted is zero-based index
       d3.selectAll(&#34;.cc&#34;+rrORcc+i) 
         .filter(function(ce){
            vgfre.push(ce.value);
          })
       ;
       if(rrORcc==&#34;rr&#34;){ // sort vgfre of a gene
         sorted=d3.range(cl_number).sort(function(a,b){ if(sortOrder){ return vgfre[b]-vgfre[a];}else{ return vgfre[a]-vgfre[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;x&#34;, function(d) { return sorted.indexOf(d.cl-1) * cellSize; })
           ;
         t.selectAll(&#34;.clLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }else{ // sort vgfreq of a contrast
         sorted=d3.range(rw_number).sort(function(a,b){if(sortOrder){ return vgfre[b]-vgfre[a];}else{ return vgfre[a]-vgfre[b];}});
         t.selectAll(&#34;.cell&#34;)
           .attr(&#34;y&#34;, function(d) { return sorted.indexOf(d.rw-1) * cellSize; })
           ;
         t.selectAll(&#34;.rwLabel&#34;)
          .attr(&#34;y&#34;, function (d, i) { return sorted.indexOf(i) * cellSize; })
         ;
       }
  }

  d3.select(&#34;#order&#34;).on(&#34;change&#34;,function(){
    order(this.value);
  });
  

  var sa=d3.select(&#34;.g3&#34;)
      .on(&#34;mousedown&#34;, function() {
          if( !d3.event.altKey) {
             d3.selectAll(&#34;.cell-selected&#34;).classed(&#34;cell-selected&#34;,false);
             d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-selected&#34;,false);
          }
         var p = d3.mouse(this);
         sa.append(&#34;rect&#34;)
         .attr({
             rx      : 0,
             ry      : 0,
             class   : &#34;selection&#34;,
             x       : p[0],
             y       : p[1],
             widthy   : 1,
             heighty  : 1
         })
      })
      .on(&#34;mousemove&#34;, function() {
         var s = sa.select(&#34;rect.selection&#34;);
      
         if(!s.empty()) {
             var p = d3.mouse(this),
                 d = {
                     x       : parseInt(s.attr(&#34;x&#34;), 10),
                     y       : parseInt(s.attr(&#34;y&#34;), 10),
                     widthy   : parseInt(s.attr(&#34;width&#34;), 10),
                     heighty  : parseInt(s.attr(&#34;height&#34;), 10)
                 },
                 move = {
                     x : p[0] - d.x,
                     y : p[1] - d.y
                 }
             ;
      
             if(move.x &lt; 1 || (move.x*2&lt;d.widthy)) {
                 d.x = p[0];
                 d.widthy -= move.x;
             } else {
                 d.widthy = move.x;       
             }
      
             if(move.y &lt; 1 || (move.y*2&lt;d.heighty)) {
                 d.y = p[1];
                 d.heighty -= move.y;
             } else {
                 d.heighty = move.y;       
             }
             s.attr(d);
      
                 // deselect all temporary selected state objects
             d3.selectAll(&#39;.cell-selection.cell-selected&#39;).classed(&#34;cell-selected&#34;, false);
             d3.selectAll(&#34;.text-selection.text-selected&#34;).classed(&#34;text-selected&#34;,false);

             d3.selectAll(&#39;.cell&#39;).filter(function(cell_d, i) {
                 if(
                     !d3.select(this).classed(&#34;cell-selected&#34;) &amp;&amp; 
                         // inner circle inside selection frame
                     (this.x.baseVal.value)+cellSize &gt;= d.x &amp;&amp; (this.x.baseVal.value)&lt;=d.x+d.widthy &amp;&amp; 
                     (this.y.baseVal.value)+cellSize &gt;= d.y &amp;&amp; (this.y.baseVal.value)&lt;=d.y+d.heighty
                 ) {
      
                     d3.select(this)
                     .classed(&#34;cell-selection&#34;, true)
                     .classed(&#34;cell-selected&#34;, true);

                     d3.select(&#34;.rr&#34;+(cell_d.rw-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);

                     d3.select(&#34;.cc&#34;+(cell_d.cl-1))
                     .classed(&#34;text-selection&#34;,true)
                     .classed(&#34;text-selected&#34;,true);
                 }
             });
         }
      })
      .on(&#34;mouseup&#34;, function() {
            // remove selection frame
         sa.selectAll(&#34;rect.selection&#34;).remove();
      
             // remove temporary selection marker class
         d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
         d3.selectAll(&#34;.text-selection&#34;).classed(&#34;text-selection&#34;,false);
      })
      .on(&#34;mouseout&#34;, function() {
         if(d3.event.relatedTarget.tagName==&#39;html&#39;) {
                 // remove selection frame
             sa.selectAll(&#34;rect.selection&#34;).remove();
                 // remove temporary selection marker class
             d3.selectAll(&#39;.cell-selection&#39;).classed(&#34;cell-selection&#34;, false);
             d3.selectAll(&#34;.rwLabel&#34;).classed(&#34;text-selected&#34;,false);
             d3.selectAll(&#34;.clLabel&#34;).classed(&#34;text-selected&#34;,false);
         }
      })
      ;
});
&lt;/script&gt;

&lt;p&gt;
The data set is quite large with and there is much to still be explored, so stayed tuned to the site for additional posts!
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
Have feedback, questions, or want to see something else added? Check out the code I used to create &lt;a href=&#34;https://github.com/mikeleeco/mikeleeco.github.com/blob/master/_posts/2015-06-10-video-games-interactive.md&#34;&gt;this page&lt;/a&gt; or fork my repository to propose changes. &lt;a class=&#34;btn btn-primary&#34; href=&#34;https://github.com/mikeleeco/Mobygames-Scraper/fork&#34;&gt;Edit My Code&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kris Bryant Performance Projection</title>
      <link>/posts/2015-03-25-bryant-visualization/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2015-03-25-bryant-visualization/</guid>
      <description>&lt;body&gt;


&lt;div class=&#34;container-fluid&#34;&gt;

&lt;p&gt;A dynamic rCharts visualization displaying performance projections for Kris Bryant based on his 10 most similar career MiLB comparable players. Read more at &lt;a href=&#34;http://mikelee.co/posts/milb-similarity-scores/&#34; class=&#34;uri&#34;&gt;http://mikelee.co/posts/milb-similarity-scores/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can change the y-axis parameters by selecting the performance measure you’d like to visualize. Additionally, hover over the points to see player details, and select players in the legend to show or remove their data from the graph.&lt;/p&gt;
&lt;iframe src=&#34;/knitr/bryant.html&#34; , width=&#34;100%,&#34; height=&#34;550px&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;div class=&#34;table-responsive&#34;&gt;
&lt;table class=&#34;table table-hover&#34;&gt;
&lt;th&gt;
Year
&lt;/th&gt;
&lt;th&gt;
Age
&lt;/th&gt;
&lt;th&gt;
LevEq
&lt;/th&gt;
&lt;th&gt;
G
&lt;/th&gt;
&lt;th&gt;
PA
&lt;/th&gt;
&lt;th&gt;
AB
&lt;/th&gt;
&lt;th&gt;
R
&lt;/th&gt;
&lt;th&gt;
H
&lt;/th&gt;
&lt;th&gt;
X2B
&lt;/th&gt;
&lt;th&gt;
X3B
&lt;/th&gt;
&lt;th&gt;
HR
&lt;/th&gt;
&lt;th&gt;
RBI
&lt;/th&gt;
&lt;th&gt;
SB
&lt;/th&gt;
&lt;th&gt;
CS
&lt;/th&gt;
&lt;th&gt;
BB
&lt;/th&gt;
&lt;th&gt;
SO
&lt;/th&gt;
&lt;th&gt;
BA
&lt;/th&gt;
&lt;th&gt;
OBP
&lt;/th&gt;
&lt;th&gt;
SLG
&lt;/th&gt;
&lt;th&gt;
OPS
&lt;/th&gt;
&lt;th&gt;
Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2015
&lt;/td&gt;
&lt;td&gt;
23
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
130
&lt;/td&gt;
&lt;td&gt;
548
&lt;/td&gt;
&lt;td&gt;
489
&lt;/td&gt;
&lt;td&gt;
76
&lt;/td&gt;
&lt;td&gt;
138
&lt;/td&gt;
&lt;td&gt;
32
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
24
&lt;/td&gt;
&lt;td&gt;
83
&lt;/td&gt;
&lt;td&gt;
9
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
47
&lt;/td&gt;
&lt;td&gt;
105
&lt;/td&gt;
&lt;td&gt;
0.282
&lt;/td&gt;
&lt;td&gt;
0.35
&lt;/td&gt;
&lt;td&gt;
0.515
&lt;/td&gt;
&lt;td&gt;
0.865
&lt;/td&gt;
&lt;td&gt;
10
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2016
&lt;/td&gt;
&lt;td&gt;
24
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
132
&lt;/td&gt;
&lt;td&gt;
551
&lt;/td&gt;
&lt;td&gt;
492
&lt;/td&gt;
&lt;td&gt;
77
&lt;/td&gt;
&lt;td&gt;
140
&lt;/td&gt;
&lt;td&gt;
32
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
23
&lt;/td&gt;
&lt;td&gt;
77
&lt;/td&gt;
&lt;td&gt;
8
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
49
&lt;/td&gt;
&lt;td&gt;
107
&lt;/td&gt;
&lt;td&gt;
0.285
&lt;/td&gt;
&lt;td&gt;
0.354
&lt;/td&gt;
&lt;td&gt;
0.51
&lt;/td&gt;
&lt;td&gt;
0.864
&lt;/td&gt;
&lt;td&gt;
9
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2017
&lt;/td&gt;
&lt;td&gt;
25
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
115
&lt;/td&gt;
&lt;td&gt;
476
&lt;/td&gt;
&lt;td&gt;
424
&lt;/td&gt;
&lt;td&gt;
66
&lt;/td&gt;
&lt;td&gt;
121
&lt;/td&gt;
&lt;td&gt;
26
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
20
&lt;/td&gt;
&lt;td&gt;
72
&lt;/td&gt;
&lt;td&gt;
7
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
43
&lt;/td&gt;
&lt;td&gt;
89
&lt;/td&gt;
&lt;td&gt;
0.285
&lt;/td&gt;
&lt;td&gt;
0.356
&lt;/td&gt;
&lt;td&gt;
0.502
&lt;/td&gt;
&lt;td&gt;
0.859
&lt;/td&gt;
&lt;td&gt;
8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2018
&lt;/td&gt;
&lt;td&gt;
26
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
129
&lt;/td&gt;
&lt;td&gt;
543
&lt;/td&gt;
&lt;td&gt;
478
&lt;/td&gt;
&lt;td&gt;
76
&lt;/td&gt;
&lt;td&gt;
135
&lt;/td&gt;
&lt;td&gt;
31
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
22
&lt;/td&gt;
&lt;td&gt;
73
&lt;/td&gt;
&lt;td&gt;
7
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
56
&lt;/td&gt;
&lt;td&gt;
93
&lt;/td&gt;
&lt;td&gt;
0.282
&lt;/td&gt;
&lt;td&gt;
0.363
&lt;/td&gt;
&lt;td&gt;
0.498
&lt;/td&gt;
&lt;td&gt;
0.861
&lt;/td&gt;
&lt;td&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2019
&lt;/td&gt;
&lt;td&gt;
27
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
148
&lt;/td&gt;
&lt;td&gt;
635
&lt;/td&gt;
&lt;td&gt;
569
&lt;/td&gt;
&lt;td&gt;
92
&lt;/td&gt;
&lt;td&gt;
169
&lt;/td&gt;
&lt;td&gt;
36
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
28
&lt;/td&gt;
&lt;td&gt;
94
&lt;/td&gt;
&lt;td&gt;
15
&lt;/td&gt;
&lt;td&gt;
6
&lt;/td&gt;
&lt;td&gt;
58
&lt;/td&gt;
&lt;td&gt;
104
&lt;/td&gt;
&lt;td&gt;
0.297
&lt;/td&gt;
&lt;td&gt;
0.365
&lt;/td&gt;
&lt;td&gt;
0.522
&lt;/td&gt;
&lt;td&gt;
0.887
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2020
&lt;/td&gt;
&lt;td&gt;
28
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
151
&lt;/td&gt;
&lt;td&gt;
647
&lt;/td&gt;
&lt;td&gt;
574
&lt;/td&gt;
&lt;td&gt;
87
&lt;/td&gt;
&lt;td&gt;
174
&lt;/td&gt;
&lt;td&gt;
38
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
25
&lt;/td&gt;
&lt;td&gt;
94
&lt;/td&gt;
&lt;td&gt;
11
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
64
&lt;/td&gt;
&lt;td&gt;
109
&lt;/td&gt;
&lt;td&gt;
0.303
&lt;/td&gt;
&lt;td&gt;
0.376
&lt;/td&gt;
&lt;td&gt;
0.51
&lt;/td&gt;
&lt;td&gt;
0.886
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2021
&lt;/td&gt;
&lt;td&gt;
29
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
127
&lt;/td&gt;
&lt;td&gt;
532
&lt;/td&gt;
&lt;td&gt;
475
&lt;/td&gt;
&lt;td&gt;
70
&lt;/td&gt;
&lt;td&gt;
130
&lt;/td&gt;
&lt;td&gt;
26
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
20
&lt;/td&gt;
&lt;td&gt;
77
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
47
&lt;/td&gt;
&lt;td&gt;
96
&lt;/td&gt;
&lt;td&gt;
0.274
&lt;/td&gt;
&lt;td&gt;
0.343
&lt;/td&gt;
&lt;td&gt;
0.472
&lt;/td&gt;
&lt;td&gt;
0.815
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2022
&lt;/td&gt;
&lt;td&gt;
30
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
143
&lt;/td&gt;
&lt;td&gt;
591
&lt;/td&gt;
&lt;td&gt;
525
&lt;/td&gt;
&lt;td&gt;
81
&lt;/td&gt;
&lt;td&gt;
141
&lt;/td&gt;
&lt;td&gt;
32
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
21
&lt;/td&gt;
&lt;td&gt;
81
&lt;/td&gt;
&lt;td&gt;
10
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
56
&lt;/td&gt;
&lt;td&gt;
104
&lt;/td&gt;
&lt;td&gt;
0.269
&lt;/td&gt;
&lt;td&gt;
0.345
&lt;/td&gt;
&lt;td&gt;
0.461
&lt;/td&gt;
&lt;td&gt;
0.806
&lt;/td&gt;
&lt;td&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2023
&lt;/td&gt;
&lt;td&gt;
31
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
159
&lt;/td&gt;
&lt;td&gt;
696
&lt;/td&gt;
&lt;td&gt;
620
&lt;/td&gt;
&lt;td&gt;
98
&lt;/td&gt;
&lt;td&gt;
163
&lt;/td&gt;
&lt;td&gt;
28
&lt;/td&gt;
&lt;td&gt;
6
&lt;/td&gt;
&lt;td&gt;
30
&lt;/td&gt;
&lt;td&gt;
93
&lt;/td&gt;
&lt;td&gt;
9
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
64
&lt;/td&gt;
&lt;td&gt;
120
&lt;/td&gt;
&lt;td&gt;
0.263
&lt;/td&gt;
&lt;td&gt;
0.336
&lt;/td&gt;
&lt;td&gt;
0.473
&lt;/td&gt;
&lt;td&gt;
0.808
&lt;/td&gt;
&lt;td&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2024
&lt;/td&gt;
&lt;td&gt;
32
&lt;/td&gt;
&lt;td&gt;
4
&lt;/td&gt;
&lt;td&gt;
118
&lt;/td&gt;
&lt;td&gt;
440
&lt;/td&gt;
&lt;td&gt;
380
&lt;/td&gt;
&lt;td&gt;
48
&lt;/td&gt;
&lt;td&gt;
93
&lt;/td&gt;
&lt;td&gt;
22
&lt;/td&gt;
&lt;td&gt;
1
&lt;/td&gt;
&lt;td&gt;
14
&lt;/td&gt;
&lt;td&gt;
63
&lt;/td&gt;
&lt;td&gt;
3
&lt;/td&gt;
&lt;td&gt;
1
&lt;/td&gt;
&lt;td&gt;
46
&lt;/td&gt;
&lt;td&gt;
60
&lt;/td&gt;
&lt;td&gt;
0.245
&lt;/td&gt;
&lt;td&gt;
0.327
&lt;/td&gt;
&lt;td&gt;
0.418
&lt;/td&gt;
&lt;td&gt;
0.745
&lt;/td&gt;
&lt;td&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Be sure to bookmark my site to check out future visualizations!&lt;/p&gt;


&lt;/div&gt;

&lt;script&gt;

// add bootstrap table styles to pandoc tables
$(document).ready(function () {
  $(&#39;tr.header&#39;).parent(&#39;thead&#39;).parent(&#39;table&#39;).addClass(&#39;table table-condensed&#39;);
});

&lt;/script&gt;

&lt;!-- dynamically load mathjax for compatibility with self-contained --&gt;
&lt;script&gt;
  (function () {
    var script = document.createElement(&#34;script&#34;);
    script.type = &#34;text/javascript&#34;;
    script.src  = &#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;;
    document.getElementsByTagName(&#34;head&#34;)[0].appendChild(script);
  })();
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Working with Minor League Similarity Scores</title>
      <link>/posts/2015-03-25-milb-similarity-scores/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2015-03-25-milb-similarity-scores/</guid>
      <description>&lt;p&gt;&lt;blockquote&gt;
There are some people who see baseball players that way-each one is unique, absolutely not interchangeable with another. I don&#39;t deny the validity of that approach-but if you take that tack, then you can&#39;t turn around and argue that your player should be in the Hall of Fame because his numbers are just as good as this other player&#39;s. &#34;Similarity&#34; is a complex concept, and two players who are not statistically similar may be profoundly similar in some other way...players who have similar primary characteristics will tend to have similar secondary characteristics as well.

&lt;p&gt; - Bill James in &lt;a href=&#34;https://books.google.com/books?id=f_v8RmhGjekC&amp;pg=PT101&amp;dq=similarity+score+bill+james&amp;hl=en&amp;sa=X&amp;ei=lmIAVcabOsu4ggTAkoS4DA&amp;ved=0CDYQ6AEwBA#v=onepage&amp;q=similarity%20score%20bill%20james&amp;f=false&#34;&gt;Whatever Happened to the Hall of Fame?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Similarity scores were created by Bill James to compare the careers of Hall of Fame eligible players.In  In the most basic sense, similarity scores use aggregated performance statistics to compare a player&amp;rsquo;s worth for induction into the Hall of Fame. Projection systems follow from this method: Steamer, PECOTA, Marcel, ZiPS, and others use some combination of a player&amp;rsquo;s recent performance, usually the last 3-4 seasons, to project future performance. Depending on the method, a player&amp;rsquo;s base statistics are then modified using typical aging curves, linear weights, regression, and numerous other factors. Notably, PECOTA uses 3 year performance statistics of &lt;i&gt;comparable&lt;/i&gt; players, using nearest-neighors analysis, to forecast a player&amp;rsquo;s future performance.&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
&#34;The PECOTA similarity scores are based primarily on looking at a three-year window of a pitcher’s performance. Thus, we might look at what a pitcher did from ages 35-37, and compare that against the most similar age 35-37 performances, after adjusting for parks, league effects, and a whole host of other things. This is different from the similarity scores you might see at baseball-reference.com or in other places, which attempt to evaluate the totality of a player’s career up to a given age.&#34;
&lt;p&gt;
&lt;a href=&#34;http://web.archive.org/web/20120205121306/http://www.baseballprospectus.com/unfiltered/?p=136&#34;&gt;Nate Silver&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;One of Silver&amp;rsquo;s first explanations of &lt;a href=&#34;http://www.baseballprospectus.com/article.php?articleid=2659&#34;&gt;PECOTA&amp;rsquo;s forecasting method&lt;/a&gt; details the value in projecting a minor league player&amp;rsquo;s future career based on the career performance of their comparisons. Teams would be remiss to not consider what a player&amp;rsquo;s future statistics might look like based on their previous performance. PECOTA has created a projection system that models minor league players better than it&amp;rsquo;s competitors utilizing the comparable player&amp;rsquo;s model. Let&amp;rsquo;s use &lt;a href=&#34;http://mikelee.co/milb-scraper-with-rvest/&#34;&gt;our minor league database&lt;/a&gt; to investigate minor league similarity scores and create projections for a notable minor league player.&lt;/p&gt;

&lt;h1&gt;&lt;a href=&#34;http://www.baseball-reference.com/about/similarity.shtml&#34;&gt;Bill James Similarity Scores&lt;/a&gt;&lt;/h1&gt;

&lt;h3&gt;Similarities - Career&lt;/h3&gt;

&lt;p&gt;James&amp;rsquo; Similarity Score model was designed for major league careers, but let&amp;rsquo;s see how the model holds for minor league careers. The dataset includes minor league statistics from 2000-2014:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;table-responsive&#34;&gt;&lt;table class=&#34;table table-hover&#34; width=&#34;100%&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;th&gt;LevEq&lt;/th&gt;&lt;th&gt;G&lt;/th&gt;&lt;th&gt;PA&lt;/th&gt;&lt;th&gt;AB&lt;/th&gt;&lt;th&gt;R&lt;/th&gt;&lt;th&gt;H&lt;/th&gt;&lt;th&gt;X2B&lt;/th&gt;&lt;th&gt;X3B&lt;/th&gt;&lt;th&gt;HR&lt;/th&gt;&lt;th&gt;RBI&lt;/th&gt;&lt;th&gt;SB&lt;/th&gt;&lt;th&gt;CS&lt;/th&gt;&lt;th&gt;BB&lt;/th&gt;&lt;th&gt;SO&lt;/th&gt;&lt;th&gt;BA&lt;/th&gt;&lt;th&gt;OBP&lt;/th&gt;&lt;th&gt;SLG&lt;/th&gt;&lt;th&gt;OPS&lt;/th&gt;&lt;th&gt;TB&lt;/th&gt;&lt;th&gt;SS&lt;/th&gt;&lt;/tr&gt;
 &lt;tr class=&#34;success&#34;&gt;&lt;td&gt;Kris Bryant&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1.58&lt;/td&gt;&lt;td&gt;174&lt;/td&gt;&lt;td&gt;740&lt;/td&gt;&lt;td&gt;620&lt;/td&gt;&lt;td&gt;140&lt;/td&gt;&lt;td&gt;203&lt;/td&gt;&lt;td&gt;48&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;52&lt;/td&gt;&lt;td&gt;142&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt;197&lt;/td&gt;&lt;td&gt;0.327&lt;/td&gt;&lt;td&gt;0.428&lt;/td&gt;&lt;td&gt;0.666&lt;/td&gt;&lt;td&gt;1.094&lt;/td&gt;&lt;td&gt;413&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Ryan Braun&lt;/td&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;1.67&lt;/td&gt;&lt;td&gt;199&lt;/td&gt;&lt;td&gt;864&lt;/td&gt;&lt;td&gt;767&lt;/td&gt;&lt;td&gt;131&lt;/td&gt;&lt;td&gt;240&lt;/td&gt;&lt;td&gt;61&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;42&lt;/td&gt;&lt;td&gt;144&lt;/td&gt;&lt;td&gt;34&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;70&lt;/td&gt;&lt;td&gt;151&lt;/td&gt;&lt;td&gt;0.313&lt;/td&gt;&lt;td&gt;0.375&lt;/td&gt;&lt;td&gt;0.572&lt;/td&gt;&lt;td&gt;0.947&lt;/td&gt;&lt;td&gt;439&lt;/td&gt;&lt;td&gt;926&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Alex Gordon*&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;1.89&lt;/td&gt;&lt;td&gt;235&lt;/td&gt;&lt;td&gt;1061&lt;/td&gt;&lt;td&gt;867&lt;/td&gt;&lt;td&gt;199&lt;/td&gt;&lt;td&gt;278&lt;/td&gt;&lt;td&gt;69&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;48&lt;/td&gt;&lt;td&gt;170&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;td&gt;212&lt;/td&gt;&lt;td&gt;0.321&lt;/td&gt;&lt;td&gt;0.438&lt;/td&gt;&lt;td&gt;0.578&lt;/td&gt;&lt;td&gt;1.016&lt;/td&gt;&lt;td&gt;501&lt;/td&gt;&lt;td&gt;906&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Kelvin Diaz&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;182&lt;/td&gt;&lt;td&gt;765&lt;/td&gt;&lt;td&gt;639&lt;/td&gt;&lt;td&gt;117&lt;/td&gt;&lt;td&gt;213&lt;/td&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;147&lt;/td&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;92&lt;/td&gt;&lt;td&gt;0.333&lt;/td&gt;&lt;td&gt;0.426&lt;/td&gt;&lt;td&gt;0.532&lt;/td&gt;&lt;td&gt;0.958&lt;/td&gt;&lt;td&gt;340&lt;/td&gt;&lt;td&gt;903&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Jake Lamb*&lt;/td&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;244&lt;/td&gt;&lt;td&gt;1079&lt;/td&gt;&lt;td&gt;920&lt;/td&gt;&lt;td&gt;158&lt;/td&gt;&lt;td&gt;295&lt;/td&gt;&lt;td&gt;83&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;37&lt;/td&gt;&lt;td&gt;193&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;127&lt;/td&gt;&lt;td&gt;229&lt;/td&gt;&lt;td&gt;0.321&lt;/td&gt;&lt;td&gt;0.406&lt;/td&gt;&lt;td&gt;0.553&lt;/td&gt;&lt;td&gt;0.959&lt;/td&gt;&lt;td&gt;509&lt;/td&gt;&lt;td&gt;902&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;D.J. Peterson&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1.25&lt;/td&gt;&lt;td&gt;178&lt;/td&gt;&lt;td&gt;777&lt;/td&gt;&lt;td&gt;703&lt;/td&gt;&lt;td&gt;119&lt;/td&gt;&lt;td&gt;210&lt;/td&gt;&lt;td&gt;42&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;44&lt;/td&gt;&lt;td&gt;158&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;65&lt;/td&gt;&lt;td&gt;158&lt;/td&gt;&lt;td&gt;0.299&lt;/td&gt;&lt;td&gt;0.362&lt;/td&gt;&lt;td&gt;0.552&lt;/td&gt;&lt;td&gt;0.914&lt;/td&gt;&lt;td&gt;388&lt;/td&gt;&lt;td&gt;896&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Matt Williams&lt;/td&gt;&lt;td&gt;36&lt;/td&gt;&lt;td&gt;2.17&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;71&lt;/td&gt;&lt;td&gt;65&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;0.338&lt;/td&gt;&lt;td&gt;0.394&lt;/td&gt;&lt;td&gt;0.646&lt;/td&gt;&lt;td&gt;1.04&lt;/td&gt;&lt;td&gt;42&lt;/td&gt;&lt;td&gt;894&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Evan Longoria&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;2.37&lt;/td&gt;&lt;td&gt;219&lt;/td&gt;&lt;td&gt;937&lt;/td&gt;&lt;td&gt;803&lt;/td&gt;&lt;td&gt;145&lt;/td&gt;&lt;td&gt;238&lt;/td&gt;&lt;td&gt;43&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;160&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;170&lt;/td&gt;&lt;td&gt;0.296&lt;/td&gt;&lt;td&gt;0.385&lt;/td&gt;&lt;td&gt;0.528&lt;/td&gt;&lt;td&gt;0.913&lt;/td&gt;&lt;td&gt;424&lt;/td&gt;&lt;td&gt;890&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Jose Fernandez&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;td&gt;1052&lt;/td&gt;&lt;td&gt;920&lt;/td&gt;&lt;td&gt;169&lt;/td&gt;&lt;td&gt;287&lt;/td&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;41&lt;/td&gt;&lt;td&gt;182&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;184&lt;/td&gt;&lt;td&gt;0.312&lt;/td&gt;&lt;td&gt;0.389&lt;/td&gt;&lt;td&gt;0.537&lt;/td&gt;&lt;td&gt;0.926&lt;/td&gt;&lt;td&gt;494&lt;/td&gt;&lt;td&gt;889&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Albert Pujols&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;1.67&lt;/td&gt;&lt;td&gt;133&lt;/td&gt;&lt;td&gt;544&lt;/td&gt;&lt;td&gt;490&lt;/td&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;154&lt;/td&gt;&lt;td&gt;41&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;0.314&lt;/td&gt;&lt;td&gt;0.378&lt;/td&gt;&lt;td&gt;0.543&lt;/td&gt;&lt;td&gt;0.921&lt;/td&gt;&lt;td&gt;266&lt;/td&gt;&lt;td&gt;887&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Pedro Feliz&lt;/td&gt;&lt;td&gt;36&lt;/td&gt;&lt;td&gt;2.5&lt;/td&gt;&lt;td&gt;156&lt;/td&gt;&lt;td&gt;646&lt;/td&gt;&lt;td&gt;606&lt;/td&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt;174&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;38&lt;/td&gt;&lt;td&gt;119&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;31&lt;/td&gt;&lt;td&gt;110&lt;/td&gt;&lt;td&gt;0.287&lt;/td&gt;&lt;td&gt;0.321&lt;/td&gt;&lt;td&gt;0.546&lt;/td&gt;&lt;td&gt;0.867&lt;/td&gt;&lt;td&gt;331&lt;/td&gt;&lt;td&gt;883&lt;/td&gt;&lt;/tr&gt;
 &lt;/table&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You might have heard of a few of those names. The issue with these similarities is that they encompass a player&amp;rsquo;s &lt;i&gt;career&lt;/i&gt; minor league statistics; we&amp;rsquo;re more interested in the performance of Bryant&amp;rsquo;s same-aged peers.&lt;/p&gt;

&lt;h3&gt;Similarities - Age&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see how he compares to other 22 year old players:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;table-responsive&#34;&gt;&lt;table class=&#34;table table-hover&#34;&gt;
&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;th&gt;LevEq&lt;/th&gt;&lt;th&gt;G&lt;/th&gt;&lt;th&gt;PA&lt;/th&gt;&lt;th&gt;AB&lt;/th&gt;&lt;th&gt;R&lt;/th&gt;&lt;th&gt;H&lt;/th&gt;&lt;th&gt;X2B&lt;/th&gt;&lt;th&gt;X3B&lt;/th&gt;&lt;th&gt;HR&lt;/th&gt;&lt;th&gt;RBI&lt;/th&gt;&lt;th&gt;SB&lt;/th&gt;&lt;th&gt;CS&lt;/th&gt;&lt;th&gt;BB&lt;/th&gt;&lt;th&gt;SO&lt;/th&gt;&lt;th&gt;BA&lt;/th&gt;&lt;th&gt;OBP&lt;/th&gt;&lt;th&gt;SLG&lt;/th&gt;&lt;th&gt;OPS&lt;/th&gt;&lt;th&gt;TB&lt;/th&gt;&lt;th&gt;SS&lt;/th&gt;&lt;/tr&gt;
 &lt;tr class=&#34;success&#34;&gt;&lt;td&gt;Kris Bryant&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;2.5&lt;/td&gt;&lt;td&gt;174&lt;/td&gt;&lt;td&gt;740&lt;/td&gt;&lt;td&gt;620&lt;/td&gt;&lt;td&gt;140&lt;/td&gt;&lt;td&gt;203&lt;/td&gt;&lt;td&gt;48&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;52&lt;/td&gt;&lt;td&gt;142&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;97&lt;/td&gt;&lt;td&gt;197&lt;/td&gt;&lt;td&gt;0.327&lt;/td&gt;&lt;td&gt;0.428&lt;/td&gt;&lt;td&gt;0.666&lt;/td&gt;&lt;td&gt;1.095&lt;/td&gt;&lt;td&gt;413&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Alex Gordon*&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;130&lt;/td&gt;&lt;td&gt;576&lt;/td&gt;&lt;td&gt;486&lt;/td&gt;&lt;td&gt;111&lt;/td&gt;&lt;td&gt;158&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;101&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;72&lt;/td&gt;&lt;td&gt;113&lt;/td&gt;&lt;td&gt;0.325&lt;/td&gt;&lt;td&gt;0.427&lt;/td&gt;&lt;td&gt;0.588&lt;/td&gt;&lt;td&gt;1.016&lt;/td&gt;&lt;td&gt;286&lt;/td&gt;&lt;td&gt;932&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Corey Dickerson*&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;175&lt;/td&gt;&lt;td&gt;743&lt;/td&gt;&lt;td&gt;659&lt;/td&gt;&lt;td&gt;132&lt;/td&gt;&lt;td&gt;204&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;45&lt;/td&gt;&lt;td&gt;148&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;67&lt;/td&gt;&lt;td&gt;150&lt;/td&gt;&lt;td&gt;0.31&lt;/td&gt;&lt;td&gt;0.38&lt;/td&gt;&lt;td&gt;0.631&lt;/td&gt;&lt;td&gt;1.011&lt;/td&gt;&lt;td&gt;416&lt;/td&gt;&lt;td&gt;924&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Nick Akins&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;126&lt;/td&gt;&lt;td&gt;548&lt;/td&gt;&lt;td&gt;472&lt;/td&gt;&lt;td&gt;94&lt;/td&gt;&lt;td&gt;152&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;120&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;135&lt;/td&gt;&lt;td&gt;0.322&lt;/td&gt;&lt;td&gt;0.407&lt;/td&gt;&lt;td&gt;0.64&lt;/td&gt;&lt;td&gt;1.047&lt;/td&gt;&lt;td&gt;302&lt;/td&gt;&lt;td&gt;921&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Kevin Mench&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;132&lt;/td&gt;&lt;td&gt;583&lt;/td&gt;&lt;td&gt;491&lt;/td&gt;&lt;td&gt;118&lt;/td&gt;&lt;td&gt;164&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;121&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;78&lt;/td&gt;&lt;td&gt;72&lt;/td&gt;&lt;td&gt;0.334&lt;/td&gt;&lt;td&gt;0.427&lt;/td&gt;&lt;td&gt;0.615&lt;/td&gt;&lt;td&gt;1.042&lt;/td&gt;&lt;td&gt;302&lt;/td&gt;&lt;td&gt;909&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Ryan Braun&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1.5&lt;/td&gt;&lt;td&gt;165&lt;/td&gt;&lt;td&gt;730&lt;/td&gt;&lt;td&gt;650&lt;/td&gt;&lt;td&gt;103&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;122&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;55&lt;/td&gt;&lt;td&gt;140&lt;/td&gt;&lt;td&gt;0.308&lt;/td&gt;&lt;td&gt;0.367&lt;/td&gt;&lt;td&gt;0.549&lt;/td&gt;&lt;td&gt;0.917&lt;/td&gt;&lt;td&gt;357&lt;/td&gt;&lt;td&gt;907&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Mark Teixeira#&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1.5&lt;/td&gt;&lt;td&gt;86&lt;/td&gt;&lt;td&gt;375&lt;/td&gt;&lt;td&gt;321&lt;/td&gt;&lt;td&gt;63&lt;/td&gt;&lt;td&gt;102&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;69&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt;60&lt;/td&gt;&lt;td&gt;0.318&lt;/td&gt;&lt;td&gt;0.413&lt;/td&gt;&lt;td&gt;0.592&lt;/td&gt;&lt;td&gt;1.005&lt;/td&gt;&lt;td&gt;190&lt;/td&gt;&lt;td&gt;904&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Jake Lamb*&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;td&gt;136&lt;/td&gt;&lt;td&gt;619&lt;/td&gt;&lt;td&gt;528&lt;/td&gt;&lt;td&gt;95&lt;/td&gt;&lt;td&gt;167&lt;/td&gt;&lt;td&gt;44&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;109&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;126&lt;/td&gt;&lt;td&gt;0.316&lt;/td&gt;&lt;td&gt;0.405&lt;/td&gt;&lt;td&gt;0.544&lt;/td&gt;&lt;td&gt;0.949&lt;/td&gt;&lt;td&gt;287&lt;/td&gt;&lt;td&gt;902&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;James Darnell&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;142&lt;/td&gt;&lt;td&gt;630&lt;/td&gt;&lt;td&gt;524&lt;/td&gt;&lt;td&gt;89&lt;/td&gt;&lt;td&gt;167&lt;/td&gt;&lt;td&gt;41&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;98&lt;/td&gt;&lt;td&gt;101&lt;/td&gt;&lt;td&gt;0.319&lt;/td&gt;&lt;td&gt;0.428&lt;/td&gt;&lt;td&gt;0.542&lt;/td&gt;&lt;td&gt;0.97&lt;/td&gt;&lt;td&gt;284&lt;/td&gt;&lt;td&gt;901&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Jedd Gyorko&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1.5&lt;/td&gt;&lt;td&gt;208&lt;/td&gt;&lt;td&gt;945&lt;/td&gt;&lt;td&gt;844&lt;/td&gt;&lt;td&gt;154&lt;/td&gt;&lt;td&gt;273&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;155&lt;/td&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;92&lt;/td&gt;&lt;td&gt;171&lt;/td&gt;&lt;td&gt;0.323&lt;/td&gt;&lt;td&gt;0.392&lt;/td&gt;&lt;td&gt;0.518&lt;/td&gt;&lt;td&gt;0.909&lt;/td&gt;&lt;td&gt;437&lt;/td&gt;&lt;td&gt;900&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Hunter Pence&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1.0&lt;/td&gt;&lt;td&gt;172&lt;/td&gt;&lt;td&gt;737&lt;/td&gt;&lt;td&gt;652&lt;/td&gt;&lt;td&gt;119&lt;/td&gt;&lt;td&gt;207&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;127&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;79&lt;/td&gt;&lt;td&gt;120&lt;/td&gt;&lt;td&gt;0.317&lt;/td&gt;&lt;td&gt;0.391&lt;/td&gt;&lt;td&gt;0.574&lt;/td&gt;&lt;td&gt;0.964&lt;/td&gt;&lt;td&gt;374&lt;/td&gt;&lt;td&gt;898&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Still a very impressive list. Using these similar players, lets take a play out of the PECOTA playbook and generate some basic projections without adjusting for outside effects (park factors, leagues, league-wide performance shifts, etc). By simply calculating the mean of these top 10 player comparables for each statistical category we can get a general idea of Bryant&amp;rsquo;s future performance.&lt;/p&gt;

&lt;h3&gt;10 Year Projection - Kris Bryant&lt;/h3&gt;

&lt;p&gt;&lt;div class=&#34;table-responsive&#34;&gt;&lt;table class=&#34;table table-hover&#34;&gt;&lt;th&gt;Year&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;th&gt;LevEq&lt;/th&gt;&lt;th&gt;G&lt;/th&gt;&lt;th&gt;PA&lt;/th&gt;&lt;th&gt;AB&lt;/th&gt;&lt;th&gt;R&lt;/th&gt;&lt;th&gt;H&lt;/th&gt;&lt;th&gt;X2B&lt;/th&gt;&lt;th&gt;X3B&lt;/th&gt;&lt;th&gt;HR&lt;/th&gt;&lt;th&gt;RBI&lt;/th&gt;&lt;th&gt;SB&lt;/th&gt;&lt;th&gt;CS&lt;/th&gt;&lt;th&gt;BB&lt;/th&gt;&lt;th&gt;SO&lt;/th&gt;&lt;th&gt;BA&lt;/th&gt;&lt;th&gt;OBP&lt;/th&gt;&lt;th&gt;SLG&lt;/th&gt;&lt;th&gt;OPS&lt;/th&gt;&lt;th&gt;Count&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2015&lt;/td&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;130&lt;/td&gt;&lt;td&gt;548&lt;/td&gt;&lt;td&gt;489&lt;/td&gt;&lt;td&gt;76&lt;/td&gt;&lt;td&gt;138&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;83&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;105&lt;/td&gt;&lt;td&gt;0.282&lt;/td&gt;&lt;td&gt;0.35&lt;/td&gt;&lt;td&gt;0.515&lt;/td&gt;&lt;td&gt;0.865&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2016&lt;/td&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;132&lt;/td&gt;&lt;td&gt;551&lt;/td&gt;&lt;td&gt;492&lt;/td&gt;&lt;td&gt;77&lt;/td&gt;&lt;td&gt;140&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;77&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;td&gt;107&lt;/td&gt;&lt;td&gt;0.285&lt;/td&gt;&lt;td&gt;0.354&lt;/td&gt;&lt;td&gt;0.51&lt;/td&gt;&lt;td&gt;0.864&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2017&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;115&lt;/td&gt;&lt;td&gt;476&lt;/td&gt;&lt;td&gt;424&lt;/td&gt;&lt;td&gt;66&lt;/td&gt;&lt;td&gt;121&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;72&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;43&lt;/td&gt;&lt;td&gt;89&lt;/td&gt;&lt;td&gt;0.285&lt;/td&gt;&lt;td&gt;0.356&lt;/td&gt;&lt;td&gt;0.502&lt;/td&gt;&lt;td&gt;0.859&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2018&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;129&lt;/td&gt;&lt;td&gt;543&lt;/td&gt;&lt;td&gt;478&lt;/td&gt;&lt;td&gt;76&lt;/td&gt;&lt;td&gt;135&lt;/td&gt;&lt;td&gt;31&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;73&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt;93&lt;/td&gt;&lt;td&gt;0.282&lt;/td&gt;&lt;td&gt;0.363&lt;/td&gt;&lt;td&gt;0.498&lt;/td&gt;&lt;td&gt;0.861&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2019&lt;/td&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;148&lt;/td&gt;&lt;td&gt;635&lt;/td&gt;&lt;td&gt;569&lt;/td&gt;&lt;td&gt;92&lt;/td&gt;&lt;td&gt;169&lt;/td&gt;&lt;td&gt;36&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;94&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;0.297&lt;/td&gt;&lt;td&gt;0.365&lt;/td&gt;&lt;td&gt;0.522&lt;/td&gt;&lt;td&gt;0.887&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2020&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;151&lt;/td&gt;&lt;td&gt;647&lt;/td&gt;&lt;td&gt;574&lt;/td&gt;&lt;td&gt;87&lt;/td&gt;&lt;td&gt;174&lt;/td&gt;&lt;td&gt;38&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;94&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;109&lt;/td&gt;&lt;td&gt;0.303&lt;/td&gt;&lt;td&gt;0.376&lt;/td&gt;&lt;td&gt;0.51&lt;/td&gt;&lt;td&gt;0.886&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2021&lt;/td&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;127&lt;/td&gt;&lt;td&gt;532&lt;/td&gt;&lt;td&gt;475&lt;/td&gt;&lt;td&gt;70&lt;/td&gt;&lt;td&gt;130&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;77&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;96&lt;/td&gt;&lt;td&gt;0.274&lt;/td&gt;&lt;td&gt;0.343&lt;/td&gt;&lt;td&gt;0.472&lt;/td&gt;&lt;td&gt;0.815&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2022&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;143&lt;/td&gt;&lt;td&gt;591&lt;/td&gt;&lt;td&gt;525&lt;/td&gt;&lt;td&gt;81&lt;/td&gt;&lt;td&gt;141&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;81&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;0.269&lt;/td&gt;&lt;td&gt;0.345&lt;/td&gt;&lt;td&gt;0.461&lt;/td&gt;&lt;td&gt;0.806&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2023&lt;/td&gt;&lt;td&gt;31&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;159&lt;/td&gt;&lt;td&gt;696&lt;/td&gt;&lt;td&gt;620&lt;/td&gt;&lt;td&gt;98&lt;/td&gt;&lt;td&gt;163&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;93&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;120&lt;/td&gt;&lt;td&gt;0.263&lt;/td&gt;&lt;td&gt;0.336&lt;/td&gt;&lt;td&gt;0.473&lt;/td&gt;&lt;td&gt;0.808&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;2024&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;118&lt;/td&gt;&lt;td&gt;440&lt;/td&gt;&lt;td&gt;380&lt;/td&gt;&lt;td&gt;48&lt;/td&gt;&lt;td&gt;93&lt;/td&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;63&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt;60&lt;/td&gt;&lt;td&gt;0.245&lt;/td&gt;&lt;td&gt;0.327&lt;/td&gt;&lt;td&gt;0.418&lt;/td&gt;&lt;td&gt;0.745&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3&gt;Lets take that table and visualize it! &lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&#34;http://ramnathv.github.io/rCharts&#34;&gt;rCharts&lt;/a&gt;, an interactive visualization package maintained by &lt;a href=&#34;https://github.com/ramnathv&#34;&gt;Ramnath Vaidyanathan&lt;/a&gt;, I created a Rmarkdown page with knitr displaying the projection data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/posts/2015-03-25-bryant-visualization/&#34;&gt;Have a look!&lt;/a&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&#34;well&#34;&gt;&lt;a class=&#34;btn btn-primary btn-lg btn-block&#34; href=&#34;/posts/2015-03-25-bryant-visualization/&#34;&gt;Bryant Projection Visualization&lt;/a&gt;&lt;/p&gt;&lt;/button&gt;&lt;/div&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Have feedback, questions, or want to see something else added? Check out the code I used to create &lt;a href=&#34;https://github.com/mikeleeco/mikeleeco.github.com/blob/master/_posts/2015-03-25-milb-similarity-scores.md&#34;&gt;this page&lt;/a&gt; or fork my repository to propose changes. &lt;a class=&#34;btn btn-primary&#34; href=&#34;https://github.com/mikeleeco/Kris-Bryant-Projection/fork&#34;&gt;Edit My Code&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Make a Minor League Baseball Database!</title>
      <link>/posts/2015-02-23-milb-scraper-with-rvest/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      <author>mdlee12@gmail.com (Michael Lee)</author>
      <guid>/posts/2015-02-23-milb-scraper-with-rvest/</guid>
      <description>&lt;p&gt;
Baseball is a game of numbers, some more accessible than others. Rates, averages, linear weights, aging curves, and WAR are only a few of the myriad statistics influencing decision makers in MLB franchises. An endless amount of data is accessible to the average fan at many sites, most notably the &lt;a href=&#34;http://www.seanlahman.com/baseball-archive/statistics/&#34;&gt;Lahman Baseball Database&lt;/a&gt;, which is the most robust catalog of MLB player statistics available to the public.
&lt;/p&gt;
&lt;p&gt;
One area of relatively limited accessibility to the average fan is statistics for Minor League players. Though player statistics by position, year, and team are available at many sites, a thorough catalog of MiLB data akin to the Lahman database is unavailable. I wonder who &lt;a href=&#34;http://www.baseball-reference.com/minors/player.cgi?id=bryant001kri&#34;&gt;Kris Bryant&lt;/a&gt; would be most similar to? &lt;/p&gt;

&lt;p&gt;&lt;p&gt;What do you mean Baseball Reference doesn&#39;t calculate similarity scores for minor league players?&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-success btn-lg btn-block&#34; href=&#34;https://www.youtube.com/watch?v=bnRrvOb0m-I&#34;&gt;As If Button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;h2&gt;Let&#39;s make our own damn database!&lt;/h2&gt;&lt;/strong&gt;  
&lt;/p&gt;

&lt;p&gt;To make our database we&amp;rsquo;re going to use &lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest&lt;/a&gt;, an R package designed by Hadley Wickham at RStudio [^1]. The package scrapes HTML from webpages and extracts it into readable data. Let&amp;rsquo;s load the necessary packages and go from there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#if you haven&#39;t done so already, install rvest from Wickham&#39;s github repository
# install.packages(&amp;quot;devtools&amp;quot;)
# install_github(&amp;quot;hadley/rvest&amp;quot;)
c(&#39;rvest&#39;,&#39;dplyr&#39;) -&amp;gt; packages #installs packages
lapply(packages, library, character.only = T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function below will construct each team&#39;s minor league website, for every desired year, and pull out the same table every time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# prep scraper
url &amp;lt;- &amp;quot;http://www.baseball-reference.com/minors/&amp;quot;
teams=c(&amp;quot;ARI&amp;quot;)
stats_table &amp;lt;- &#39;#team_batting.sortable.stats_table&#39;
stats_id &amp;lt;- paste0(stats_table,&#39; a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Let&#39;s start with the Arizona Diamondbacks batting statistics from 2012-2014. We&#39;ll call the data frame we&#39;re about to pull the variable &lt;strong&gt;&#34;minors_batting_ARI&#34;&lt;/strong&gt;. We&#39;re reconstructing the url &lt;code&gt;http://www.baseball-reference.com/minors/affiliate.cgi?id=ARI&amp;year=2014&lt;/code&gt; and instructing the scraper to pull the necessary data table and then repeat the process for next season. We&#39;re calling the pulled data table &#39;df&#39; for simplicity.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minors_batting_ARI &amp;lt;- data.frame()

  # for loop by teams and seasonfor (teams in teams){ 
  for (season in 2014:2012) {
    html &amp;lt;- paste(url,&amp;quot;affiliate.cgi?id=&amp;quot;,teams,&amp;quot;&amp;amp;year=&amp;quot;,season,sep=&amp;quot;&amp;quot;)

    # batting stats
    read_html(html) %&amp;gt;%
      html_nodes(stats_table) %&amp;gt;%
      html_table(header = T) %&amp;gt;%
      data.frame() %&amp;gt;%
      tbl_df() -&amp;gt; df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far our code will scrape the batting table from the team&#39;s minor league page, but we also need to extract each player&#39;s Minor League baseball-reference id using it&#39;s href. Isn&#39;t that right Chris Young? No. Not you, &lt;a href=&#34;http://www.baseball-reference.com/players/y/youngch04.shtml&#34;&gt;Chris Young&lt;/a&gt;. The other, lankier &lt;a href=&#34;http://www.baseball-reference.com/players/y/youngch03.shtml&#34;&gt;Chris Young&lt;/a&gt;. We&#39;re good man, no need to &lt;a href=&#34;http://youtu.be/1EiqELgKp5g?t=56s&#34;&gt;get angry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This portion of code extracts the attributes of the URL in the table and changes them into characters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    # player info
    read_html(html) %&amp;gt;%
      html_nodes(stats_id) %&amp;gt;%
      html_attr(name=&amp;quot;href&amp;quot;) %&amp;gt;% unlist %&amp;gt;% as.character -&amp;gt; min_playerid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using R formatting code we delete unnecessary rows and create a column called &lt;i&gt;bref_player_id&lt;/i&gt; to assign each player&amp;rsquo;s unique reference id. We&amp;rsquo;re trimming out characters from the href attributes we don&amp;rsquo;t need, leaving only the reference ids.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    # clean dataframe and add team and season info
    df &amp;lt;- df[1:nrow(df),]
    df &amp;lt;- df[!na.omit(df$Rk==&#39;Rk&#39;),]
    df$season &amp;lt;- c(season)
    df$teams &amp;lt;- c(teams)

    # remove url data
    min_playerid=gsub(&amp;quot;/register/player.cgi?id=&amp;quot;, &amp;quot;&amp;quot;, min_playerid,fixed = TRUE)
    df$min_playerid &amp;lt;- c(min_playerid)

    # bind to dataframe
    minors_batting_ARI &amp;lt;- rbind(minors_batting_ARI,df)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#to view the dataset and save it as a .csv in our working directory
View(minors_batting_ARI)
write.csv(minors_batting_ARI, &amp;quot;minors_batting_ARI.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we are! Arizona&#39;s minor league batting stats from 2012-2014! 824 instances may seem like too much, for only a three year period, but Baseball-reference.com doesn&#39;t aggregate a player&#39;s statistics by year; they do it by level. Therefore, some players may have multiple rows for the same season (aren&#39;t you glad we pulled out the reference id!) &lt;/p&gt;
&lt;div class=&#34;container&#34;&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/minors_batting_ARI.jpg&#34; class=&#34;img-responsive&#34;&gt;&lt;/figure&gt;&lt;/img&gt;
&lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;... let&#39;s take a left turn on &lt;a href=&#34;http://hardballtalk.nbcsports.com/2013/01/25/the-diamondbacks-are-travelling-down-grit-avenue-and-guts-boulevard-and-grind-parkway/&#34;&gt;Grind Parkway&lt;/a&gt; and pull in &lt;strong&gt;all MiLB batting statistics for 2014&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;MiLB Batting Stats for All Teams&lt;/h2&gt;

&lt;p&gt;First we&#39;ll need a list of baseball-reference&#39;s team codes. I&#39;ll do the dirty work and include franchise codes for each team since 1969 if you want to play with that data &lt;sup class=&#34;bootstrap-footnote&#34; data-text=&#34;For future investigations be aware that other pages of baseball reference use archived team codes such as MON (Montreal Expos) and CAL (California Angels).&#34;&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;teams=c(&amp;quot;ARI&amp;quot;,&amp;quot;ATL&amp;quot;,&amp;quot;BAL&amp;quot;,&amp;quot;BOS&amp;quot;,&amp;quot;CHC&amp;quot;,&amp;quot;CHW&amp;quot;,&amp;quot;CIN&amp;quot;,&amp;quot;CLE&amp;quot;,&amp;quot;COL&amp;quot;,&amp;quot;DET&amp;quot;,&amp;quot;HOU&amp;quot;,&amp;quot;KCR&amp;quot;,&amp;quot;ANA&amp;quot;,&amp;quot;LAD&amp;quot;,&amp;quot;FLA&amp;quot;,&amp;quot;MIL&amp;quot;,&amp;quot;MIN&amp;quot;,&amp;quot;NYM&amp;quot;,&amp;quot;NYY&amp;quot;,&amp;quot;OAK&amp;quot;,&amp;quot;PHI&amp;quot;,&amp;quot;PIT&amp;quot;,&amp;quot;SDP&amp;quot;,&amp;quot;SFG&amp;quot;,&amp;quot;SEA&amp;quot;,&amp;quot;STL&amp;quot;,&amp;quot;TBD&amp;quot;,&amp;quot;TEX&amp;quot;,&amp;quot;TOR&amp;quot;,&amp;quot;WSN&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;http://www.baseball-reference.com/minors/&amp;quot;
teams=c(&amp;quot;ARI&amp;quot;,&amp;quot;ATL&amp;quot;,&amp;quot;BAL&amp;quot;,&amp;quot;BOS&amp;quot;,&amp;quot;CHC&amp;quot;,&amp;quot;CHW&amp;quot;,&amp;quot;CIN&amp;quot;,&amp;quot;CLE&amp;quot;,&amp;quot;COL&amp;quot;,&amp;quot;DET&amp;quot;,&amp;quot;HOU&amp;quot;,&amp;quot;KCR&amp;quot;,&amp;quot;ANA&amp;quot;,&amp;quot;LAD&amp;quot;,&amp;quot;FLA&amp;quot;,&amp;quot;MIL&amp;quot;,&amp;quot;MIN&amp;quot;,&amp;quot;NYM&amp;quot;,&amp;quot;NYY&amp;quot;,&amp;quot;OAK&amp;quot;,&amp;quot;PHI&amp;quot;,&amp;quot;PIT&amp;quot;,&amp;quot;SDP&amp;quot;,&amp;quot;SFG&amp;quot;,&amp;quot;SEA&amp;quot;,&amp;quot;STL&amp;quot;,&amp;quot;TBD&amp;quot;,&amp;quot;TEX&amp;quot;,&amp;quot;TOR&amp;quot;,&amp;quot;WSN&amp;quot;)
stats_table &amp;lt;- &#39;#team_batting.sortable.stats_table&#39;
stats_id &amp;lt;- paste0(stats_table,&#39; a&#39;)
minors_batting &amp;lt;- data.frame()

# for loop by teams and season
for (teams in teams){ 
  for (season in 2014:2014) {
    html &amp;lt;- paste(url,&amp;quot;affiliate.cgi?id=&amp;quot;,teams,&amp;quot;&amp;amp;year=&amp;quot;,season,sep=&amp;quot;&amp;quot;)

    # batting stats
    read_html(html) %&amp;gt;%
      html_nodes(stats_table) %&amp;gt;%
      html_table(header = T) %&amp;gt;%
      data.frame() %&amp;gt;%
      tbl_df() -&amp;gt; df

    # player info
    read_html(html) %&amp;gt;%
      html_nodes(stats_id) %&amp;gt;%
      html_attr(name=&amp;quot;href&amp;quot;) %&amp;gt;% unlist %&amp;gt;% as.character -&amp;gt; min_playerid

    # clean dataframe and add team and season info
    df &amp;lt;- df[1:nrow(df),]
    df &amp;lt;- df[!na.omit(df$Rk==&#39;Rk&#39;),]
    df$season &amp;lt;- c(season)
    df$teams &amp;lt;- c(teams)

    # remove url data
    min_playerid=gsub(&amp;quot;/register/player.cgi?id=&amp;quot;, &amp;quot;&amp;quot;, min_playerid,fixed = TRUE)
    df$min_playerid &amp;lt;- c(min_playerid)

    # bind to 
    minors_batting &amp;lt;- rbind(minors_batting,df)
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query other seasons or teams, simply change the information selected. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;teams=c(&amp;quot;OAK&amp;quot;,&amp;quot;TBD&amp;quot;)

stats_table &amp;lt;- &#39;#team_batting.sortable.stats_table&#39;
stats_id &amp;lt;- paste0(stats_table,&#39; a&#39;)
minors_batting &amp;lt;- data.frame()

for (teams in teams){ for (season in 2010:2005) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will pull in minor league batting statistics for Oakland and Tampa Bay for the years 2005-2010.&lt;/p&gt;

&lt;p&gt;Lets clean up all of the stray objects besides the &lt;code&gt;minors_batting&lt;/code&gt; dataframe in our working environment before moving on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rm(list=setdiff(ls(), &amp;quot;minors_batting&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Obligatory heads up!&lt;/h3&gt;

&lt;p&gt;This code is querying 30 distinct URLs for every season, so multi-season outputs can take some time. Here are my system.time indicators for the above function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/sys_time_MiLB.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;The query takes about a 1:45 for every league-wide season pull. &lt;strong&gt;Pro-Tip!&lt;/strong&gt; Get that query going and have some breakfast/lunch/dinner.&lt;/p&gt;

&lt;h4&gt;Coming up...&lt;/h4&gt;

&lt;p&gt;Stay tuned to the site for another post about similarity scores and to learn more about Kris Bryant&amp;rsquo;s best comparisons.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Update (10/3/2017)&lt;/h1&gt;

&lt;p&gt;Baseball Reference has made slight alterations to their website that has deprecated the code above as originally published. An updated version of the scraper code can be found &lt;a href=&#34;/baseballReferenceScraperUpdate.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Have feedback, questions, or want to see something else added? Check out my &lt;a href=&#34;https://github.com/mikeleeco/Baseball-Reference-Scrapers&#34;&gt;MiLB Scraper on github&lt;/a&gt; or fork my repository to propose changes.  &lt;a class=&#34;btn btn-primary&#34; href=&#34;https://github.com/mikeleeco/Baseball-Reference-Scrapers/fork&#34;&gt;Edit My Code&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>