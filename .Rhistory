# Automated-retrieval info: https://help.waterdata.usgs.gov/faq/automated-retrievals
#
# Contact:   gs-w_support_nwisweb@usgs.gov
# retrieved: 2018-03-15 12:29:46 EDT       (nadww01)
#
# Data for the following 1 site(s) are contained in this file
#    USGS 09405500 NORTH FORK VIRGIN RIVER NEAR SPRINGDALE, UT
# -----------------------------------------------------------------------------------
#
# Data provided for site 09405500
#            TS   parameter     Description
#        144196       00060     Discharge, cubic feet per second
#
# Data-value qualification codes included in this output:
#     A  Approved for publication -- Processing and review completed.
#     P  Provisional data subject to revision.
#     0  UNDEF
#    91  Daily mean calculated from data on this day matches published daily mean within 1 percent
#    92  Daily mean calculated from data on this day matches published daily mean within 5 percent
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(animation)
library(grid)
x <- read.csv("website/narrows/narrows.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- x[1:530086,]
x2 <- read.csv("website/narrows/narrows2.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- rbind(x,x2)
rm(x2)
x <- x %>% separate(datetime, c("date", "time"), " ", extra = "merge")
x$date <- mdy(x$date)
dischargeByDay <- x %>% mutate(day = yday(date)) %>% group_by(day) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
dischargeByDay$day <- as.Date(as_date(dischargeByDay$day))
dischargeByDay$month <- month(dischargeByDay$day, label = TRUE)
dischargeByDayYear <- x %>% mutate(day = yday(date),year = year(date)) %>% group_by(day,year) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
dischargeByDayYear$day <- as.Date(as_date(dischargeByDayYear$day))
dischargeByDayYear$month <- month(dischargeByDayYear$day, label = TRUE)
theme_white <- theme(text = element_text(family="Open Sans", color = "black"),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.title.x=element_text(size=26, family = "Open Sans", margin = margin(t=15, b = 0)),
axis.title.y=element_text(size=26, family = "Open Sans", margin = margin(r=15, l = 5)),
axis.text.x=element_text(size=22, hjust = 0, family = "Open Sans Light"),
axis.text.y=element_text(size=22, family = "Open Sans Light"),
axis.ticks = element_blank(),
plot.title=element_text(size=34,family = "Open Sans Extrabold",hjust= 0,lineheight=1, margin = margin(t = 15)),
plot.subtitle=element_text(size=26, margin = margin(t=15, b = 5),family = "Open Sans"),
plot.caption=element_text(size=18, hjust = 0,margin=margin(t=15, b = 15),lineheight=1.15, family = "Open Sans"),
legend.position="none"
)
# gg <- ggplot(dischargeByDay, aes(x = day, y = avgDischarge, group = 1)) +
#   geom_point(aes(x = day, y = avgDischarge), alpha = .1) +
#   stat_smooth(aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 20)) +
#   geom_segment(x = 1, xend = 366, y = 150,yend = 150, color= "red", linetype = 2) +
#   scale_y_continuous(limits = c(0, 350), expand = c(0,0)) +
#   scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0),limits = c(min(dischargeByDay$day),max(dischargeByDay$day))) +
#   labs(title = "Mean Flow of the VIRGIN RIVER NARROWS by day (1993 - 2018)",
#           subtitle = "If the river is flowing at over 150 Cubic Feet per Second (CFS) the narrows is closed",
#           caption = "Data Accessed 3/16/2018, retrieved via https://nwis.waterdata.usgs.gov/usa/nwis/uv/") +
#   theme_bw() + theme(plot.caption = element_text(hjust=0))
#
gg <- ggplot(dischargeByDay, aes(x = day, y = avgDischarge, group = 1)) +
scale_y_continuous(limits = c(0, 350), expand = c(0,0)) +
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0),limits = c(min(dischargeByDay$day)-1,max(dischargeByDay$day)-2)) +
labs(title = "Mean Flow of the VIRGIN RIVER NARROWS by day (1993 - 2018)",
subtitle = "If the river is flowing at over 150 Cubic Feet per Second (CFS) the narrows is closed",
caption = "Data Accessed 3/16/2018, retrieved via https://nwis.waterdata.usgs.gov/usa/nwis/uv/") +
xlab("Date") + ylab("Average Discharge") +
theme_bw() + theme_white
gifReplicate <- function(x) {
grid.newpage()
grid.draw(x)
}
yDates <- seq(from = 0, to = max(as.numeric(dischargeByDay$day)), by = 3)
yDates[1] <- 1
saveGIF({
for (i in yDates) {
gg2 <- gg + geom_point(data = subset(dischargeByDay, day <=i), aes(x = day, y = avgDischarge), alpha = .1)
g <- ggplotGrob(gg2)
g$layout$l[g$layout$name == "title"] <- 3
g$layout$l[g$layout$name == "caption"] <- 3
g$layout$l[g$layout$name == "subtitle"] <- 3
grid::grid.draw(g);
grid.newpage()
}
grid::grid.draw(g);
replicate(10,gifReplicate(g))
for (i in seq(from =1, to = 366, by = 7)) {
gg3 <- gg2 + geom_segment(x = 1, xend = i, y = 150,yend = 150, color= "red", linetype = 2)
g <- ggplotGrob(gg3)
g$layout$l[g$layout$name == "title"] <- 3
g$layout$l[g$layout$name == "caption"] <- 3
g$layout$l[g$layout$name == "subtitle"] <- 3
grid::grid.draw(g);
grid.newpage()
}
for (i in yDates) {
gg4 <- gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 20))
g <- ggplotGrob(gg4)
g$layout$l[g$layout$name == "title"] <- 3
g$layout$l[g$layout$name == "caption"] <- 3
g$layout$l[g$layout$name == "subtitle"] <- 3
grid::grid.draw(g);
grid.newpage()
}
grid::grid.draw(g);
replicate(100,gifReplicate(g))
# grid.draw(gg4)
# geom_hline(yintercept = 150, color= "red", linetype = 2) +
#   geom_line(aes(x=day, y=avgDischarge), size=1.3) +
},movie.name=paste0(getwd(),"/narrowsLarge2.gif"),interval = .02, ani.width = 1200, ani.height = 800)
gif_compress <- function(ingif, outgif, show=TRUE, extra.opts=""){
command <-  sprintf("gifsicle -O3 %s < %s > %s", extra.opts, ingif, outgif)
system.fun <- if (.Platform$OS.type == "windows") shell else system
if(show) message("Executing: ", strwrap(command, exdent = 2, prefix = "\n"))
system.fun(ifelse(.Platform$OS.type == "windows", sprintf("\"%s\"", shQuote(command)), command))
}
gif_compress(paste0(getwd(),"/narrowsLarge2.gif"),
paste0(getwd(),"/narrowsLargeTall2.gif"))
getwd()
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 20))
subset(dischargeByDayYear, day <=i)
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 5))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 2))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 11))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 10))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 15))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 30))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 24))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 25))
gg3 + stat_smooth(data = subset(dischargeByDayYear, day <=i), aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 26))
unique(x$time)
hms(x$time)
hm(x$time)
x$timetry <- hm(x$time)
table(x$timetry)
table(x$timetry,useNA = "ifany")
?HM
?hm
x[718531]
x[718531,]
x[718531,6]
x[718531,6] + 12
v <- subset(x, grepl("PM",x$time))
View(v)
table(as.character(v$timetry))
gg <- ggplot(dischargeByDay, aes(x = day, y = avgDischarge, group = 1)) +
geom_point(aes(x = day, y = avgDischarge), alpha = .1) +
stat_smooth(aes(x = day), se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_segment(x = 1, xend = 366, y = 150,yend = 150, color= "red", linetype = 2) +
scale_y_continuous(limits = c(0, 350), expand = c(0,0)) +
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0),limits = c(min(dischargeByDay$day),max(dischargeByDay$day))) +
labs(title = "Mean Flow of the VIRGIN RIVER NARROWS by day (1993 - 2018)",
subtitle = "If the river is flowing at over 150 Cubic Feet per Second (CFS) the narrows is closed",
caption = "Data Accessed 3/16/2018, retrieved via https://nwis.waterdata.usgs.gov/usa/nwis/uv/") +
theme_bw() + theme(plot.caption = element_text(hjust=0))
gg
x$timetry <- as.character(x$timetry)
x <- x %>% separate(timetry, c("hour", "minute", "second"), " ", extra = "merge")
?separate
v2 <- v %>% separate(timetry, c("hour", "minute", "second"), " ", extra = "drop")
View(v2)
# ---------------------------------- WARNING ----------------------------------------
# Some of the data that you have obtained from this U.S. Geological Survey database
# may not have received Director's approval. Any such data values are qualified
# as provisional and are subject to revision. Provisional data are released on the
# condition that neither the USGS nor the United States Government may be held liable
# for any damages resulting from its use.
#
# Additional info: https://help.waterdata.usgs.gov/policies/provisional-data-statement
#
# File-format description:  https://help.waterdata.usgs.gov/faq/about-tab-delimited-output
# Automated-retrieval info: https://help.waterdata.usgs.gov/faq/automated-retrievals
#
# Contact:   gs-w_support_nwisweb@usgs.gov
# retrieved: 2018-03-15 12:29:46 EDT       (nadww01)
#
# Data for the following 1 site(s) are contained in this file
#    USGS 09405500 NORTH FORK VIRGIN RIVER NEAR SPRINGDALE, UT
# -----------------------------------------------------------------------------------
#
# Data provided for site 09405500
#            TS   parameter     Description
#        144196       00060     Discharge, cubic feet per second
#
# Data-value qualification codes included in this output:
#     A  Approved for publication -- Processing and review completed.
#     P  Provisional data subject to revision.
#     0  UNDEF
#    91  Daily mean calculated from data on this day matches published daily mean within 1 percent
#    92  Daily mean calculated from data on this day matches published daily mean within 5 percent
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(animation)
library(grid)
x <- read.csv("website/narrows/narrows.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- x[1:530086,]
x2 <- read.csv("website/narrows/narrows2.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- rbind(x,x2)
rm(x2)
x <- x %>% separate(datetime, c("date", "time"), " ", extra = "merge")
x$date <- mdy(x$date)
x$timetry <- hm(x$time)
x2 <- x %>% separate(timetry, c("hour", "minute", "second"), " ", extra = "drop")
View(x2)
x2 <- x %>% separate(timetry, c("hour", "minute", "second"), " ", extra = "merge", fill = "right")
View(x2)
x2 <- x %>% separate(timetry, c("hour", "minute", "second"), " ", extra = "merge", fill = "left")
# ---------------------------------- WARNING ----------------------------------------
# Some of the data that you have obtained from this U.S. Geological Survey database
# may not have received Director's approval. Any such data values are qualified
# as provisional and are subject to revision. Provisional data are released on the
# condition that neither the USGS nor the United States Government may be held liable
# for any damages resulting from its use.
#
# Additional info: https://help.waterdata.usgs.gov/policies/provisional-data-statement
#
# File-format description:  https://help.waterdata.usgs.gov/faq/about-tab-delimited-output
# Automated-retrieval info: https://help.waterdata.usgs.gov/faq/automated-retrievals
#
# Contact:   gs-w_support_nwisweb@usgs.gov
# retrieved: 2018-03-15 12:29:46 EDT       (nadww01)
#
# Data for the following 1 site(s) are contained in this file
#    USGS 09405500 NORTH FORK VIRGIN RIVER NEAR SPRINGDALE, UT
# -----------------------------------------------------------------------------------
#
# Data provided for site 09405500
#            TS   parameter     Description
#        144196       00060     Discharge, cubic feet per second
#
# Data-value qualification codes included in this output:
#     A  Approved for publication -- Processing and review completed.
#     P  Provisional data subject to revision.
#     0  UNDEF
#    91  Daily mean calculated from data on this day matches published daily mean within 1 percent
#    92  Daily mean calculated from data on this day matches published daily mean within 5 percent
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(animation)
library(grid)
x <- read.csv("website/narrows/narrows.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- x[1:530086,]
x2 <- read.csv("website/narrows/narrows2.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- rbind(x,x2)
rm(x2)
x <- x %>% separate(datetime, c("date", "time"), " ", extra = "merge")
x$date <- mdy(x$date)
x$timeparse <- hm(x$time)
x2 <- x %>% separate(timeparse, c("hour", "minute", "second"), " ", extra = "merge", fill = "left")
x <- x2
x$hour <- gsub("H", "", x$hour)
x$minute <- gsub("M", "", x$minute)
x$second <- gsub("S", "", x$second)
table(x$hour)
table(x$hour,useNA = "ifany")
table(x$minute,useNA = "ifany")
table(x$second,useNA = "ifany")
x[,c("hour","minute","second")] <- sapply(x[,c("hour","minute","second")], as.numeric)
sapply(x,class)
x$hour <- ifelse(grepl("PM", x$time, x$hour + 12),x$hour)
x$hour <- ifelse(grepl("PM", x$time), x$hour + 12,x$hour)
x$timeUpdate <- paste(x$hour,x$minute,x$second)
x$timeUpdate <- paste(x$hour,x$minute,x$second,sep = ":")
x$hour <- ifelse(is.na(x$hour),0 ,x$hour)
x$minute <- ifelse(is.na(x$minute),0 ,x$minute)
x <- read.csv("website/narrows/narrows.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- x[1:530086,]
x2 <- read.csv("website/narrows/narrows2.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- rbind(x,x2)
rm(x2)
x <- x %>% separate(datetime, c("date", "time"), " ", extra = "merge")
x$date <- mdy(x$date)
x$timeparse <- hm(x$time)
x <- x %>% separate(timeparse, c("hour", "minute", "second"), " ", extra = "merge", fill = "left")
x$hour <- gsub("H", "", x$hour)
x$minute <- gsub("M", "", x$minute)
x$second <- gsub("S", "", x$second)
x[,c("hour","minute","second")] <- sapply(x[,c("hour","minute","second")], as.numeric)
x$hour <- ifelse(is.na(x$hour),0 ,x$hour)
x$minute <- ifelse(is.na(x$minute),0 ,x$minute)
x$hour <- ifelse(grepl("PM", x$time, x$hour + 12),x$hour)
x$hour <- ifelse(grepl("PM", x$time), x$hour + 12,x$hour)
nchar(12)
x$hour <- ifelse(nchar(x$hour) > 2, paste0(0,x$hour),x$hour)
x$minute <- ifelse(nchar(x$minute) > 2, paste0(0,x$minute),x$minute)
x$second <- ifelse(nchar(x$second) > 2, paste0(0,x$second),x$second)
x$hour <- ifelse(nchar(x$hour) > 2, paste0("0",as.character(x$hour)),as.character(x$hour))
x$minute <- ifelse(nchar(x$minute) > 2, paste0("0",as.character(x$minute)),as.character(x$minute))
x$second <- ifelse(nchar(x$second) > 2, paste0("0",as.character(x$second)),as.character(x$second))
x$second
sapply(x,class)
table(x$second)
table(x$hour)
paste0("0",as.character(x$hour[1]))
x$hour <- ifelse(nchar(x$hour) < 2, paste0("0",as.character(x$hour)),as.character(x$hour))
x$minute <- ifelse(nchar(x$minute) < 2, paste0("0",as.character(x$minute)),as.character(x$minute))
x$second <- ifelse(nchar(x$second) < 2, paste0("0",as.character(x$second)),as.character(x$second))
table(x$hour)
x$timeUpdate <- paste(x$hour,x$minute,x$second, sep = ":")
table(x$timeUpdate)
x$hour <- ifelse(grepl("24:", x$hour), "00:",x$hour)
x$timeUpdate <- paste(x$hour,x$minute,x$second, sep = ":")
table(x$timeUpdate)
x$hour <- ifelse(grepl("24:", x$hour,perl = TRUE), "00:",x$hour)
table(x$timeUpdate)
?grepl
x$hour <- ifelse(grepl("24", x$hour), "00",x$hour)
table(x$hour)
x$timeUpdate <- paste(x$hour,x$minute,x$second, sep = ":")
table(x$timeUpdate)
x %>% filter(date %in% month(4))
View(dischargeByDay)
dischargeByDay <- x %>% mutate(day = yday(date)) %>% group_by(day) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
View(dischargeByDay)
table(month(x$date))
dischargeByAprilHour <- x %>% filter(month(date) == 4)%>% group_by(day,hour) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
dischargeByAprilHour <- x %>% filter(month(date) == 4) %>% mutate(day = yday(date)) %>% group_by(day,hour) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
View(dischargeByAprilHour)
plot(dischargeByAprilHour$day, dischargeByAprilHour$avgDischarge)
dischargeByAprilHour <- x %>% filter(month(date) == 4) %>% mutate(day = yday(date)) %>% group_by(hour) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
plot(dischargeByAprilHour$day, dischargeByAprilHour$avgDischarge)
plot(dischargeByAprilHour$hour, dischargeByAprilHour$avgDischarge)
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(animation)
library(grid)
x <- read.csv("website/narrows/narrows.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- x[1:530086,]
x2 <- read.csv("website/narrows/narrows2.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- rbind(x,x2)
rm(x2)
x <- x %>% separate(datetime, c("date", "time"), " ", extra = "merge")
x$date <- mdy(x$date)
x$timeparse <- hm(x$time)
x <- x %>% separate(timeparse, c("hour", "minute", "second"), " ", extra = "merge", fill = "left")
x$hour <- gsub("H", "", x$hour)
x$minute <- gsub("M", "", x$minute)
x$second <- gsub("S", "", x$second)
x[,c("hour","minute","second")] <- sapply(x[,c("hour","minute","second")], as.numeric)
x$hour <- ifelse(is.na(x$hour),0 ,x$hour)
x$minute <- ifelse(is.na(x$minute),0 ,x$minute)
x$hour <- ifelse(grepl("PM", x$time), x$hour + 12,x$hour)
x$hour <- ifelse(nchar(x$hour) < 2, paste0("0",as.character(x$hour)),as.character(x$hour))
x$minute <- ifelse(nchar(x$minute) < 2, paste0("0",as.character(x$minute)),as.character(x$minute))
x$second <- ifelse(nchar(x$second) < 2, paste0("0",as.character(x$second)),as.character(x$second))
x$hour <- ifelse(grepl("24", x$hour), "00",x$hour)
x$timeUpdate <- paste(x$hour,x$minute,x$second, sep = ":")
getwd()
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(animation)
library(grid)
x <- read.csv("/home/michael/Documents/website/narrows/narrows.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- x[1:530086,]
x2 <- read.csv("/home/michael/Documents/website/narrows/narrows2.csv", row.names = NULL, stringsAsFactors = FALSE)
x <- rbind(x,x2)
rm(x2)
x <- x %>% separate(datetime, c("date", "time"), " ", extra = "merge")
x$date <- mdy(x$date)
x$timeparse <- hm(x$time)
x <- x %>% separate(timeparse, c("hour", "minute", "second"), " ", extra = "merge", fill = "left")
x$hour <- gsub("H", "", x$hour)
x$minute <- gsub("M", "", x$minute)
x$second <- gsub("S", "", x$second)
x[,c("hour","minute","second")] <- sapply(x[,c("hour","minute","second")], as.numeric)
x$hour <- ifelse(is.na(x$hour),0 ,x$hour)
x$minute <- ifelse(is.na(x$minute),0 ,x$minute)
x$hour <- ifelse(grepl("PM", x$time), x$hour + 12,x$hour)
x$hour <- ifelse(nchar(x$hour) < 2, paste0("0",as.character(x$hour)),as.character(x$hour))
x$minute <- ifelse(nchar(x$minute) < 2, paste0("0",as.character(x$minute)),as.character(x$minute))
x$second <- ifelse(nchar(x$second) < 2, paste0("0",as.character(x$second)),as.character(x$second))
x$hour <- ifelse(grepl("24", x$hour), "00",x$hour)
x$timeUpdate <- paste(x$hour,x$minute,x$second, sep = ":")
View(x)
saveRDS(x,file = "/home/michael/Documents/mikeleeco.github.com/static/data/narrows.Rdata")
dischargeByDay <- x %>% mutate(day = yday(date)) %>% group_by(day) %>% summarise(avgDischarge = mean(discharge, na.rm = TRUE))
View(dischargeByDay)
plot(dischargeByDay$day, dischargeByDay$avgDischarge)
dischargeByAprilHour <- x %>% filter(month(date) == 4) %>%
mutate(day = yday(date)) %>%
group_by(hour) %>%
summarise(avgDischarge = mean(discharge, na.rm = TRUE))
plot(dischargeByAprilHour$hour, dischargeByAprilHour$avgDischarge)
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
gg <- ggplot(dischargeByDay, aes(x = day, y = avgDischarge, group = 1)) +
scale_y_continuous(limits = c(0, 350), expand = c(0,0)) +
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0),limits = c(min(dischargeByDay$day)-1,max(dischargeByDay$day)-2)) +
labs(title = "Mean Flow of the VIRGIN RIVER NARROWS by day (1993 - 2018)",
subtitle = "If the river is flowing at over 150 Cubic Feet per Second (CFS) the narrows is closed",
caption = "Data Accessed 3/16/2018, retrieved via https://nwis.waterdata.usgs.gov/usa/nwis/uv/") +
xlab("Date") + ylab("Average Discharge") +
theme_bw() + theme_white
gg
knit_hooks$set(wrap = function(before, options, envir){
if (before){
paste0('<', options$wrap, '>')
} else {
paste0('</', options$wrap, '>')
}
})
dischargeByDay <- x %>% mutate(day = yday(date)) %>%
group_by(day) %>%
summarise(avgDischarge = mean(discharge, na.rm = TRUE))
dischargeByDay$day <- as.Date(as_date(dischargeByDay$day))
dischargeByDay$month <- month(dischargeByDay$day, label = TRUE)
plot(dischargeByDay$day, dischargeByDay$avgDischarge)
theme_white <- theme(text = element_text(family="Open Sans", color = "black"),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.title.x=element_text(size=26, family = "Open Sans", margin = margin(t=15, b = 0)),
axis.title.y=element_text(size=26, family = "Open Sans", margin = margin(r=15, l = 5)),
axis.text.x=element_text(size=22, hjust = 0, family = "Open Sans Light"),
axis.text.y=element_text(size=22, family = "Open Sans Light"),
axis.ticks = element_blank(),
plot.title=element_text(size=34,family = "Open Sans Extrabold",hjust= 0,lineheight=1, margin = margin(t = 15)),
plot.subtitle=element_text(size=26, margin = margin(t=15, b = 5),family = "Open Sans"),
plot.caption=element_text(size=18, hjust = 0,margin=margin(t=15, b = 15),lineheight=1.15, family = "Open Sans"),
legend.position="none"
)
gg <- ggplot(dischargeByDay, aes(x = day, y = avgDischarge, group = 1)) +
scale_y_continuous(limits = c(0, 350), expand = c(0,0)) +
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0),limits = c(min(dischargeByDay$day)-1,max(dischargeByDay$day)-2)) +
labs(title = "Mean Flow of the VIRGIN RIVER NARROWS by day (1993 - 2018)",
subtitle = "If the river is flowing at over 150 Cubic Feet per Second (CFS) the narrows is closed",
caption = "Data Accessed 3/16/2018, retrieved via https://nwis.waterdata.usgs.gov/usa/nwis/uv/") +
xlab("Date") + ylab("Average Discharge") +
theme_bw() + theme_white
gg
# library(servr)
# library(knitr)
# setwd('/home/michael/Documents/mikeleeco.github.com/')
# jekyll()
# # jekyll(command = '/home/michael/.rbenv/shims/jekyll build')
# jekyll(input = "_source", command = '/home/michael/.rbenv/versions/2.3.1/bin/bundle exec jekyll serve')
# servr::jekyll(command = '/.rvm/gems/ruby-2.3.1/wrappers/jekyll build')
#
# export PATH=$PATH:/home/michael/.rbenv/versions/2.3.1/bin
# .libPaths("/home/michael/R/x86_64-pc-linux-gnu-library/3.4.1")
# .libPaths(new = "/home/michael/R/x86_64-pc-linux-gnu-library/3.4")
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
# library(servr)
# library(knitr)
# setwd('/home/michael/Documents/mikeleeco.github.com/')
# jekyll()
# # jekyll(command = '/home/michael/.rbenv/shims/jekyll build')
# jekyll(input = "_source", command = '/home/michael/.rbenv/versions/2.3.1/bin/bundle exec jekyll serve')
# servr::jekyll(command = '/.rvm/gems/ruby-2.3.1/wrappers/jekyll build')
#
# export PATH=$PATH:/home/michael/.rbenv/versions/2.3.1/bin
# .libPaths("/home/michael/R/x86_64-pc-linux-gnu-library/3.4.1")
# .libPaths(new = "/home/michael/R/x86_64-pc-linux-gnu-library/3.4")
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
# library(servr)
# library(knitr)
# setwd('/home/michael/Documents/mikeleeco.github.com/')
# jekyll()
# # jekyll(command = '/home/michael/.rbenv/shims/jekyll build')
# jekyll(input = "_source", command = '/home/michael/.rbenv/versions/2.3.1/bin/bundle exec jekyll serve')
# servr::jekyll(command = '/.rvm/gems/ruby-2.3.1/wrappers/jekyll build')
#
# export PATH=$PATH:/home/michael/.rbenv/versions/2.3.1/bin
# .libPaths("/home/michael/R/x86_64-pc-linux-gnu-library/3.4.1")
# .libPaths(new = "/home/michael/R/x86_64-pc-linux-gnu-library/3.4")
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
