theme_white <- theme(
panel.background=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size=14),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.ticks.x=element_line(),
axis.ticks.y=element_blank(),
plot.title=element_text(size=18,face = "bold",lineheight=1.15),
plot.subtitle=element_text(family="sans",size=12, margin = margin(t=15)),
plot.caption=element_text(size=12, hjust=0, margin=margin(t=15),lineheight=1.15)
)
# black, native, hisp
mypalette <- brewer.pal(7,"Greens")
oopt = ani.options(interval = 0.2)
#
# tf2 <- subset(tf2, Race == "Total")
saveGIF({for (i in 1:max(tf2$.frame)) {
g<-
ggplot(data=subset(tf2, .frame <=i) %>% group_by(Race,grad) %>% summarise(.frame = i,percent =max(roll_sum2)), aes(x = Race, y = percent, frame=.frame)) +
scale_y_continuous(limits = c(0,100)) +
geom_col(aes(fill = grad)) + theme_white + scale_fill_manual(values=mypalette, drop=FALSE)
print(g); ani.pause()
}},movie.name="ehs ytd july 2016.gif",ani.width = 1600, ani.height = 900)
warnings()
subset(tf2, .frame <=1) %>% group_by(Race,grad) %>% summarise(.frame = i,percent =max(roll_sum2)
)
subset(tf2, .frame <=1) %>% group_by(Race,grad) %>% summarise(.frame = 1,percent =max(roll_sum2)
)
subset(tf2, .frame <=1) %>% group_by(Race,grad) %>% summarise(percent =max(roll_sum2)
)
subset(tf2, .frame <=16) %>% group_by(Race,grad) %>% summarise(.frame = 16,percent =max(roll_sum2))
subset(tf2, .frame <=26) %>% group_by(Race,grad) %>% summarise(.frame = 16,percent =max(roll_sum2))
subset(tf2, .frame <=26) %>% group_by(Race,grad) %>% summarise(.frame =26,percent =max(roll_sum2))
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = cumsum(percent)) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad),myf)
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=40)
tf
my.list2
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',8),nframes=40)
tf
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',4),nframes=40)
tf
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',4),nframes=40)
?tween_states
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease='linear',nframes=40)
tf
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
gradData %>% group_by(Race) %>% mutate(roll_sum2 = cumsum(percent)) -> gradData
myf<-function(mystate){as.data.frame(gradData[gradData$Race==mystate,])}
my.list2<-lapply(unique(gradData$Race),myf)
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease='linear',nframes=40)
tf
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
tf2 <- tf
# gganimate(g,title_frame = FALSE)
theme_white <- theme(
panel.background=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size=14),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.ticks.x=element_line(),
axis.ticks.y=element_blank(),
plot.title=element_text(size=18,face = "bold",lineheight=1.15),
plot.subtitle=element_text(family="sans",size=12, margin = margin(t=15)),
plot.caption=element_text(size=12, hjust=0, margin=margin(t=15),lineheight=1.15)
)
# black, native, hisp
mypalette <- brewer.pal(7,"Greens")
oopt = ani.options(interval = 0.2)
#
# tf2 <- subset(tf2, Race == "Total")
saveGIF({for (i in 1:max(tf2$.frame)) {
g<-
ggplot(data=subset(tf2, .frame <=i) %>% group_by(Race,grad) %>% summarise(.frame = i,percent =max(roll_sum2)), aes(x = Race, y = percent, frame=.frame)) +
scale_y_continuous(limits = c(0,100)) +
geom_col(aes(fill = grad)) + theme_white + scale_fill_manual(values=mypalette, drop=FALSE)
print(g); ani.pause()
}},movie.name="ehs ytd july 2016.gif",ani.width = 1600, ani.height = 900)
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = cumsum(percent)) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad),myf)
tf <- tween_states(my.list2, tweenlength=1, statelength=1, ease='linear',nframes=40)
tf
tf <- tween_states(my.list2, tweenlength=3, statelength=1, ease='linear',nframes=40)
tf
tf <- tween_states(my.list2, tweenlength=0, statelength=1, ease='linear',nframes=40)
tf
tf <- tween_states(my.list2, tweenlength=3, statelength=0, ease='linear',nframes=40)
tf
data1 <- data.frame(
x = 1:20,
y = 0,
colour = 'forestgreen',
stringsAsFactors = FALSE
)
data2 <- data1
data2$x <- 20:1
data2$y <- 1
data <- tween_states(list(data1, data2), 3, 1, 'cubic-in-out', 100)
data
data1 <- data.frame(
x = 1:20,
y = 0,
colour = 'forestgreen',
stringsAsFactors = FALSE
)
data2 <- data1
data2$x <- 20:1
data2$y <- 1
data <- tween_states(list(data1, data2), 3, 1, 'cubic-in-out', 10)
data
7*3*4
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad),myf)
tf <- tween_states(my.list2, tweenlength=3, statelength=1, ease='linear',nframes=40)
368/84
# install.packages("githubinstall")
# gh_install_packages("dgrtwo/gganimate", ref = "26ec501")
library(ggplot2) # devtools::install_github("hadley/ggplot2")
library(scales)
library(tidyr)
library(extrafont)
library(dplyr)
library(lubridate)
library(tweenr)
library(gganimate) # gh_install_packages("dgrtwo/gganimate", ref = "26ec501")
library(animation)
library(RColorBrewer)
res <- read.csv("/home/michael/Documents/nces_theme/bullying.csv")
colnames(res) <- c('Sex','2005','2007','2009','2011','2013','2015')
res <- res %>% gather(Sex, key= "Year")
colnames(res)[3] <- "Value"
res$Sex <- as.factor(unique(res$Sex))
res$Sex <- factor(res$Sex, levels = c("Total","Female", "Male"), labels = c("Total","Female", "Male"))
res$Year <- as.Date(res$Year,"%Y")
# res$Year <- as.POSIXct(res$Year, origin="1970-01-01")
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$Year)))
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 1, statelength=0, ease='cubic-in-out',nframes=200)
tf
tf$Sex=="Total"
subset(tf,Sex=="Total")
rm(data,data1,data2)
g
rm(g)
rm()
rm(list=ls())
# install.packages("githubinstall")
# gh_install_packages("dgrtwo/gganimate", ref = "26ec501")
library(ggplot2) # devtools::install_github("hadley/ggplot2")
library(scales)
library(tidyr)
library(extrafont)
library(dplyr)
library(lubridate)
library(tweenr)
library(gganimate) # gh_install_packages("dgrtwo/gganimate", ref = "26ec501")
library(animation)
library(RColorBrewer)
res <- read.csv("/home/michael/Documents/nces_theme/bullying.csv")
colnames(res) <- c('Sex','2005','2007','2009','2011','2013','2015')
res <- res %>% gather(Sex, key= "Year")
colnames(res)[3] <- "Value"
res$Sex <- as.factor(unique(res$Sex))
res$Sex <- factor(res$Sex, levels = c("Total","Female", "Male"), labels = c("Total","Female", "Male"))
res$Year <- as.Date(res$Year,"%Y")
# res$Year <- as.POSIXct(res$Year, origin="1970-01-01")
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$Year)))
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 1, statelength=0, ease='cubic-in-out',nframes=200)
subset(tf,Sex=="Total")
my.list2
tf <- tween_states(my.list2, tweenlength= 1, statelength=0, ease='cubic-in-out',nframes=200)
tf$Year <- as.Date(tf$Year,"%Y")
tf$SexLabel <- as.character(tf$Sex)
tf$nudge <- ifelse(tf$SexLabel=="Male", 0,ifelse(tf$SexLabel=="Female",0,0))
tf$nudge_x <- ifelse(tf$SexLabel=="Female", 220, 160)
gg <- ggplot(tf, aes(x = Year, y = Value, frame = Year)) +
geom_line(aes(group=Sex, color=Sex, cumulative = TRUE, label=SexLabel), size=2.5)
gg
gg <- ggplot(tf, aes(x = Year, y = Value, frame = Year)) +
geom_line(aes(group=Sex, color=Sex, cumulative = TRUE, label=SexLabel), size=2.5) +
scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year),limits =as.Date(c("2004-12-22", "2015-12-01"))) +
scale_y_continuous(labels=seq(15, 35, by = 5), breaks=seq(15, 35, by = 5),limits = c(15, 35)) +
geom_text(aes(label = SexLabel), size = 10, nudge_y = tf$nudge ,nudge_x=tf$nudge_x,family="Open Sans")
gg
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = cumsum(percent)) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad),myf)
my.list2
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=40)
View(tf)
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=10)
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease='cubic-in-out',nframes=10)
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = cumsum(percent)) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$Race),myf)
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = cumsum(percent)) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
myf<-function(mystate){as.data.frame(gradData[gradData$Race==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$Race),myf)
my.list2
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=40)
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=200)
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
gradData %>% group_by(Race) %>% mutate(roll_sum2 = percent) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = percent) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad),myf)
my.list2
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=40)
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
gradData %>% group_by(Race) %>% mutate(roll_sum2 = percent) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,4)]
View(gradData)
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = percent) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,3)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad),myf)
tf <- tween_states(my.list2, tweenlength=2, statelength=1, ease=rep('linear',7),nframes=40)
tf
tf <- tween_states(my.list2, tweenlength=3, statelength=1, ease=rep('linear',7),nframes=40)
tf
tween_states
library(ggplot2)
library(gganimate)
library(tweenr)
library(dplyr)
library(RColorBrewer)
library(animation)
gradData <- read.csv("grad_reshape.csv")
# g <- ggplot(gradData, aes(x = Race, y = Percent, frame = grad))
# g <- g + geom_bar(aes(fill = Percent), position = "fill", stat="identity")
# gg_animate(g,title_frame = FALSE)
# states2<-gradData$grad
# gradData %>% group_by(Race) %>% mutate(roll_sum = cumsum(Percent)) -> gradData
# gradData <- gradData[,c(1,2,4)]
gradData %>% group_by(Race) %>% mutate(roll_sum2 = percent) -> gradData
# gradData %>% group_by(Race) %>% mutate(roll_sum3 = percent/sum(roll_sum2)) -> gradData
gradData <- gradData[,c(1,2,3)]
myf<-function(mystate){as.data.frame(gradData[gradData$grad==mystate,])}
# use lapply to generate the list of data sets:
my.list2<-lapply(unique(gradData$grad)[1:2],myf)
my.list2
my.list2<-lapply(unique(gradData$grad)[1:2],myf)
tf <- tween_states(my.list2, tweenlength=3, statelength=1, ease=rep('linear',7),nframes=40)
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
tf2 <- tf
# gganimate(g,title_frame = FALSE)
theme_white <- theme(
panel.background=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size=14),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.ticks.x=element_line(),
axis.ticks.y=element_blank(),
plot.title=element_text(size=18,face = "bold",lineheight=1.15),
plot.subtitle=element_text(family="sans",size=12, margin = margin(t=15)),
plot.caption=element_text(size=12, hjust=0, margin=margin(t=15),lineheight=1.15)
)
# black, native, hisp
mypalette <- brewer.pal(7,"Greens")
oopt = ani.options(interval = 0.2)
#
# tf2 <- subset(tf2, Race == "Total")
saveGIF({for (i in 1:max(tf2$.frame)) {
g<-
ggplot(data=subset(tf2, .frame <=i) %>% group_by(Race,grad) %>% summarise(.frame = i,percent =max(roll_sum2)), aes(x = Race, y = percent, frame=.frame)) +
scale_y_continuous(limits = c(0,100)) +
geom_col(aes(fill = grad)) + theme_white + scale_fill_manual(values=mypalette, drop=FALSE)
print(g); ani.pause()
}},movie.name="ehs ytd july 2016.gif",ani.width = 1600, ani.height = 900)
# tf2 <- subset(tf2, Race == "Total")
saveGIF({for (i in 1:max(tf2$.frame)) {
g<-
ggplot(data=subset(tf2, .frame <=i) %>% group_by(Race,grad) %>% summarise(.frame = i,percent =max(percent)), aes(x = Race, y = percent, frame=.frame)) +
scale_y_continuous(limits = c(0,100)) +
geom_col(aes(fill = grad)) + theme_white + scale_fill_manual(values=mypalette, drop=FALSE)
print(g); ani.pause()
}},movie.name="ehs ytd july 2016.gif",ani.width = 1600, ani.height = 900)
my.list1<-lapply(unique(gradData$grad)[1:2],myf)
tf <- tween_states(my.list1, tweenlength=3, statelength=1, ease=rep('linear',7),nframes=20)
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
View(tf)
# use lapply to generate the list of data sets:
my.list1<-lapply(unique(gradData$grad)[1:2],myf)
tf <- tween_states(my.list1, tweenlength=3, statelength=1, ease=rep('linear',7),nframes=10)
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
tf <- tween_states(my.list1, tweenlength=3, statelength=1, ease=rep('linear',8),nframes=10)
tf$grad[tf$grad == "Fake"] <- "Graduation within 4 years"
my.list1<-lapply(unique(gradData$grad)[1:2],myf)
tf1 <- tween_states(my.list1, tweenlength=3, statelength=1, ease=rep('linear',8),nframes=10)
tf1$grad[t1f$grad == "Fake"] <- "Graduation within 4 years"
tf1$grad[tf1$grad == "Fake"] <- "Graduation within 4 years"
View(tf1)
my.list2<-lapply(unique(gradData$grad)[c(1,3)],myf)
tf2 <- tween_states(my.list2, tweenlength=3, statelength=1, ease=rep('linear',8),nframes=10)
tf2$grad[tf2$grad == "Fake"] <- "Graduation within 5 years"
View(tf2)
max(tf1$.frame)
tf2$.frame <- tf2$.frame + max(tf1$.frame)
my.list3<-lapply(unique(gradData$grad)[c(1,4)],myf)
tf3 <- tween_states(my.list3, tweenlength=3, statelength=1, ease=rep('linear',8),nframes=10)
tf3$grad[tf3$grad == "Fake"] <- "Graduation within 6 years"
tf3$.frame <- tf3$.frame + max(tf2$.frame)
View(tf3)
tfTry <- rbind(tf1,tf2,tf3)
View(tfTry)
theme_white <- theme(
panel.background=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size=14),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.ticks.x=element_line(),
axis.ticks.y=element_blank(),
plot.title=element_text(size=18,face = "bold",lineheight=1.15),
plot.subtitle=element_text(family="sans",size=12, margin = margin(t=15)),
plot.caption=element_text(size=12, hjust=0, margin=margin(t=15),lineheight=1.15)
)
# black, native, hisp
mypalette <- brewer.pal(7,"Greens")
oopt = ani.options(interval = 0.2)
#
saveGIF({for (i in 1:max(tfTry$.frame)) {
g<-
ggplot(data=subset(tfTry, .frame <=i) %>% group_by(Race,grad) %>% summarise(.frame = i,percent =max(percent)), aes(x = Race, y = percent, frame=.frame)) +
scale_y_continuous(limits = c(0,100)) +
geom_col(aes(fill = grad)) + theme_white + scale_fill_manual(values=mypalette, drop=FALSE)
print(g); ani.pause()
}},movie.name="ehs ytd july 2016.gif",ani.width = 1600, ani.height = 900)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
source('~/Documents/horizontal_animation.R', echo=TRUE)
?repo
?rep
g
dev.off()
g
rep(print(g),20)
print(g)
rep(print(g),20)
rep(print(g$plot_env),20)
rep(print(g$plot),20)
?ggplot
rep(print.ggplot(g),20)
print(g)
sapply(g,print)
sapply(g,print.ggplot)
rep(ggplot2:::print.ggplot(g),20)
source('~/Documents/horizontal_animation.R', echo=TRUE)
View(gradData)
source('~/Documents/horizontal_animation.R', echo=TRUE)
library(animation)
?saveGIF
install.packages(c("akima", "animation", "BH", "choroplethr", "choroplethrMaps", "clipr", "colorspace", "curl", "data.table", "DBI", "evaluate", "ggrepel", "ggthemes", "git2r", "Hmisc", "hms", "htmlTable", "jsonlite", "knitr", "magick", "maptools", "openssl", "Rcpp", "readr", "reshape", "rgeos", "rmarkdown", "selectr", "servr", "sf", "showtext", "sp", "stringi", "stringr", "survival", "tidyr", "tweenr", "V8", "viridis", "viridisLite", "XML", "xml2", "yaml"))
library(servr)
library(knitr)
setwd('/home/michael/Documents/mikeleeco.github.com/')
jekyll()
