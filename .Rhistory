hexdat3 <- rbind(hexdat3,hexdat2)
}
colcol <-sample(c(rep(0,10),rep(2,4),7,10),nrow(hexdat3), replace = TRUE)
hexdat3temp <- data.frame(breaks = hexdat3$frame,col = colcol,stringsAsFactors = FALSE)
myf<-function(mystate){as.data.frame(hexdat3temp[hexdat3temp$breaks==mystate,])}
states2<-factor(unique((hexdat3temp$breaks)))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$id <- hexdat3[1:600,1]
tf$x <- hexdat3[1:600,3]
tf$y <- hexdat3[1:600,4]
library(tweenr)
hexdat3temp <- data.frame(breaks = hexdat3$frame,col = colcol,stringsAsFactors = FALSE)
myf<-function(mystate){as.data.frame(hexdat3temp[hexdat3temp$breaks==mystate,])}
states2<-factor(unique((hexdat3temp$breaks)))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$id <- hexdat3[1:600,1]
tf$x <- hexdat3[1:600,3]
tf$y <- hexdat3[1:600,4]
hex <- ggplot(tf, aes(x, y,frame = frame)) +
geom_polygon(aes(group = id,fill = colcol), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex <- ggplot(tf, aes(x, y,frame = frame)) +
geom_polygon(aes(group = id,fill = breaks), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
View(tf)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = breaks), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex
dev.off()
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = breaks)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
unique(tf$col)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1200, ani.height = 800)
library(gganimate)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1200, ani.height = 800)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1600, ani.height = 1600,title_frame = FALSE)
ani.options()
animation::ani.options()
animation::ani.options(interval = .5)
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1600, ani.height = 2000,title_frame = FALSE)
library(blogdown)
.libPaths()
.libPaths(new = "/home/michael/R/x86_64-pc-linux-gnu-library/3.4")
.libPaths()
devtools::install_github('rstudio/blogdown')
install.packages("rmarkdown")
library(extrafont)
extrafont::loadfonts()
?font_install
getwd()
font_import(paste0(getwd(),"/OpenType"))
library(devtiiks)
library(devtools)
install_github("wch/extrafont@freetype")
library(extrafont)
library(extra)
extrafont
library(extrafont)
font_import(paste0(getwd(),"/OpenType"))
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham-*", prompt = FALSE)
install_github("wch/Rttf2pt1@freetype2")
library(devtools)
install_github("wch/Rttf2pt1@freetype2")
install_github("wch/Rttf2pt1@freetype2")
library(devtools)
install_github("wch/Rttf2pt1@freetype2")
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham-*", prompt = FALSE)
library(extrafont)
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham-*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"), prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"))
font_import(paste0(getwd(),"/OpenType/"), pattern = "Gotham-*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Gotham*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Gotham.*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Got.*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Got*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Got", prompt = FALSE)
install.packages("Rttf2pt1")
install.packages("Rttf2pt1")
library(Rttf2pt1)
install_github("wch/Rttf2pt1@freetype2")
library(extra)
extrafont
library(extrafont)
extrafont::font_import()
FONTS()
fonts()
extrafont::font_import()
library(extrafont)
loadfonts()
pdfFonts()
remove.packages(" Rttf2pt1")
remove.packages("Rttf2pt1")
install.packages("Rttf2pt1")
install.packages("Rttf2pt1")
library(Rttf2pt1)
remove.packages("extrafont")
installed.packages("extrafont")
install.packages("extrafont")
library(extrafont)
library(extrafont)
loadfonts()
1060/1040
x <- 1060/1040
x*612
x <- 1075/1040
x*612
install.packages("ggjoy")
library(ggjoy)
??ggjoy
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 0.005) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 4) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 4) +
scale_y_discrete(expand=c(0.1, 0)) +
scale_x_continuous(expand=c(0.1, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 0.5) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 1) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 0) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 2) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 1) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .99) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .9) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .1) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .7) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy() + theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy2() + theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy() + theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 4) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 1) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 10) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 100) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
d <- data.frame(x = rep(1:5, 3), y = c(rep(0, 5), rep(1, 5), rep(3, 5)),
height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1))
ggplot(d, aes(x, y, height = height, group = y)) + geom_ridgeline(fill="lightblue")
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
lincoln_weather
View(lincoln_weather)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, color = `Mean Temperature [F]`) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(fill = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, color = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`))
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(fill = `Mean Temperature [F]`))
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,fill = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,color = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,color = Mean Temperature [F])) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,color = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,fill = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
library(tweenr)
?tweenr
install.packages(c("devtools","rstudioapi"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages(c("reshape", "MASS", "psych", "Rglpk", "XML", "data.table"), dependencies=TRUE)
library("ffanalytics")
devtools::install_github(repo = "dadrivr/ffanalytics")
library("ffanalytics")
scrapeData <- runScrape(week = 0, season = 2017, analysts = c(-1, 5, 7, 18, 27), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
View(playerData)
scrapeData$QB
qb <- scrapeData$QB
str(scrapeData$QB)
str(scrapeData$QB$resultData)
str(scrapeData$QB[["resultData"]])
str(scrapeData$QB@resultData)
qb <- scrapeData$QB@resultData
View(qb)
calculatePoints("qb")
calculatePoints(scrapeData)
getwd()
x <- read.csv("proj.csv")
View(x)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
x <- read.csv("projppr.csv")
library(dplyr)
unique(x$position)
x <- x %>% filter(position != "DB")
x <- x %>% filter(position != "DL")
x <- x %>% filter(position != "LB")
unique(x$position)
x <- as.data.frame(zx)
x <- as.data.frame(x)
unique(x$position)
x <- data.frame(x, stringsAsFactors = FALSE)
unique(x$position)
wr <- filter(x, position== "WR")
rb <- filter(x, position== "RB")
qb <- filter(x, position== "QB")
te <- filter(x, position== "TE")
k <- filter(x, position== "K")
dst <- filter(x, position== "DST")
View(rb)
View(te)
View(rb)
View(te)
View(wr)
rb <- rb[8:nrow(rb),]
rb <- rb[5:nrow(rb),]
rb <- rb[2:nrow(rb),]
wr <- wr[15:nrow(wr),]
View(qb)
View(k)
View(dst)
getwd()
saveRDS(x, "projections.Rdata")
lis.files()
list.files()
vv <- readRDS("projections.Rdata")
unique(x$position)
vv <- readRDS("projections.Rdata")
View(vv)
library(dplytr)
library(dplyr)
vv <- filter(position == "DST")
vv <- vv%>% filter(position == "DST")
install.packages("tidycensus")
library(tidycensus)
library(tidyverse)
library(stringr)
install.packages("tigris")
library(tidycensus)
library(tidyverse)
library(stringr)
install.packages("tidycensus")
install.packages("rgdal")
install.packages("tidycensus")
library(tidycensus)
library(tidyverse)
library(stringr)
install.packages("tidyverse")
library(tidycensus)
library(tidyverse)
library(stringr)
census_api_key("4d29e43156b8159007e340958319fffe72eb2945", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")
age <- get_decennial(geography = "state", table = "P012", summary_var = "P0010001") %>%
mutate(variable = str_replace(variable, "P01200", "")) %>%
filter(!variable %in% c("01", "02", "26")) %>%
arrange(NAME, variable)
head(age)
agegroups <- c("0-4", "5-9", "10-14", "15-19", "15-19", "20-24", "20-24",
"20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54",
"55-59", "60-64", "60-64", "65-69", "65-69", "70-74", "75-79",
"80-84", "85+")
agesex <- c(paste("Male", agegroups),
paste("Female", agegroups))
age$group <- rep(agesex, length(unique(age$NAME)))
age2 <- age %>%
group_by(NAME, group) %>%
mutate(group_est = sum(value)) %>%
distinct(NAME, group, .keep_all = TRUE) %>%
ungroup() %>%
mutate(percent = 100 * (group_est / summary_value)) %>%
select(name = NAME, group, percent) %>%
separate(group, into = c("sex", "age"), sep = " ") %>%
mutate(age = factor(age, levels = unique(age)),
percent = ifelse(sex == "Female", percent, -percent))
head(age2)
library(geofacet)
library(extrafont)
xlabs = c("0-4" = "0-4", "5-9" = "", "10-14" = "", "15-19" = "", "20-24" = "",
"25-29" = "", "30-34" = "", "35-39" = "", "40-44" = "", "45-49" = "",
"50-54" = "", "55-59" = "", "60-64" = "", "65-69" = "", "70-74" = "",
"75-79" = "", "80-84" = "", "85+" = "85+")
ggplot(data = age2, aes(x = age, y = percent, fill = sex)) +
geom_bar(stat = "identity", width = 1) +
scale_y_continuous(breaks=c(-5, 0, 5),labels=c("5%", "0%", "5%")) +
coord_flip() +
theme_minimal(base_family = "Tahoma") +
scale_x_discrete(labels = xlabs) +
scale_fill_manual(values = c("red", "navy")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text.x = element_text(size = 6)) +
labs(x = "", y = "", fill = "",
title = "Demographic structure of US states",
caption = "Data source: 2010 US Census, tidycensus R package.  Chart by @kyle_e_walker.") +
facet_geo(~ name, grid = "us_state_grid2", move_axes = TRUE)
install.packages("geofacet")
library(geofacet)
library(extrafont)
xlabs = c("0-4" = "0-4", "5-9" = "", "10-14" = "", "15-19" = "", "20-24" = "",
"25-29" = "", "30-34" = "", "35-39" = "", "40-44" = "", "45-49" = "",
"50-54" = "", "55-59" = "", "60-64" = "", "65-69" = "", "70-74" = "",
"75-79" = "", "80-84" = "", "85+" = "85+")
ggplot(data = age2, aes(x = age, y = percent, fill = sex)) +
geom_bar(stat = "identity", width = 1) +
scale_y_continuous(breaks=c(-5, 0, 5),labels=c("5%", "0%", "5%")) +
coord_flip() +
theme_minimal(base_family = "Tahoma") +
scale_x_discrete(labels = xlabs) +
scale_fill_manual(values = c("red", "navy")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text.x = element_text(size = 6)) +
labs(x = "", y = "", fill = "",
title = "Demographic structure of US states",
caption = "Data source: 2010 US Census, tidycensus R package.  Chart by @kyle_e_walker.") +
facet_geo(~ name, grid = "us_state_grid2", move_axes = TRUE)
age <- get_decennial(geography = "state", table = "B15002001", summary_var = "P0010001") %>%
mutate(variable = str_replace(variable, "P01200", "")) %>%
filter(!variable %in% c("01", "02", "26")) %>%
arrange(NAME, variable)
head(age)
v15 <- load_variables(2015, "acs5", cache = TRUE)
View(v15)
x <- v15 %>% filter(grepl("education", label))
View(x)
unique(x$concept)
x <- v15 %>% filter(grepl("educat", label))
unique(x$concept)
x <- v15 %>% filter(grepl("educ", label))
x <- v15 %>% filter(grepl("educ*", label))
x <- v15 %>% filter(grepl("ed", label))
unique(x$concept)
x <- v15 %>% filter(grepl("attain", label))
?load_variables
v15 <- load_variables(2010, cache = TRUE)
View(v15)
v15 <- load_variables(2010, "sf1", cache = TRUE)
View(v15)
x <- v15 %>% filter(grepl("attain", label))
x <- v15 %>% filter(grepl("educ*", label))
unique(v15$concept)
x <- v15 %>% filter(grepl("educ*", label,ignore.case =  TRUE))
x <- v15 %>% filter(grepl("educ", label,ignore.case =  TRUE))
x <- v15 %>% filter(grepl("attainment", label,ignore.case =  TRUE))
x <- v15 %>% filter(grepl("geo", label,ignore.case =  TRUE))
View(x)
x <- v15 %>% filter(grepl("owned", label,ignore.case =  TRUE))
View(x)
x <- v15 %>% filter(grepl("Attainment", label,ignore.case =  TRUE))
x <- v15 %>% filter(grepl("Attainment", concept,ignore.case =  TRUE))
x <- v15 %>% filter(grepl("Attainment", concept,ignore.case =  TRUE, perl = TRUE))
x <- v15 %>% filter(grepl("Attainment", concept,ignore.case =  TRUE, perl = FALSE))
x <- v15 %>% filter(grepl("grade", concept,ignore.case =  TRUE, perl = FALSE))
x <- v15 %>% filter(grepl("grade", concept,ignore.case =  TRUE))
v15 <- load_variables(2006, "acs1", cache = TRUE)
View(v15)
v15 <- load_variables(2006, "sf1", cache = TRUE)
View(v15)
v15 <- load_variables(2015, "sf1", cache = TRUE)
View(v15)
v15 <- load_variables(2015, "acs5", cache = TRUE)
v15 <- load_variables(2015, "acs1", cache = TRUE)
v15
# Sys.setenv(PATH = "/home/michael/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin")
Sys.setenv(R_HOME = "/usr/lib/R")
Sys.setenv(RHOME = "/usr/lib/R")
Sys.setenv(PATH = "/usr/lib/R")
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
