d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d5)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 500)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none')
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(50:100, 20)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- min(d$y) - 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d5)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 500)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none')
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- min(d$y) - 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d5)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 500)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none')
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- min(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d5)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 500)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none')
p
animation::ani.options(interval = 1/24)
gganimate(p, 'dropping balls.gif', title_frame = F)
library(gganimate)
animation::ani.options(interval = 1/24)
gganimate(p, 'dropping balls.gif', title_frame = F)
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "white", size = 10.3,family = "Open Sans Bold") +
animation::ani.options(interval = 1/24)
gganimate(p, 'dropping balls.gif', title_frame = F)
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20,replace= TRUE)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "white", size = 10.3,family = "Open Sans Bold") +
theme_bw()
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20,replace= TRUE)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, color = "forestgreen", frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20,replace= TRUE)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame), color = "forestgreen", show.legend = FALSE) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
p
gganimate(p, 'dropping balls.gif', title_frame = F)
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1800, ani.height = 1200))
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1800, ani.height = 1200)
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame), color = "forestgreen", show.legend = FALSE) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1200, ani.height = 600))
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame), color = "forestgreen", show.legend = FALSE) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1200, ani.height = 600)
View(dt)
dist = 1     # distance between the centers of hexagons
nx = dist*15 # horizontal extent
ny = dist*15 # vertical extent
MakeHexLattice = function(nx, ny, dist, origin=c(0,0)) {
locations = cbind(location = 1:(nx*ny),
x = sort(c(rep(seq(from=0, by=dist, length.out=nx),each=ceiling(ny/2)),
rep(seq(from=dist/2, by=dist, length.out=nx),
each=floor(ny/2)))) + origin[1],
y = rep(c(seq(from=0, by = dist*sqrt(3), length.out=ceiling(ny/2)),
seq(from=dist*sqrt(3)/2, by=dist*sqrt(3),
length.out=floor(ny/2))) + origin[2], times=nx))
class(locations) = c(class(locations), "lattice")
attr(locations, "gridsize") = dist
return(locations)
}
landscape = MakeHexLattice(nx=nx,ny=ny,dist=dist,origin=c(0,0))
# Plot hexagonal lattice as points
plot(x=landscape[,2],y=landscape[,3], pch=19, col="black", cex=0.5, asp=1/1)
# Separate x and y coordinates
lx = landscape[,2] # x-coordinates
ly = landscape[,3] # y-coordinates
# Plot hexagonal lattice as filled hexagons
hex.x = cbind(lx + 0, lx + 0.5, lx + 0.5, lx + 0, lx - 0.5, lx - 0.5)
hex.y = cbind(ly - 1/(sqrt(3)), ly - 1/(2*sqrt(3)), ly + 1/(2*sqrt(3)), ly + 1/(sqrt(3)), ly + 1/(2*sqrt(3)), ly - 1/(2*sqrt(3)))
hex.vectors = cbind(hex.x, hex.y)
for(i in 1:(length(hex.vectors)/12)){
polygon(x=hex.vectors[i,1:6], y=hex.vectors[i,7:12], angle = 120, border=NULL, col="wheat",
lty = par("lty"), fillOddEven = FALSE)
}
library(ggplot2)
library(reshape2)
#Get your coordinates in long format with an id
hexdat.x <- melt(cbind(id = 1:length(hex.x), as.data.frame(hex.x)), id.vars = "id", value.name = "x")
hexdat.y <- melt(cbind(id = 1:length(hex.y), as.data.frame(hex.y)), id.vars = "id", value.name = "y")
hexdat <- merge(hexdat.x, hexdat.y)
hexdat <- hexdat[1:600,]
### trying to make the animation
hexdat3 <- data.frame()
for(i in 1:10) {
hexdat2 <- data.frame(cbind(hexdat[,1:4], frame = i), stringsAsFactors = FALSE)
hexdat3 <- rbind(hexdat3,hexdat2)
}
colcol <-sample(c(rep(0,10),rep(2,4),7,10),nrow(hexdat3), replace = TRUE)
hexdat3temp <- data.frame(breaks = hexdat3$frame,col = colcol,stringsAsFactors = FALSE)
myf<-function(mystate){as.data.frame(hexdat3temp[hexdat3temp$breaks==mystate,])}
states2<-factor(unique((hexdat3temp$breaks)))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$id <- hexdat3[1:600,1]
tf$x <- hexdat3[1:600,3]
tf$y <- hexdat3[1:600,4]
library(tweenr)
hexdat3temp <- data.frame(breaks = hexdat3$frame,col = colcol,stringsAsFactors = FALSE)
myf<-function(mystate){as.data.frame(hexdat3temp[hexdat3temp$breaks==mystate,])}
states2<-factor(unique((hexdat3temp$breaks)))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$id <- hexdat3[1:600,1]
tf$x <- hexdat3[1:600,3]
tf$y <- hexdat3[1:600,4]
hex <- ggplot(tf, aes(x, y,frame = frame)) +
geom_polygon(aes(group = id,fill = colcol), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex <- ggplot(tf, aes(x, y,frame = frame)) +
geom_polygon(aes(group = id,fill = breaks), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
View(tf)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = breaks), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex
dev.off()
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = breaks)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
unique(tf$col)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1200, ani.height = 800)
library(gganimate)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1200, ani.height = 800)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1600, ani.height = 1600,title_frame = FALSE)
ani.options()
animation::ani.options()
animation::ani.options(interval = .5)
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1600, ani.height = 2000,title_frame = FALSE)
library(blogdown)
.libPaths()
.libPaths(new = "/home/michael/R/x86_64-pc-linux-gnu-library/3.4")
.libPaths()
devtools::install_github('rstudio/blogdown')
install.packages("rmarkdown")
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
blogdown::hugo_build()
gif_compress <- function(ingif, outgif, show=TRUE, extra.opts=""){
command <-  sprintf("gifsicle -O3 %s < %s > %s", extra.opts, ingif, outgif)
system.fun <- if (.Platform$OS.type == "windows") shell else system
if(show) message("Executing: ", strwrap(command, exdent = 2, prefix = "\n"))
system.fun(ifelse(.Platform$OS.type == "windows", sprintf("\"%s\"", shQuote(command)), command))
}
gif_compress("/home/michael/Documents/mikeleeco.github.com/static/img/measlesCarto.gif","/home/michael/Documents/mikeleeco.github.com/static/img/measlesCartogram.gif")
library(reshape2)
library(dplyr)
library(extrafont)
library(ggplot2)
library(gganimate)
library(animation)
library(grid)
library(tools)
library(rgdal)
library(rgeos)
library(maptools)
library(Cairo)
library(mapproj)
library(scales)
library(tweenr)
library(tidyr)
library(lubridate)
library(egg)
library(gtable)
measles <- read.csv("/home/michael/Documents/animation_samples/measles/measles.csv", skip=2)
measles <- melt(measles, id.var=c("YEAR", "WEEK"))
colnames(measles) <- c("year", "week", "state", "cases")
measles$cases <- ifelse(measles$cases=="\u002D",NA,measles$cases)
measles$cases <- as.numeric(measles$cases)
state.name2 <- c(state.name, "District of Columbia")
state.abb2 <- c(state.abb, "DC")
measles[,"state"] <- as.character(measles[,"state"])
measles[,"state"] <- gsub("."," ",measles[,"state"], fixed = TRUE)
measles[,"state"] <- state.abb2[match(trimws(measles[,"state"]),toupper(state.name2))]
mdf <- measles %>% group_by(state, year) %>%
summarise(incidence=if(all(is.na(cases))) NA else
sum(cases, na.rm=T))
# mdf$state <-factor(mdf$state, levels=rev(unique(mdf$state)))
cols<- c("#e7f0fa", #lighter than light blue
"#c9e2f6", #light blue
"#95cbee", #blue
"#0099dc", #darker blue
"#4ab04a", #green
"#ffd73e", #yellow
"#eec73a", #mustard
"#e29421", #dark khaki (?)
"#f05336", #orange red
"#ce472e") #red
extrafont::loadfonts()
square_grid <- function() {
us <- readOGR("/home/michael/Documents/NCESgifs/charterStateMap/npr_stategrid.geojson", "OGRGeoJSON")
centers <<- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$abbr))
us_map <<- fortify(us, region="abbr")
}
square_grid()
mdf$year <- as.Date(ISOdate(mdf$year, 12, 31))
mdf2 <- mdf[,2:3]
myf<-function(mystate){as.data.frame(mdf2[mdf2$year==mystate,])}
states2<-unique((mdf2$year))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$State <- unique(mdf$state)
# tf$year <- as.Date(tf$year,"%Y")
years <- unique(measles$year)
yearTotal <- length(unique(years))
yearlyMeaslesData <- mdf %>% group_by(year) %>%  summarise(meanIncidence  = mean(incidence, na.rm = TRUE))
yearlyMeaslesData$year <- as.numeric(format(yearlyMeaslesData$year, "%Y"))
yearlyMeaslesData$meanIncidence <- ifelse(is.finite(yearlyMeaslesData$meanIncidence), yearlyMeaslesData$meanIncidence,0)
yearData <- data.frame(line = c(rep(1,yearTotal)), year = years, upper = c(rep(1.05,yearTotal)), lower = c(rep(0.95,yearTotal)),stringsAsFactors = FALSE)
yearLabels <- c(3,13,23,33,43,53,63,73)
yearData$label <- yearData$year
yearData$label[!yearData$year %in%  yearData$year[yearLabels]] <- NA
yearData$upper <- ifelse(is.na(yearData$label), 1,yearData$upper)
yearData$lower <- ifelse(is.na(yearData$label), 1,yearData$lower)
yearData <- left_join(yearData, yearlyMeaslesData)
# function to create list of data sets from our data (by state)
yearData$year <- as.Date(ISOdate(yearData$year, 12, 31))
myf<-function(mystate){as.data.frame(yearData[yearData$year==as.Date(mystate),])}
states2<-factor(unique((yearData$year)))
my.list2<-lapply(states2,myf)
tf2 <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf2$year <- as.Date(tf2$year,"%Y")
animation::ani.options(interval = 1/15)
yearz <- year(as.Date(yearData$year,"%d/%m/%Y"))
saveGIF({
for (i in 1:max(tf$.frame)) {
ggMap <- ggplot()
ggMap <- ggMap + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=.5,show.legend = FALSE) +
geom_map(data = subset(tf, .frame == i), map=us_map, aes(fill=incidence, map_id=State, frame = .frame), color = "black") +
geom_map(data = tf, map=us_map, aes(map_id=State, frame = .frame), alpha=0, color="black") +
geom_text(data=centers, aes(label=id, x=x, y=y), show.legend = FALSE,color="black", size=6.5) +
scale_fill_gradientn(colours=cols, limits=c(0, 4000),
values=c(0,0.01, 0.02, 0.03, 0.09, 0.1, .15, .25, .4, .5,1),
na.value=rgb(246, 246, 246, max=255),
labels=c("0k", "1k", "2k", "3k", "4k"),
guide=guide_colourbar(ticks=T, nbin=50,
barheight=.75, label=T,
barwidth=20)) +
labs(x="", y="", fill="") +
theme_void(base_family = "Open Sans") +
theme(legend.position=c(.5, -.05),
legend.direction="horizontal",
legend.text=element_text(colour="grey20"),
plot.margin=grid::unit(c(.5,.5,1.5,.5), "cm"),
axis.ticks.y=element_blank(),
panel.grid=element_blank(),
title=element_text(hjust=-.07, vjust=1,
family="Open Sans Semibold"),
text=element_text(family="Open Sans"),
panel.border=element_blank())
ggDots <- ggplot(tf2, aes(year,line)) + geom_point(data = subset(tf2, .frame == i), aes(frame = year,color = meanIncidence),show.legend = FALSE,size = 8) +
geom_path(data = yearData, aes(year)) + geom_linerange(data = yearData,aes(ymin = lower, ymax = upper)) +
geom_text(data = yearData,aes(label = yearData$label), size = 5.2, vjust = -1.5,family = "Open Sans Semibold") +
labs(x=NULL, y=NULL, title = "Measles") +
scale_y_continuous(limits = 1 + c(-.17, .25))+
theme_void(base_family = "Open Sans") + theme(plot.title = element_text(size=24, vjust= .1)) +
scale_color_gradientn(colours=cols, limits=c(0, 4000),
values=c(0,0.01, 0.02, 0.03, 0.09, 0.1, .15, .25, .4, .5,1),
na.value=rgb(246, 246, 246, max=255))
if(subset(tf2, .frame == i)$year >= c("1962-12-31")) {
ggDots <- ggDots + geom_segment(x= as.numeric(as.Date(c("1963-01-01"))),
xend= as.numeric(as.Date(c("1963-01-01"))), y=.95, yend=1.05, size=1.5, color = "forestgreen")
if(subset(tf2, .frame == i)$year == c("1962-12-31")) {
ggDots <- ggDots + annotate("text", label="Vaccine introduced", x=as.Date(c("1963-01-05")), y=.95,
vjust=1.1, hjust=.5, size=I(8), family="Open Sans", color= "forestgreen")
} else {
ggDots <- ggDots + annotate("text", label="", x=as.Date(c("1963-01-05")), y=.95,
vjust=1.1, hjust=.5, size=I(8), family="Open Sans", color= "forestgreen")
}
} else {
# doesn't add vertical lineif before 1963! instead annotate with text ""
ggDots <- ggDots +
annotate("text", label="", x=as.Date(c("1963-01-05")), y=1.05,
vjust=1, hjust=.5, size=I(8), family="Open Sans", color= "forestgreen")
}
map <- ggplotGrob(ggMap)
timeLine <- ggplotGrob(ggDots)
mapFrame <- gtable_frame(map, width = unit(30,"cm"), height = unit(19.2, "cm"), debug = FALSE)
timeLineFrame <- gtable_frame(timeLine, width = unit(30,"cm"), height = unit(2, "cm"), debug = FALSE)
fg <- rbind.gtable(timeLineFrame,mapFrame)
replicateAni <- function(x, n = 1) {
for(i in 1:n) {
grid.newpage()
grid.draw(x)
}
}
if(subset(tf2, .frame == i)$year == c("1962-12-31")) {
replicateAni(fg, n = 30)
} else if (subset(tf2, .frame == i)$year == max(tf2$year)) {
replicateAni(fg, n = 30)
} else {
replicateAni(fg, n = 1)
}
}
},movie.name="/home/michael/Documents/mikeleeco.github.com/static/img/measlesCarto.gif",title_frame = FALSE, ani.width = 1050, ani.height = 750)
gif_compress <- function(ingif, outgif, show=TRUE, extra.opts=""){
command <-  sprintf("gifsicle -O3 %s < %s > %s", extra.opts, ingif, outgif)
system.fun <- if (.Platform$OS.type == "windows") shell else system
if(show) message("Executing: ", strwrap(command, exdent = 2, prefix = "\n"))
system.fun(ifelse(.Platform$OS.type == "windows", sprintf("\"%s\"", shQuote(command)), command))
}
gif_compress("/home/michael/Documents/mikeleeco.github.com/static/img/measlesCarto.gif","/home/michael/Documents/mikeleeco.github.com/static/img/measlesCartogram.gif")
blogdown::hugo_build()
