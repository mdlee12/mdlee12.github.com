gg <- gg + theme(legend.title.align=1)
gg
plot(us)
rep(1:(columns))
rep(c(1,(2:columns +1))
)
rep(c(1,(1:columns-2 +1))
)
rep(c(1,(1:(columns-1) +1))
)
2:length(columns)
2:(columns)
rep(1:(columns))
rep(1:(columns))*2 -1
rep(rep(1:(columns))*2 -1),columns*rows/columns)
rep(rep(1:(columns))*2 -1,columns*rows/columns)
hexgrid <- function(rows, columns, id, remove) {
xVals <- rep(rep(1:(columns))*2 -1,columns*rows/columns)
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
cat("\n]}", sep="")
}
hexgrid(rows = 6, columns = 3, id= c(toupper(letters[1:18])), remove = c(11))
setwd("/home/michael/Documents/state_geojson")
library(rgdal)
library(rgeos)
library(ggplot2)
library(grid)
library(maptools)
library(mapproj)
us <- readOGR("us_states_hexgrid_practice.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$id))
us_map <- fortify(us, region="id")
us_map$long <- us_map$long
us_map$lat <- us_map$lat
math15 <- read.csv("nde.csv")
math15$State <- state.abb[match(math15[,"Jurisdiction"],state.name)]
math15$State[which(grepl("Dist",math15[,"Jurisdiction"]))] <- "DC"
math15$State[which(grepl("DoD",math15[,"Jurisdiction"]))] <- "DD"
math15$breaks <- cut(math15$Scale_Score,
breaks=c(0, 234, 239, 244, 249, 300),
labels=c("235>", "235", "240 ", "245",
"250<"))
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=math15, map=us_map,
aes(fill=breaks, map_id=State))
gg <- gg + geom_map(data=math15, map=us_map,
aes(map_id=State),
fill="#ffffff", alpha=0, color="white",
show.legend = FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=8)
gg <- gg + scale_fill_brewer(palette = "Greens")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL, title="2015 Math Performance by Focal Jurisdiction")
gg <- gg + theme_bw()
gg <- gg + theme(plot.title=element_text(face="bold", hjust=0, size=24))
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.margin=unit(3, "lines"))
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg <- gg + theme(strip.background=element_blank())
gg <- gg + theme(strip.text=element_text(face="bold", hjust=0, size=14))
gg <- gg + theme(legend.position=c(0.85, 0.1))
gg <- gg + theme(legend.direction="horizontal?")
gg <- gg + theme(legend.title.align=1)
gg
plot(us)
rep(1:(rows) * 1.5, rep(columns,rows)) -.5
row
rows
columns
rep(rep(1:(columns))*2 -1,columns*rows/columns)
rep(1:columns,(columns *rows)/2)
rep(c(rep(c(1,(columns+1))),rep(c(2,(columns+2)))), rows/2)
rep(c(1,(columns+1)))
rep(c(1,(columns)))
rep(c(2,(columns+2)))
rep(c(2,(columns+1)))
rep(c(3,(columns+1)))
rep(rep(1:(columns))*2 -1,columns*rows/columns)
rep(1:(columns))*2
rep(rep(1:(columns))*2 -1,columns*rows/columns)
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns*rows/columns)
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns)
hexgrid <- function(rows, columns, id, remove) {
xVals <- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns)
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
cat("\n]}", sep="")
}
hexgrid(rows = 6, columns = 3, id= c(toupper(letters[1:18])), remove = c(11))
setwd("/home/michael/Documents/state_geojson")
library(rgdal)
library(rgeos)
library(ggplot2)
library(grid)
library(maptools)
library(mapproj)
us <- readOGR("us_states_hexgrid_practice.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$id))
us_map <- fortify(us, region="id")
us_map$long <- us_map$long
us_map$lat <- us_map$lat
math15 <- read.csv("nde.csv")
math15$State <- state.abb[match(math15[,"Jurisdiction"],state.name)]
math15$State[which(grepl("Dist",math15[,"Jurisdiction"]))] <- "DC"
math15$State[which(grepl("DoD",math15[,"Jurisdiction"]))] <- "DD"
math15$breaks <- cut(math15$Scale_Score,
breaks=c(0, 234, 239, 244, 249, 300),
labels=c("235>", "235", "240 ", "245",
"250<"))
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=math15, map=us_map,
aes(fill=breaks, map_id=State))
gg <- gg + geom_map(data=math15, map=us_map,
aes(map_id=State),
fill="#ffffff", alpha=0, color="white",
show.legend = FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=8)
gg <- gg + scale_fill_brewer(palette = "Greens")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL, title="2015 Math Performance by Focal Jurisdiction")
gg <- gg + theme_bw()
gg <- gg + theme(plot.title=element_text(face="bold", hjust=0, size=24))
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.margin=unit(3, "lines"))
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg <- gg + theme(strip.background=element_blank())
gg <- gg + theme(strip.text=element_text(face="bold", hjust=0, size=14))
gg <- gg + theme(legend.position=c(0.85, 0.1))
gg <- gg + theme(legend.direction="horizontal?")
gg <- gg + theme(legend.title.align=1)
gg
plot(us)
hexgrid(rows = 100, columns = 3, id= c(toupper(letters[1:18])), remove = c(11))
hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
x <- hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
writeClipboard(x)
write.table(x, "clipboard", sep="\t", row.names=FALSE)
x
x <- hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
write.table(x, "clipboard", sep="\t", row.names=FALSE)
write.table(x, "clipboard", row.names=FALSE)
write(x)
x
x <- hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
x <-capture.output(hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11)))
write.table(x, "clipboard", row.names=FALSE)
?write.table
x <-capture.output(hexgrid(rows = 100, columns = 3, id= c(1:rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns)), remove = c(11)))
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns)
columns <- 4
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns)
rm(columns)
rm(rows)
hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
hexgrid <- function(rows, columns, id, remove) {
xVals <- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),columns)
print(xVals)
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
cat("\n]}", sep="")
}
hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
rows
rows <- 100
columns <- 3
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows/2)
length(rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows/2))
hexgrid <- function(rows, columns, id, remove) {
xVals <- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows/2)
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
cat("\n]}", sep="")
}
hexgrid(rows = 100, columns = 3, id= c(1:300), remove = c(11))
setwd("/home/michael/Documents/state_geojson")
library(rgdal)
library(rgeos)
library(ggplot2)
library(grid)
library(maptools)
library(mapproj)
us <- readOGR("us_states_hexgrid_practice.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$id))
us_map <- fortify(us, region="id")
us_map$long <- us_map$long
us_map$lat <- us_map$lat
math15 <- read.csv("nde.csv")
math15$State <- state.abb[match(math15[,"Jurisdiction"],state.name)]
math15$State[which(grepl("Dist",math15[,"Jurisdiction"]))] <- "DC"
math15$State[which(grepl("DoD",math15[,"Jurisdiction"]))] <- "DD"
math15$breaks <- cut(math15$Scale_Score,
breaks=c(0, 234, 239, 244, 249, 300),
labels=c("235>", "235", "240 ", "245",
"250<"))
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=math15, map=us_map,
aes(fill=breaks, map_id=State))
gg <- gg + geom_map(data=math15, map=us_map,
aes(map_id=State),
fill="#ffffff", alpha=0, color="white",
show.legend = FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=8)
gg <- gg + scale_fill_brewer(palette = "Greens")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL, title="2015 Math Performance by Focal Jurisdiction")
gg <- gg + theme_bw()
gg <- gg + theme(plot.title=element_text(face="bold", hjust=0, size=24))
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.margin=unit(3, "lines"))
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg <- gg + theme(strip.background=element_blank())
gg <- gg + theme(strip.text=element_text(face="bold", hjust=0, size=14))
gg <- gg + theme(legend.position=c(0.85, 0.1))
gg <- gg + theme(legend.direction="horizontal?")
gg <- gg + theme(legend.title.align=1)
gg
plot(us)
hexgrid(rows = 15, columns = 20, id= c(1:300), remove = c(11))
hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
hexgrid <- function(rows, columns, id, remove) {
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows/2)
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
cat("\n]}", sep="")
}
hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
xVals
15*20
length(xVals)
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows/2)
rows <- 15
columns <- 20
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
length(rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows))
length(rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows/2))
row
rows
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)/2
rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
1:length(xVals)
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
1:length(xVals)/2
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
1:(length(xVals))/2
length(xVals)
length(xVals)/2
1:length(xVals)/2
1:(length(xVals)/2)
hexgrid <- function(rows, columns, id, remove) {
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
xVals <- xVals[1:(length(xVals)/2)]
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
cat("\n]}", sep="")
}
hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
setwd("/home/michael/Documents/state_geojson")
library(rgdal)
library(rgeos)
library(ggplot2)
library(grid)
library(maptools)
library(mapproj)
us <- readOGR("us_states_hexgrid_practice.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$id))
us_map <- fortify(us, region="id")
us_map$long <- us_map$long
us_map$lat <- us_map$lat
math15 <- read.csv("nde.csv")
math15$State <- state.abb[match(math15[,"Jurisdiction"],state.name)]
math15$State[which(grepl("Dist",math15[,"Jurisdiction"]))] <- "DC"
math15$State[which(grepl("DoD",math15[,"Jurisdiction"]))] <- "DD"
math15$breaks <- cut(math15$Scale_Score,
breaks=c(0, 234, 239, 244, 249, 300),
labels=c("235>", "235", "240 ", "245",
"250<"))
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=math15, map=us_map,
aes(fill=breaks, map_id=State))
gg <- gg + geom_map(data=math15, map=us_map,
aes(map_id=State),
fill="#ffffff", alpha=0, color="white",
show.legend = FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=8)
gg <- gg + scale_fill_brewer(palette = "Greens")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL, title="2015 Math Performance by Focal Jurisdiction")
gg <- gg + theme_bw()
gg <- gg + theme(plot.title=element_text(face="bold", hjust=0, size=24))
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.margin=unit(3, "lines"))
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg <- gg + theme(strip.background=element_blank())
gg <- gg + theme(strip.text=element_text(face="bold", hjust=0, size=14))
gg <- gg + theme(legend.position=c(0.85, 0.1))
gg <- gg + theme(legend.direction="horizontal?")
gg <- gg + theme(legend.title.align=1)
gg
plot(us)
plot(us,xaxis = FALSE)
plot(us,type="n")
?plot
plot(us,type="n", lwd=2)
plot(us,type="n", lwd=3)
plot(us, lwd=3)
hexgrid <- function(rows, columns, id, remove) {
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
xVals <- xVals[1:(length(xVals)/2)]
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
paste("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep="")
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
paste("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep="")
}
}
paste("\n]}", sep="")
}
hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
hexgrid <- function(rows, columns, id, remove) {
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
xVals <- xVals[1:(length(xVals)/2)]
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat(paste(("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep=""))
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat(paste(("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep=""))
}
}
cat(paste(("\n]}", sep=""))
}
hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
hexgrid <- function(rows, columns, id, remove) {
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
xVals <- xVals[1:(length(xVals)/2)]
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat(paste("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep=""))
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat(paste("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep=""))
}
}
cat(paste("\n]}", sep=""))
}
hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
hexgrid <- function(rows, columns, id, remove) {
xVals <<- rep(c(rep(1:(columns))*2 -1,rep(rep(1:(columns))*2)),rows)
xVals <- xVals[1:(length(xVals)/2)]
yVals <- rep(1:(rows) * 1.5, rep(columns,rows)) -.5
cat(paste("{",dQuote("type"),": ",dQuote("FeatureCollection"),", ",dQuote("features"),": [\n\n", sep=""))
for(i in 1:(rows * columns )) {
if(!(i %in% remove)) {
cat(paste("{",dQuote("type"),":",dQuote("Feature"),",",dQuote("geometry"),":{", dQuote("type"),":", dQuote("Polygon"),",\n",
dQuote("coordinates"),": [[[",xVals[i],", ",yVals[i] + 2,"], [",xVals[i] + 1,", ",yVals[i] + 1.5,"], [",xVals[i] + 1,", ",yVals[i] + .5,"], [",xVals[i],", ",yVals[i],"], [",xVals[i] - 1,", ",yVals[i] + .5,"], [",xVals[i] - 1,", ",yVals[i] + 1.5,"], [",xVals[i],", ",yVals[i] + 2,"]]]\n},",dQuote("properties"),":{",dQuote("id"),":",dQuote(id[i]),"}},\n", sep=""))
}
}
cat(paste("\n]}", sep=""))
}
x <- hexgrid(rows = 15, columns = 20, id= c(1:(15*20)), remove = c(11))
x
knit_hooks$set(wrap = function(before, options, envir){
if (before){
paste0('<', options$wrap, '>')
} else {
paste0('</', options$wrap, '>')
}
})
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(gridExtra)
library(dplyr)
library(stringr)
library(tidyr)
library(extrafont)
extrafont::loadfonts(quiet = TRUE)
all_results <- read_csv("https://raw.githubusercontent.com/mkearney/presidential_election_county_results_2016/master/pres16results.csv")
urban <- read.table("http://www2.census.gov/geo/docs/reference/ua/PctUrbanRural_County.txt",
header=TRUE,sep=",", colClasses = "character")
urban$fips <- paste0(urban$STATE,urban$COUNTY)
urban <- urban %>% select(POP_COU, POPPCT_URBAN, fips)
urban[,1:2] <- sapply(urban[,1:2], as.numeric)
all_results <- left_join(all_results,urban)
wisconsin <- all_results %>%
filter(str_detect(fips, "^55"))
wisconsin_spread <- wisconsin %>%
filter(cand %in% c("Donald Trump", "Hillary Clinton", "Gary Johnson", "Jill Stein")) %>%
select(fips, cand, pct) %>%
mutate(pct = pct * 100,
region = as.numeric(fips)) %>%
spread(cand, pct) %>%
select(-fips)
wisconsin_spread
wisconsin_spread$value <- wisconsin_spread$`Donald Trump`
choro1 = CountyChoropleth$new(wisconsin_spread)
choro1$set_zoom("wisconsin")
choro1$title = "Donald Trump"
choro1$set_num_colors(1)
choro1$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro1$ggplot_scale = scale_fill_gradientn(name = "Percent",
colours = brewer.pal(8, "Reds"))
wisconsin_spread$value <- wisconsin_spread$`Hillary Clinton`
choro2 = CountyChoropleth$new(wisconsin_spread)
choro2$set_zoom("wisconsin")
choro2$title = "Hillary Clinton"
choro2$set_num_colors(1)
choro2$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro2$ggplot_scale = scale_fill_gradientn(name = "Percent",
colours = brewer.pal(8, "Blues"))
wisconsin_spread$value <- wisconsin_spread$`Gary Johnson`
choro3 = CountyChoropleth$new(wisconsin_spread)
choro3$set_zoom("wisconsin")
choro3$title = "Gary Johnson"
choro3$set_num_colors(1)
choro3$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro3$ggplot_scale = scale_fill_gradientn(name = "Percent",
colours = brewer.pal(8, "Purples"))
wisconsin_spread$value <- wisconsin_spread$`Jill Stein`
choro4 = CountyChoropleth$new(wisconsin_spread)
choro4$set_zoom("wisconsin")
choro4$title = "Jill Stein"
choro4$set_num_colors(1)
choro4$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro4$ggplot_scale = scale_fill_gradientn(name = "Percent",
colours = brewer.pal(8, "Greens"))
grid.arrange(choro1$render() + theme(text=element_text(family="DejaVu Sans Mono")),
choro2$render() + theme(text=element_text(family="DejaVu Sans Mono")),
choro3$render() + theme(text=element_text(family="DejaVu Sans Mono")),
choro4$render() + theme(text=element_text(family="DejaVu Sans Mono")), ncol = 2, nrow =2)
votes <- wisconsin %>%
filter(cand %in% c("Donald Trump", "Hillary Clinton", "Gary Johnson","Jill Stein")) %>%
mutate(cand = factor(cand, levels = c("Donald Trump", "Hillary Clinton", "Gary Johnson","Jill Stein"))) %>%
group_by(cand) %>%
summarise(sum = sum(votes))
ggplot(votes, aes(cand, sum, fill = cand)) +
geom_bar(stat = "identity", alpha = 0.8) +
theme_tufte(base_family = "DejaVu Sans Mono") +
scale_fill_manual(values = c("red3", "navyblue", "#6A51A3","darkgreen")) +
theme(legend.position="none") +
labs(title = "Total Votes Cast in Wisconsin", y = "Number of votes", x = NULL)
View(votes)
votes$sum[1]
votes$sum[1] - votes$sum[2]
setwd('/home/michael/Documents/mikeleeco.github.com/')
jekyll()
library(servr)
jekyll()
jekyll(input = "_source", output = "_posts", command = "bundle exec jekyll build")
jekyll(input = "_source", output = "_posts", command = "bundle exec jekyll build")
