datalist <- split(dat, dat$year)
countries <- gapminder %>% filter(country %in% c("Afghanistan", "Albania", "Algeria", "Argentina", "Australia"))
datalist <- split(countries, countries$year,drop = TRUE)
dat <- tween_states(datalist, 2, 1, 'linear', 100)
datalist <- split(dat, dat$year)
dat
makeplot <- function(){
for (i in 1:max(dat$.frame)) {
p <- ggplot(data = subset(dat, .frame <= i), aes(year, gdpPercap, color = country, group = country))  + geom_line( )  +  scale_x_continuous(limits = range(gapminder$year))
print(p)
}
}
# High Definition images:
gif_file <- file.path(paste0(getwd(), '/gifskiGapminderLine.gif'))
save_gif(makeplot(), gif_file, 1280, 720, res = 144, delay = .1)
utils::browseURL(gif_file)
library(gifski)
makeplot <- function(){
for (i in 1:max(dat$.frame)) {
p <- ggplot(data = subset(dat, .frame <= i), aes(year, gdpPercap, color = country, group = country))  + geom_line( )  +  scale_x_continuous(limits = range(gapminder$year))
print(p)
}
}
# High Definition images:
gif_file <- file.path(paste0(getwd(), '/gifskiGapminderLine.gif'))
save_gif(makeplot(), gif_file, 1280, 720, res = 144, delay = .1)
utils::browseURL(gif_file)
datalist <- split(countries, countries$year,drop = TRUE)
dat <- tween_states(datalist, 1, 1, 'linear', 100)
# gifski
makeplot <- function(){
for (i in 1:max(dat$.frame)) {
p <- ggplot(data = subset(dat, .frame <= i), aes(year, gdpPercap, color = country, group = country))  + geom_line( )  +  scale_x_continuous(limits = range(gapminder$year)) +  scale_y_continuous(limits = range(gapminder$gdpPercap))
print(p)
}
}
# High Definition images:
gif_file <- file.path(paste0(getwd(), '/gifskiGapminderLine.gif'))
save_gif(makeplot(), gif_file, 1280, 720, res = 144, delay = .1)
utils::browseURL(gif_file)
View(dat)
tween_states()
?tween_states
datalist <- split(countries, countries$year,drop = TRUE)
dat <- tween_states(datalist, tweenlength = 1, statelength = 0, 'linear', 100)
# gifski
makeplot <- function(){
for (i in 1:max(dat$.frame)) {
p <- ggplot(data = subset(dat, .frame <= i), aes(year, gdpPercap, color = country, group = country))  + geom_line( )  +  scale_x_continuous(limits = range(gapminder$year)) +  scale_y_continuous(limits = c(0,40000))
print(p)
}
}
# High Definition images:
gif_file <- file.path(paste0(getwd(), '/gifskiGapminderLine.gif'))
save_gif(makeplot(), gif_file, 1280, 720, res = 144, delay = .1)
utils::browseURL(gif_file)
?image_animate
library(magick)
?image_animate
img <- image_graph(1280, 720, res = 144)
dev.off()
img <- image_graph(1280, 720, res = 144)
dev.off()
dev.off()
?image_graph
makeplot <- function(){
lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
}
saveGIF(makeplot(),movie.name="/home/michael/Documents/NCESgifs/lineCompletion/lineCompletionLarge.gif",interval = .02, ani.width = 1200, ani.height = 800)
library(animation)
makeplot <- function(){
lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
}
saveGIF(makeplot(),movie.name="/home/michael/Documents/NCESgifs/lineCompletion/lineCompletionLarge.gif",interval = .02, ani.width = 1200, ani.height = 800)
datalist <- split(gapminder, gapminder$year)
dat <- tween_states(datalist, 2, 1, 'linear', 100)
datalist <- split(dat, dat$year)
makeplot <- function(){
lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
}
saveGIF(makeplot(),movie.name=paste0(getwd(), '/animationapminder.gif'),interval = .02, ani.width = 1200, ani.height = 800)
?animate
devtools::install_github('thomasp85/gganimate')
hobart
library(datasets)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(ggplot2) # devtools::install_github("hadley/ggplot2")
library(scales)
library(tidyr)
library(Cairo)
library(extrafont)
library(dplyr)
library(lubridate)
library(tweenr)
library(animation)
library(RColorBrewer)
library(grid)
loadfonts()
res <- txhousing %>% filter(city %in% unique(txhousing$city)[1:2] & month==1)
res <- res[,c(1,2,6)]
res$city <- factor(res$city, levels = c("Abilene","Amarillo"), labels = c("Abilene","Amarillo"))
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$year)))
# res$Level <- as.character(res$Level)
res$year <- as.Date(as.character(res$year),"%Y")
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$year==as.Date(as.character(mystate),"%Y"),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 1, statelength=0, ease='linear',nframes=200)
# tf$year <- as.Date(tf$year,"%Y")
tf$LevelLabel <- as.character(tf$city)
# tf$nudge <- ifelse(tf$LevelLabel=="Male", 0,ifelse(tf$LevelLabel=="Female",0,0))
tf$nudge_x <- ifelse(tf$LevelLabel=="Abilene", 700,ifelse(tf$LevelLabel=="Amarillo",750,0))
theme_white <- theme(text = element_text(family="Open Sans"),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
axis.title.x=element_text(size=20, margin = margin(t=10)),
axis.text.x=element_text(size=16),
axis.text.y=element_text(size=16),
axis.ticks = element_line(size = .5, color = "grey30"),
axis.ticks.length=unit(4, "pt"),
plot.title=element_text(size=26,family = "Open Sans",lineheight=1.15),
plot.subtitle=element_text(size=20, margin = margin(t=20, b = -5),hjust = -0.03, family = "Open Sans"),
plot.caption=element_text(size=14, margin=margin(t=15,r=-15),hjust = -.03,lineheight=1.15, family = "Open Sans", face  = "italic"),
legend.position="none"
)
my_palette = c("#3EC7F4", "#3FA66C")
yAxisBreaks <- seq(0, 140000, by = 20000)
yAxisLabels <- paste0(format(yAxisBreaks))
yAxisLimits <- c(0,max(yAxisBreaks)* 1.03)
yAxisLabels <- c(yAxisLabels[1:length(yAxisLabels)-1], paste0("$",yAxisLabels[length(yAxisLabels)]))
# tf$nudge_y <- ifelse(tf$Category=="Hispanic", 2.0, ifelse(tf$Category=="White",-1.5, 1))
# tf$nudge_x <- ifelse(tf$Category=="Hispanic", 450, ifelse(tf$Category=="White",350, 320))
xAxis <- seq(2000, 2015, by = 2)
xAxisBreaks <- xAxis
xAxisBreaks <- as.Date(as.character(xAxisBreaks),"%Y")
title <- "Median sale price of homes in Abilene and Amarillo, 2009 through 2015"
subtitle <- "Median sale price"
caption <- "SOURCE: U.S. Department of Commerce, Census Bureau, Current Population Survey (CPS), October 2000 through 2016."
xLab <- "Year"
yLab <- ""
midPoint <- round(max(tf$.frame) / 2)
g <-  ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
print(g);
i <- 40
g <-  ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
print(g);
tf$nudge_x <- ifelse(tf$LevelLabel=="Abilene", 400,ifelse(tf$LevelLabel=="Amarillo",450,0))
ggplot(data = subset(tf, .frame == midPoint), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == midPoint),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == midPoint),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == midPoint)$nudge_y, nudge_x = subset(tf, .frame == midPoint)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
ggplot(data = subset(tf, .frame <= midPoint), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == midPoint),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == midPoint),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == midPoint)$nudge_y, nudge_x = subset(tf, .frame == midPoint)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
midPoint
I <- midPoint + 50
i <- midPoint + 50
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
midPoint:max(tf$.frame)
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == i),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == i),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75)
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == i),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
title <- "Median sale price of homes in Abilene and Amarillo, 2009 through 2015"
subtitle <- ""
caption <- "SOURCE: U.S. Department of Commerce, Census Bureau, Current Population Survey (CPS), October 2000 through 2016."
xLab <- "Year"
yLab <- "Median sale price"
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == i),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
library(ggplot2) # devtools::install_github("hadley/ggplot2")
library(scales)
library(tidyr)
library(Cairo)
library(extrafont)
library(dplyr)
library(lubridate)
library(tweenr)
library(animation)
library(RColorBrewer)
library(grid)
loadfonts()
res <- txhousing %>% filter(city %in% unique(txhousing$city)[1:2] & month==1)
res <- res[,c(1,2,6)]
res$city <- factor(res$city, levels = c("Abilene","Amarillo"), labels = c("Abilene","Amarillo"))
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$year)))
# res$Level <- as.character(res$Level)
res$year <- as.Date(as.character(res$year),"%Y")
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$year==as.Date(as.character(mystate),"%Y"),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 1, statelength=0, ease='linear',nframes=200)
# tf$year <- as.Date(tf$year,"%Y")
tf$LevelLabel <- as.character(tf$city)
# tf$nudge <- ifelse(tf$LevelLabel=="Male", 0,ifelse(tf$LevelLabel=="Female",0,0))
tf$nudge_x <- ifelse(tf$LevelLabel=="Abilene", 400,ifelse(tf$LevelLabel=="Amarillo",450,0))
theme_white <- theme(text = element_text(family="Open Sans"),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
axis.title.x=element_text(size=20, margin = margin(t=10)),
axis.title.y=element_text(size=20, margin = margin(t=10)),
axis.text.x=element_text(size=16),
axis.text.y=element_text(size=16),
axis.ticks = element_line(size = .5, color = "grey30"),
axis.ticks.length=unit(4, "pt"),
plot.title=element_text(size=26,family = "Open Sans",lineheight=1.15),
plot.subtitle=element_text(size=20, margin = margin(t=20, b = -5),hjust = -0.03, family = "Open Sans"),
plot.caption=element_text(size=14, margin=margin(t=15,r=-15),hjust = -.03,lineheight=1.15, family = "Open Sans", face  = "italic"),
legend.position="none"
)
my_palette = c("#3EC7F4", "#3FA66C")
yAxisBreaks <- seq(0, 140000, by = 20000)
yAxisLabels <- paste0(format(yAxisBreaks))
yAxisLimits <- c(0,max(yAxisBreaks)* 1.03)
yAxisLabels <- c(yAxisLabels[1:length(yAxisLabels)-1], paste0("$",yAxisLabels[length(yAxisLabels)]))
# tf$nudge_y <- ifelse(tf$Category=="Hispanic", 2.0, ifelse(tf$Category=="White",-1.5, 1))
# tf$nudge_x <- ifelse(tf$Category=="Hispanic", 450, ifelse(tf$Category=="White",350, 320))
xAxis <- seq(2000, 2015, by = 2)
xAxisBreaks <- xAxis
xAxisBreaks <- as.Date(as.character(xAxisBreaks),"%Y")
title <- "Median sale price of homes in Abilene and Amarillo, 2009 through 2015"
subtitle <- ""
caption <- "SOURCE: U.S. Department of Commerce, Census Bureau, Current Population Survey (CPS), October 2000 through 2016."
xLab <- "Year"
yLab <- "Median sale price"
midPoint <- round(max(tf$.frame) / 2)
saveGIF({
for(i in 1:midPoint) {
g <-  ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
print(g);
}
g <-   ggplot(data = subset(tf, .frame <= midPoint), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == midPoint),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == midPoint),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == midPoint)$nudge_y, nudge_x = subset(tf, .frame == midPoint)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
replicate(75,grid.draw(g))
for(i in midPoint:max(tf$.frame)) {
g <-  ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == i),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
print(g);  }
wholeFig <- ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
geom_point(data = subset(tf, .frame == i),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =as.Date(c("1999-07-01", "2019-01-01"))) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
replicate(110,grid.draw(wholeFig))
},movie.name="/home/michael/Documents/NCESgifs/txHousing/txHousing.gif",interval = .02, ani.width = 1024, ani.height = 612)
gif_compress <- function(ingif, outgif, show=TRUE, extra.opts=""){
command <-  sprintf("gifsicle -O3 %s < %s > %s", extra.opts, ingif, outgif)
system.fun <- if (.Platform$OS.city == "windows") shell else system
if(show) message("Executing: ", strwrap(command, exdent = 2, prefix = "\n"))
system.fun(ifelse(.Platform$OS.city == "windows", sprintf("\"%s\"", shQuote(command)), command))
}
gif_compress("/home/michael/Documents/NCESgifs/txHousing/txHousing.gif","/home/michael/Documents/NCESgifs/txHousing/tx_Housing.gif",extra.opts="--colors 256")
gif_compress <- function(ingif, outgif, show=TRUE, extra.opts=""){
command <-  sprintf("gifsicle -O3 %s < %s > %s", extra.opts, ingif, outgif)
system.fun <- if (.Platform$OS.type == "windows") shell else system
if(show) message("Executing: ", strwrap(command, exdent = 2, prefix = "\n"))
system.fun(ifelse(.Platform$OS.type == "windows", sprintf("\"%s\"", shQuote(command)), command))
}
gif_compress("/home/michael/Documents/NCESgifs/txHousing/txHousing.gif","/home/michael/Documents/NCESgifs/txHousing/tx_Housing.gif")
theme_white <- theme(text = element_text(family="Open Sans"),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
axis.title.x=element_text(size=20, margin = margin(t=10)),
axis.title.y=element_text(size=20, margin = margin(t=10)),
axis.text.x=element_text(size=16),
axis.text.y=element_text(size=16),
axis.ticks = element_blank(),
plot.title=element_text(size=26,family = "Open Sans",lineheight=1.15),
plot.subtitle=element_text(size=20, margin = margin(t=20, b = -5),hjust = -0.03, family = "Open Sans"),
plot.caption=element_text(size=14, margin=margin(t=15,r=-15),hjust = -.03,lineheight=1.15, family = "Open Sans", face  = "italic"),
legend.position="none"
)
my_palette = c("#3EC7F4", "#3FA66C")
yAxisBreaks <- seq(0, 140000, by = 20000)
yAxisLabels <- paste0(format(yAxisBreaks))
yAxisLimits <- c(0,max(yAxisBreaks)* 1.03)
yAxisLabels <- c(yAxisLabels[1:length(yAxisLabels)-1], paste0("$",yAxisLabels[length(yAxisLabels)]))
# tf$nudge_y <- ifelse(tf$Category=="Hispanic", 2.0, ifelse(tf$Category=="White",-1.5, 1))
# tf$nudge_x <- ifelse(tf$Category=="Hispanic", 450, ifelse(tf$Category=="White",350, 320))
xAxis <- seq(2000, 2015, by = 2)
xAxisBreaks <- xAxis
xAxisBreaks <- as.Date(as.character(xAxisBreaks),"%Y")
xAxisLimits <- as.Date(c("1999-07-01", "2019-01-01"))
title <- "Median sale price of homes in Abilene and Amarillo, 2000 through 2015"
subtitle <- ""
caption <- "Information about the housing market in Texas provided by the TAMU real estate center, http://recenter.tamu.edu/."
xLab <- "Year"
yLab <- "Median sale price"
midPoint <- round(max(tf$.frame) / 2)
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =xAxisLimits) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
print(g);
library(ggplot2) # devtools::install_github("hadley/ggplot2")
library(scales)
library(tidyr)
library(Cairo)
library(extrafont)
library(dplyr)
library(lubridate)
library(tweenr)
library(animation)
library(RColorBrewer)
library(grid)
loadfonts()
res <- txhousing %>% filter(city %in% unique(txhousing$city)[1:2] & month==1)
res <- res[,c(1,2,6)]
res$city <- factor(res$city, levels = c("Abilene","Amarillo"), labels = c("Abilene","Amarillo"))
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$year)))
# res$Level <- as.character(res$Level)
res$year <- as.Date(as.character(res$year),"%Y")
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$year==as.Date(as.character(mystate),"%Y"),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 1, statelength=0, ease='linear',nframes=200)
# tf$year <- as.Date(tf$year,"%Y")
tf$LevelLabel <- as.character(tf$city)
# tf$nudge <- ifelse(tf$LevelLabel=="Male", 0,ifelse(tf$LevelLabel=="Female",0,0))
tf$nudge_x <- ifelse(tf$LevelLabel=="Abilene", 400,ifelse(tf$LevelLabel=="Amarillo",450,0))
theme_white <- theme(text = element_text(family="Open Sans"),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
axis.title.x=element_text(size=20, margin = margin(t=10)),
axis.title.y=element_text(size=20, margin = margin(t=10)),
axis.text.x=element_text(size=16),
axis.text.y=element_text(size=16),
axis.ticks = element_blank(),
plot.title=element_text(size=26,family = "Open Sans",lineheight=1.15),
plot.subtitle=element_text(size=20, margin = margin(t=20, b = -5),hjust = -0.03, family = "Open Sans"),
plot.caption=element_text(size=14, margin=margin(t=15,r=-15),hjust = -.03,lineheight=1.15, family = "Open Sans", face  = "italic"),
legend.position="none"
)
my_palette = c("#3EC7F4", "#3FA66C")
yAxisBreaks <- seq(0, 140000, by = 20000)
yAxisLabels <- paste0(format(yAxisBreaks))
yAxisLimits <- c(0,max(yAxisBreaks)* 1.03)
yAxisLabels <- c(yAxisLabels[1:length(yAxisLabels)-1], paste0("$",yAxisLabels[length(yAxisLabels)]))
# tf$nudge_y <- ifelse(tf$Category=="Hispanic", 2.0, ifelse(tf$Category=="White",-1.5, 1))
# tf$nudge_x <- ifelse(tf$Category=="Hispanic", 450, ifelse(tf$Category=="White",350, 320))
xAxis <- seq(2000, 2015, by = 2)
xAxisBreaks <- xAxis
xAxisBreaks <- as.Date(as.character(xAxisBreaks),"%Y")
xAxisLimits <- xAxisLimits
title <- "Median sale price of homes in Abilene and Amarillo, 2000 through 2015"
subtitle <- ""
caption <- "Information about the housing market in Texas provided by the TAMU real estate center, http://recenter.tamu.edu/."
xLab <- "Year"
yLab <- "Median sale price"
midPoint <- round(max(tf$.frame) / 2)
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =xAxisLimits) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption) + theme_minimal() + theme_white + scale_color_manual(values=my_palette)
print(g);
ggplot(data = subset(tf, .frame <= i), aes(x = year, y = median, .frame = i)) +
geom_point(data = subset(tf, .frame == min(.frame)),aes(group=city, color=city), size=5) +
# geom_text(data = subset(tf, .frame == min(.frame)),aes(label = paste0(format(subset(tf, .frame == min(.frame))$Value, big.mark = ","))), size = 9, nudge_y= tf$nudge,nudge_x= -200,family="Gotham Book") +
geom_line(aes(group=city, color=city, cumulative = TRUE, label=LevelLabel), size=2.5) +
scale_x_date(labels=year(xAxisBreaks), expand = c(0, 0), breaks=xAxisBreaks, limits =xAxisLimits) +
scale_y_continuous(labels=yAxisLabels, expand = c(0, 0), breaks=yAxisBreaks,limits = yAxisLimits) + theme_minimal() + theme_white + scale_color_manual(values=my_palette) +
geom_text(data = subset(tf, .frame == i),aes(label =LevelLabel), size = 9, nudge_y = subset(tf, .frame == i)$nudge_y, nudge_x = subset(tf, .frame == i)$nudge_x, family = "Open Sans", lineheight = 0.75) +
labs(x=xLab, y=yLab, title = title, subtitle = subtitle,
caption = caption)
xAxisLimits
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
