d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "white", size = 10.3,family = "Open Sans Bold") +
theme_bw()
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20,replace= TRUE)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, color = "forestgreen", frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
p
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'bounce-in'
d3 <- d2
d3$time <- d2$time + sample(0:10, 20,replace= TRUE)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- max(d$y) + 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d3,d2,d)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 100)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame), color = "forestgreen", show.legend = FALSE) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "black", font = "bold", size = 10,family = "Open Sans Bold") +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
p
gganimate(p, 'dropping balls.gif', title_frame = F)
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1800, ani.height = 1200))
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1800, ani.height = 1200)
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame), color = "forestgreen", show.legend = FALSE) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1200, ani.height = 600))
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame), color = "forestgreen", show.legend = FALSE) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
annotate("text", x = max(dt$x)/2, y = max(dt$y)/2, label = "Happy Birthday\nMichelle!!\n:D",colour = "steelblue", size = 10.3,family = "Open Sans Bold") +
theme_void()
gganimate(p, 'happy_birthday_michelle.gif', title_frame = F, ani.width = 1200, ani.height = 600)
View(dt)
dist = 1     # distance between the centers of hexagons
nx = dist*15 # horizontal extent
ny = dist*15 # vertical extent
MakeHexLattice = function(nx, ny, dist, origin=c(0,0)) {
locations = cbind(location = 1:(nx*ny),
x = sort(c(rep(seq(from=0, by=dist, length.out=nx),each=ceiling(ny/2)),
rep(seq(from=dist/2, by=dist, length.out=nx),
each=floor(ny/2)))) + origin[1],
y = rep(c(seq(from=0, by = dist*sqrt(3), length.out=ceiling(ny/2)),
seq(from=dist*sqrt(3)/2, by=dist*sqrt(3),
length.out=floor(ny/2))) + origin[2], times=nx))
class(locations) = c(class(locations), "lattice")
attr(locations, "gridsize") = dist
return(locations)
}
landscape = MakeHexLattice(nx=nx,ny=ny,dist=dist,origin=c(0,0))
# Plot hexagonal lattice as points
plot(x=landscape[,2],y=landscape[,3], pch=19, col="black", cex=0.5, asp=1/1)
# Separate x and y coordinates
lx = landscape[,2] # x-coordinates
ly = landscape[,3] # y-coordinates
# Plot hexagonal lattice as filled hexagons
hex.x = cbind(lx + 0, lx + 0.5, lx + 0.5, lx + 0, lx - 0.5, lx - 0.5)
hex.y = cbind(ly - 1/(sqrt(3)), ly - 1/(2*sqrt(3)), ly + 1/(2*sqrt(3)), ly + 1/(sqrt(3)), ly + 1/(2*sqrt(3)), ly - 1/(2*sqrt(3)))
hex.vectors = cbind(hex.x, hex.y)
for(i in 1:(length(hex.vectors)/12)){
polygon(x=hex.vectors[i,1:6], y=hex.vectors[i,7:12], angle = 120, border=NULL, col="wheat",
lty = par("lty"), fillOddEven = FALSE)
}
library(ggplot2)
library(reshape2)
#Get your coordinates in long format with an id
hexdat.x <- melt(cbind(id = 1:length(hex.x), as.data.frame(hex.x)), id.vars = "id", value.name = "x")
hexdat.y <- melt(cbind(id = 1:length(hex.y), as.data.frame(hex.y)), id.vars = "id", value.name = "y")
hexdat <- merge(hexdat.x, hexdat.y)
hexdat <- hexdat[1:600,]
### trying to make the animation
hexdat3 <- data.frame()
for(i in 1:10) {
hexdat2 <- data.frame(cbind(hexdat[,1:4], frame = i), stringsAsFactors = FALSE)
hexdat3 <- rbind(hexdat3,hexdat2)
}
colcol <-sample(c(rep(0,10),rep(2,4),7,10),nrow(hexdat3), replace = TRUE)
hexdat3temp <- data.frame(breaks = hexdat3$frame,col = colcol,stringsAsFactors = FALSE)
myf<-function(mystate){as.data.frame(hexdat3temp[hexdat3temp$breaks==mystate,])}
states2<-factor(unique((hexdat3temp$breaks)))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$id <- hexdat3[1:600,1]
tf$x <- hexdat3[1:600,3]
tf$y <- hexdat3[1:600,4]
library(tweenr)
hexdat3temp <- data.frame(breaks = hexdat3$frame,col = colcol,stringsAsFactors = FALSE)
myf<-function(mystate){as.data.frame(hexdat3temp[hexdat3temp$breaks==mystate,])}
states2<-factor(unique((hexdat3temp$breaks)))
my.list2<-lapply(states2,myf)
tf <- tween_states(my.list2, tweenlength= 3, statelength=0, ease='linear',nframes=200)
tf$id <- hexdat3[1:600,1]
tf$x <- hexdat3[1:600,3]
tf$y <- hexdat3[1:600,4]
hex <- ggplot(tf, aes(x, y,frame = frame)) +
geom_polygon(aes(group = id,fill = colcol), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex <- ggplot(tf, aes(x, y,frame = frame)) +
geom_polygon(aes(group = id,fill = breaks), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
View(tf)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = breaks), alpha = 1) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex
dev.off()
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = breaks)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
hex
unique(tf$col)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1200, ani.height = 800)
library(gganimate)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1200, ani.height = 800)
hex <- ggplot(tf, aes(x, y,frame = .frame)) +
geom_polygon(aes(group = id,fill = col)) +
scale_fill_gradient(low = "white", high = "#e7e7e7") + theme_void() +  theme(legend.position="none")
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1600, ani.height = 1600,title_frame = FALSE)
ani.options()
animation::ani.options()
animation::ani.options(interval = .5)
gganimate(hex, "hugo/static/img/hexBackground.gif", ani.width = 1600, ani.height = 2000,title_frame = FALSE)
library(blogdown)
.libPaths()
.libPaths(new = "/home/michael/R/x86_64-pc-linux-gnu-library/3.4")
.libPaths()
devtools::install_github('rstudio/blogdown')
install.packages("rmarkdown")
library(extrafont)
extrafont::loadfonts()
?font_install
getwd()
font_import(paste0(getwd(),"/OpenType"))
library(devtiiks)
library(devtools)
install_github("wch/extrafont@freetype")
library(extrafont)
library(extra)
extrafont
library(extrafont)
font_import(paste0(getwd(),"/OpenType"))
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham-*", prompt = FALSE)
install_github("wch/Rttf2pt1@freetype2")
library(devtools)
install_github("wch/Rttf2pt1@freetype2")
install_github("wch/Rttf2pt1@freetype2")
library(devtools)
install_github("wch/Rttf2pt1@freetype2")
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham-*", prompt = FALSE)
library(extrafont)
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham-*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"), pattern = "Gotham", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"), prompt = FALSE)
font_import(paste0(getwd(),"/OpenType"))
font_import(paste0(getwd(),"/OpenType/"), pattern = "Gotham-*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Gotham*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Gotham.*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Got.*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Got*", prompt = FALSE)
font_import(paste0(getwd(),"/OpenType/"), pattern = "Got", prompt = FALSE)
install.packages("Rttf2pt1")
install.packages("Rttf2pt1")
library(Rttf2pt1)
install_github("wch/Rttf2pt1@freetype2")
library(extra)
extrafont
library(extrafont)
extrafont::font_import()
FONTS()
fonts()
extrafont::font_import()
library(extrafont)
loadfonts()
pdfFonts()
remove.packages(" Rttf2pt1")
remove.packages("Rttf2pt1")
install.packages("Rttf2pt1")
install.packages("Rttf2pt1")
library(Rttf2pt1)
remove.packages("extrafont")
installed.packages("extrafont")
install.packages("extrafont")
library(extrafont)
library(extrafont)
loadfonts()
1060/1040
x <- 1060/1040
x*612
x <- 1075/1040
x*612
install.packages("ggjoy")
library(ggjoy)
??ggjoy
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 0.005) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 4) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 4) +
scale_y_discrete(expand=c(0.1, 0)) +
scale_x_continuous(expand=c(0.1, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 0.5) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 1) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 0) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 2) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = 1) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .99) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .9) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .1) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy(rel_min_height = .7) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy() + theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy2() + theme_joy()
ggplot(iris, aes(x = Sepal.Length, y = Species)) +
geom_joy() + theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 4) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 1) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 10) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
ggplot(diamonds, aes(x = price, y = cut)) +
geom_joy(scale = 100) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
theme_joy()
d <- data.frame(x = rep(1:5, 3), y = c(rep(0, 5), rep(1, 5), rep(3, 5)),
height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1))
ggplot(d, aes(x, y, height = height, group = y)) + geom_ridgeline(fill="lightblue")
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
lincoln_weather
View(lincoln_weather)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, color = `Mean Temperature [F]`) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(fill = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, color = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`)) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_joy(font_size = 13, grid = T) + theme(axis.title.y = element_blank())
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(color = `Mean Temperature [F]`))
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01, aes(fill = `Mean Temperature [F]`))
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,fill = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,color = `Mean Temperature [F]`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,color = Mean Temperature [F])) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,color = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`,fill = `Month`)) +
geom_joy(scale = 3, rel_min_height = 0.01)
library(tweenr)
?tweenr
install.packages(c("devtools","rstudioapi"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages(c("reshape", "MASS", "psych", "Rglpk", "XML", "data.table"), dependencies=TRUE)
library("ffanalytics")
devtools::install_github(repo = "dadrivr/ffanalytics")
library("ffanalytics")
scrapeData <- runScrape(week = 0, season = 2017, analysts = c(-1, 5, 7, 18, 27), positions = c("QB", "RB", "WR", "TE", "K", "DST"))
View(playerData)
scrapeData$QB
qb <- scrapeData$QB
str(scrapeData$QB)
str(scrapeData$QB$resultData)
str(scrapeData$QB[["resultData"]])
str(scrapeData$QB@resultData)
qb <- scrapeData$QB@resultData
View(qb)
calculatePoints("qb")
calculatePoints(scrapeData)
getwd()
x <- read.csv("proj.csv")
View(x)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
x <- read.csv("projppr.csv")
library(dplyr)
unique(x$position)
x <- x %>% filter(position != "DB")
x <- x %>% filter(position != "DL")
x <- x %>% filter(position != "LB")
unique(x$position)
x <- as.data.frame(zx)
x <- as.data.frame(x)
unique(x$position)
x <- data.frame(x, stringsAsFactors = FALSE)
unique(x$position)
wr <- filter(x, position== "WR")
rb <- filter(x, position== "RB")
qb <- filter(x, position== "QB")
te <- filter(x, position== "TE")
k <- filter(x, position== "K")
dst <- filter(x, position== "DST")
View(rb)
View(te)
View(rb)
View(te)
View(wr)
rb <- rb[8:nrow(rb),]
rb <- rb[5:nrow(rb),]
rb <- rb[2:nrow(rb),]
wr <- wr[15:nrow(wr),]
View(qb)
View(k)
View(dst)
getwd()
saveRDS(x, "projections.Rdata")
lis.files()
list.files()
vv <- readRDS("projections.Rdata")
unique(x$position)
vv <- readRDS("projections.Rdata")
View(vv)
library(dplytr)
library(dplyr)
vv <- filter(position == "DST")
vv <- vv%>% filter(position == "DST")
setwd('/home/michael/Documents/mikeleeco.github.com/')
library(blogdown)
# file.create('.nojekyll')
# blogdown::build_site()
# blogdown::hugo_build()
# serve_site should build the site without errors and display it in the viewer. It's now ready to be pushed to master on github
blogdown::serve_site()
